[{"module":"Core","version":null,"exports":[{"export":"AccessControlEntry.ConditionContextType","kind":"Type","summary":"The authorization context against which an access control entry (ACE) condition is evaluated.","signatures":null},{"export":"AccessControlEntry.ConditionToIdentities","kind":"Function","summary":"Returns a list of identities that the condition will accept.","signatures":[{"label":"AccessControlEntry.ConditionToIdentities(identityProvider as function, condition as function)","parameters":[{"label":"identityProvider","documentation":"function","signatureLabelOffset":41,"signatureLabelEnd":69},{"label":"condition","documentation":"function","signatureLabelOffset":71,"signatureLabelEnd":92}],"documentation":"Returns a list of identities that the condition will accept.","SignatureStart":"AccessControlEntry.ConditionToIdentities(","SignatureEnd":")"}]},{"export":"AccessControlEntry.Type","kind":"Type","summary":"A table of access control entries (ACEs).","signatures":null},{"export":"AccessControlKind.Allow","kind":"Constant","summary":"Access is allowed.","signatures":null},{"export":"AccessControlKind.Deny","kind":"Constant","summary":"Access is denied.","signatures":null},{"export":"AccessControlKind.Type","kind":"Type","summary":"Specifies the kind of access control.","signatures":null},{"export":"Any.Type","kind":"Type","summary":"The type that represents all values.","signatures":null},{"export":"Binary.Buffer","kind":"Function","summary":"Buffers the binary value in memory.","signatures":[{"label":"Binary.Buffer(binary as nullable binary)","parameters":[{"label":"binary","documentation":"nullable binary","signatureLabelOffset":14,"signatureLabelEnd":39}],"documentation":"Buffers the binary value in memory.","SignatureStart":"Binary.Buffer(","SignatureEnd":")"}]},{"export":"Binary.Combine","kind":"Function","summary":"Combines a list of binaries into a single binary.","signatures":[{"label":"Binary.Combine(binaries as list)","parameters":[{"label":"binaries","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":31}],"documentation":"Combines a list of binaries into a single binary.","SignatureStart":"Binary.Combine(","SignatureEnd":")"}]},{"export":"Binary.Compress","kind":"Function","summary":"Compresses a binary value using the given compression type.","signatures":[{"label":"Binary.Compress(binary as nullable binary, compressionType as number)","parameters":[{"label":"binary","documentation":"nullable binary","signatureLabelOffset":16,"signatureLabelEnd":41},{"label":"compressionType","documentation":"number","signatureLabelOffset":43,"signatureLabelEnd":68}],"documentation":"Compresses a binary value using the given compression type.","SignatureStart":"Binary.Compress(","SignatureEnd":")"}]},{"export":"Binary.Decompress","kind":"Function","summary":"Decompresses a binary value using the given compression type.","signatures":[{"label":"Binary.Decompress(binary as nullable binary, compressionType as number)","parameters":[{"label":"binary","documentation":"nullable binary","signatureLabelOffset":18,"signatureLabelEnd":43},{"label":"compressionType","documentation":"number","signatureLabelOffset":45,"signatureLabelEnd":70}],"documentation":"Decompresses a binary value using the given compression type.","SignatureStart":"Binary.Decompress(","SignatureEnd":")"}]},{"export":"Binary.From","kind":"Function","summary":"Creates a binary from the given value","signatures":[{"label":"Binary.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":12,"signatureLabelEnd":24}],"documentation":"Creates a binary from the given value","SignatureStart":"Binary.From(","SignatureEnd":")"},{"label":"Binary.From(value as any, encoding as nullable number)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":12,"signatureLabelEnd":24},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":26,"signatureLabelEnd":53}],"documentation":"Creates a binary from the given value","SignatureStart":"Binary.From(","SignatureEnd":")"}]},{"export":"Binary.FromList","kind":"Function","summary":"Converts a list of numbers into a binary value.","signatures":[{"label":"Binary.FromList(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":16,"signatureLabelEnd":28}],"documentation":"Converts a list of numbers into a binary value.","SignatureStart":"Binary.FromList(","SignatureEnd":")"}]},{"export":"Binary.FromText","kind":"Function","summary":"Decodes data from a text form into binary.","signatures":[{"label":"Binary.FromText(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":16,"signatureLabelEnd":37}],"documentation":"Decodes data from a text form into binary.","SignatureStart":"Binary.FromText(","SignatureEnd":")"},{"label":"Binary.FromText(text as nullable text, encoding as nullable number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":16,"signatureLabelEnd":37},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":39,"signatureLabelEnd":66}],"documentation":"Decodes data from a text form into binary.","SignatureStart":"Binary.FromText(","SignatureEnd":")"}]},{"export":"Binary.InferContentType","kind":"Function","summary":"Reads the binary stream and tries to determine the content type and format information of the stream.","signatures":[{"label":"Binary.InferContentType(source as binary)","parameters":[{"label":"source","documentation":"binary","signatureLabelOffset":24,"signatureLabelEnd":40}],"documentation":"Reads the binary stream and tries to determine the content type and format information of the stream.","SignatureStart":"Binary.InferContentType(","SignatureEnd":")"}]},{"export":"Binary.Length","kind":"Function","summary":"Returns the number of characters.","signatures":[{"label":"Binary.Length(binary as nullable binary)","parameters":[{"label":"binary","documentation":"nullable binary","signatureLabelOffset":14,"signatureLabelEnd":39}],"documentation":"Returns the number of characters.","SignatureStart":"Binary.Length(","SignatureEnd":")"}]},{"export":"Binary.ToList","kind":"Function","summary":"Converts a binary value into a list of numbers.","signatures":[{"label":"Binary.ToList(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":14,"signatureLabelEnd":30}],"documentation":"Converts a binary value into a list of numbers.","SignatureStart":"Binary.ToList(","SignatureEnd":")"}]},{"export":"Binary.ToText","kind":"Function","summary":"Encodes binary data into a text form.","signatures":[{"label":"Binary.ToText(binary as nullable binary)","parameters":[{"label":"binary","documentation":"nullable binary","signatureLabelOffset":14,"signatureLabelEnd":39}],"documentation":"Encodes binary data into a text form.","SignatureStart":"Binary.ToText(","SignatureEnd":")"},{"label":"Binary.ToText(binary as nullable binary, encoding as nullable number)","parameters":[{"label":"binary","documentation":"nullable binary","signatureLabelOffset":14,"signatureLabelEnd":39},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":41,"signatureLabelEnd":68}],"documentation":"Encodes binary data into a text form.","SignatureStart":"Binary.ToText(","SignatureEnd":")"}]},{"export":"Binary.Type","kind":"Type","summary":"The type that represents all binary values.","signatures":null},{"export":"BinaryEncoding.Base64","kind":"Constant","summary":"Constant to use as the encoding type when base-64 encoding is required.","signatures":null},{"export":"BinaryEncoding.Hex","kind":"Constant","summary":"Constant to use as the encoding type when hexadecimal encoding is required.","signatures":null},{"export":"BinaryEncoding.Type","kind":"Type","summary":"Specifies the type of binary encoding.","signatures":null},{"export":"BinaryFormat.7BitEncodedSignedInteger","kind":"Function","summary":"A binary format that reads a 64-bit signed integer that was encoded using a 7-bit variable-length encoding.","signatures":[{"label":"BinaryFormat.7BitEncodedSignedInteger(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":38,"signatureLabelEnd":54}],"documentation":"A binary format that reads a 64-bit signed integer that was encoded using a 7-bit variable-length encoding.","SignatureStart":"BinaryFormat.7BitEncodedSignedInteger(","SignatureEnd":")"}]},{"export":"BinaryFormat.7BitEncodedUnsignedInteger","kind":"Function","summary":"A binary format that reads a 64-bit unsigned integer that was encoded using a 7-bit variable-length encoding.","signatures":[{"label":"BinaryFormat.7BitEncodedUnsignedInteger(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":40,"signatureLabelEnd":56}],"documentation":"A binary format that reads a 64-bit unsigned integer that was encoded using a 7-bit variable-length encoding.","SignatureStart":"BinaryFormat.7BitEncodedUnsignedInteger(","SignatureEnd":")"}]},{"export":"BinaryFormat.Binary","kind":"Function","summary":"Returns a binary format that reads a binary value.","signatures":[{"label":"BinaryFormat.Binary()","parameters":[],"documentation":"Returns a binary format that reads a binary value.","SignatureStart":"BinaryFormat.Binary(","SignatureEnd":")"},{"label":"BinaryFormat.Binary(length as any)","parameters":[{"label":"length","documentation":"any","signatureLabelOffset":20,"signatureLabelEnd":33}],"documentation":"Returns a binary format that reads a binary value.","SignatureStart":"BinaryFormat.Binary(","SignatureEnd":")"}]},{"export":"BinaryFormat.Byte","kind":"Function","summary":"A binary format that reads an 8-bit unsigned integer.","signatures":[{"label":"BinaryFormat.Byte(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":18,"signatureLabelEnd":34}],"documentation":"A binary format that reads an 8-bit unsigned integer.","SignatureStart":"BinaryFormat.Byte(","SignatureEnd":")"}]},{"export":"BinaryFormat.ByteOrder","kind":"Function","summary":"Returns a binary format with the byte order specified by a function.","signatures":[{"label":"BinaryFormat.ByteOrder(binaryFormat as function, byteOrder as number)","parameters":[{"label":"binaryFormat","documentation":"function","signatureLabelOffset":23,"signatureLabelEnd":47},{"label":"byteOrder","documentation":"number","signatureLabelOffset":49,"signatureLabelEnd":68}],"documentation":"Returns a binary format with the byte order specified by a function.","SignatureStart":"BinaryFormat.ByteOrder(","SignatureEnd":")"}]},{"export":"BinaryFormat.Choice","kind":"Function","summary":"Returns a binary format that chooses the next binary format based on a value that has already been read.","signatures":[{"label":"BinaryFormat.Choice(binaryFormat as function, chooseFunction as function)","parameters":[{"label":"binaryFormat","documentation":"function","signatureLabelOffset":20,"signatureLabelEnd":44},{"label":"chooseFunction","documentation":"function","signatureLabelOffset":46,"signatureLabelEnd":72}],"documentation":"Returns a binary format that chooses the next binary format based on a value that has already been read.","SignatureStart":"BinaryFormat.Choice(","SignatureEnd":")"},{"label":"BinaryFormat.Choice(binaryFormat as function, chooseFunction as function, type as nullable type)","parameters":[{"label":"binaryFormat","documentation":"function","signatureLabelOffset":20,"signatureLabelEnd":44},{"label":"chooseFunction","documentation":"function","signatureLabelOffset":46,"signatureLabelEnd":72},{"label":"type","documentation":"nullable type","signatureLabelOffset":74,"signatureLabelEnd":95}],"documentation":"Returns a binary format that chooses the next binary format based on a value that has already been read.","SignatureStart":"BinaryFormat.Choice(","SignatureEnd":")"},{"label":"BinaryFormat.Choice(binaryFormat as function, chooseFunction as function, type as nullable type, combineFunction as nullable function)","parameters":[{"label":"binaryFormat","documentation":"function","signatureLabelOffset":20,"signatureLabelEnd":44},{"label":"chooseFunction","documentation":"function","signatureLabelOffset":46,"signatureLabelEnd":72},{"label":"type","documentation":"nullable type","signatureLabelOffset":74,"signatureLabelEnd":95},{"label":"combineFunction","documentation":"nullable function","signatureLabelOffset":97,"signatureLabelEnd":133}],"documentation":"Returns a binary format that chooses the next binary format based on a value that has already been read.","SignatureStart":"BinaryFormat.Choice(","SignatureEnd":")"}]},{"export":"BinaryFormat.Decimal","kind":"Function","summary":"A binary format that reads a .NET 16-byte decimal value.","signatures":[{"label":"BinaryFormat.Decimal(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":21,"signatureLabelEnd":37}],"documentation":"A binary format that reads a .NET 16-byte decimal value.","SignatureStart":"BinaryFormat.Decimal(","SignatureEnd":")"}]},{"export":"BinaryFormat.Double","kind":"Function","summary":"A binary format that reads an 8-byte IEEE double-precision floating point value.","signatures":[{"label":"BinaryFormat.Double(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":20,"signatureLabelEnd":36}],"documentation":"A binary format that reads an 8-byte IEEE double-precision floating point value.","SignatureStart":"BinaryFormat.Double(","SignatureEnd":")"}]},{"export":"BinaryFormat.Group","kind":"Function","summary":"Returns a binary format that reads a group of items.","signatures":[{"label":"BinaryFormat.Group(binaryFormat as function, group as list)","parameters":[{"label":"binaryFormat","documentation":"function","signatureLabelOffset":19,"signatureLabelEnd":43},{"label":"group","documentation":"list","signatureLabelOffset":45,"signatureLabelEnd":58}],"documentation":"Returns a binary format that reads a group of items.","SignatureStart":"BinaryFormat.Group(","SignatureEnd":")"},{"label":"BinaryFormat.Group(binaryFormat as function, group as list, extra as nullable function)","parameters":[{"label":"binaryFormat","documentation":"function","signatureLabelOffset":19,"signatureLabelEnd":43},{"label":"group","documentation":"list","signatureLabelOffset":45,"signatureLabelEnd":58},{"label":"extra","documentation":"nullable function","signatureLabelOffset":60,"signatureLabelEnd":86}],"documentation":"Returns a binary format that reads a group of items.","SignatureStart":"BinaryFormat.Group(","SignatureEnd":")"},{"label":"BinaryFormat.Group(binaryFormat as function, group as list, extra as nullable function, lastKey as any)","parameters":[{"label":"binaryFormat","documentation":"function","signatureLabelOffset":19,"signatureLabelEnd":43},{"label":"group","documentation":"list","signatureLabelOffset":45,"signatureLabelEnd":58},{"label":"extra","documentation":"nullable function","signatureLabelOffset":60,"signatureLabelEnd":86},{"label":"lastKey","documentation":"any","signatureLabelOffset":88,"signatureLabelEnd":102}],"documentation":"Returns a binary format that reads a group of items.","SignatureStart":"BinaryFormat.Group(","SignatureEnd":")"}]},{"export":"BinaryFormat.Length","kind":"Function","summary":"Returns a binary format that limits the amount of data that can be read.","signatures":[{"label":"BinaryFormat.Length(binaryFormat as function, length as any)","parameters":[{"label":"binaryFormat","documentation":"function","signatureLabelOffset":20,"signatureLabelEnd":44},{"label":"length","documentation":"any","signatureLabelOffset":46,"signatureLabelEnd":59}],"documentation":"Returns a binary format that limits the amount of data that can be read.","SignatureStart":"BinaryFormat.Length(","SignatureEnd":")"}]},{"export":"BinaryFormat.List","kind":"Function","summary":"Returns a binary format that reads a sequence of items and returns a list.","signatures":[{"label":"BinaryFormat.List(binaryFormat as function)","parameters":[{"label":"binaryFormat","documentation":"function","signatureLabelOffset":18,"signatureLabelEnd":42}],"documentation":"Returns a binary format that reads a sequence of items and returns a list.","SignatureStart":"BinaryFormat.List(","SignatureEnd":")"},{"label":"BinaryFormat.List(binaryFormat as function, countOrCondition as any)","parameters":[{"label":"binaryFormat","documentation":"function","signatureLabelOffset":18,"signatureLabelEnd":42},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":44,"signatureLabelEnd":67}],"documentation":"Returns a binary format that reads a sequence of items and returns a list.","SignatureStart":"BinaryFormat.List(","SignatureEnd":")"}]},{"export":"BinaryFormat.Null","kind":"Function","summary":"A binary format that reads zero bytes and returns null.","signatures":[{"label":"BinaryFormat.Null(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":18,"signatureLabelEnd":34}],"documentation":"A binary format that reads zero bytes and returns null.","SignatureStart":"BinaryFormat.Null(","SignatureEnd":")"}]},{"export":"BinaryFormat.Record","kind":"Function","summary":"Returns a binary format that reads a record.","signatures":[{"label":"BinaryFormat.Record(record as record)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":20,"signatureLabelEnd":36}],"documentation":"Returns a binary format that reads a record.","SignatureStart":"BinaryFormat.Record(","SignatureEnd":")"}]},{"export":"BinaryFormat.SignedInteger16","kind":"Function","summary":"A binary format that reads a 16-bit signed integer.","signatures":[{"label":"BinaryFormat.SignedInteger16(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":29,"signatureLabelEnd":45}],"documentation":"A binary format that reads a 16-bit signed integer.","SignatureStart":"BinaryFormat.SignedInteger16(","SignatureEnd":")"}]},{"export":"BinaryFormat.SignedInteger32","kind":"Function","summary":"A binary format that reads a 32-bit signed integer.","signatures":[{"label":"BinaryFormat.SignedInteger32(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":29,"signatureLabelEnd":45}],"documentation":"A binary format that reads a 32-bit signed integer.","SignatureStart":"BinaryFormat.SignedInteger32(","SignatureEnd":")"}]},{"export":"BinaryFormat.SignedInteger64","kind":"Function","summary":"A binary format that reads a 64-bit signed integer.","signatures":[{"label":"BinaryFormat.SignedInteger64(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":29,"signatureLabelEnd":45}],"documentation":"A binary format that reads a 64-bit signed integer.","SignatureStart":"BinaryFormat.SignedInteger64(","SignatureEnd":")"}]},{"export":"BinaryFormat.Single","kind":"Function","summary":"A binary format that reads a 4-byte IEEE single-precision floating point value.","signatures":[{"label":"BinaryFormat.Single(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":20,"signatureLabelEnd":36}],"documentation":"A binary format that reads a 4-byte IEEE single-precision floating point value.","SignatureStart":"BinaryFormat.Single(","SignatureEnd":")"}]},{"export":"BinaryFormat.Text","kind":"Function","summary":"Returns a binary format that reads a text value.","signatures":[{"label":"BinaryFormat.Text(length as any)","parameters":[{"label":"length","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":31}],"documentation":"Returns a binary format that reads a text value.","SignatureStart":"BinaryFormat.Text(","SignatureEnd":")"},{"label":"BinaryFormat.Text(length as any, encoding as nullable number)","parameters":[{"label":"length","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":31},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":33,"signatureLabelEnd":60}],"documentation":"Returns a binary format that reads a text value.","SignatureStart":"BinaryFormat.Text(","SignatureEnd":")"}]},{"export":"BinaryFormat.Transform","kind":"Function","summary":"Returns a binary format that will transform the values read by another binary format.","signatures":[{"label":"BinaryFormat.Transform(binaryFormat as function, function as function)","parameters":[{"label":"binaryFormat","documentation":"function","signatureLabelOffset":23,"signatureLabelEnd":47},{"label":"function","documentation":"function","signatureLabelOffset":49,"signatureLabelEnd":69}],"documentation":"Returns a binary format that will transform the values read by another binary format.","SignatureStart":"BinaryFormat.Transform(","SignatureEnd":")"}]},{"export":"BinaryFormat.UnsignedInteger16","kind":"Function","summary":"A binary format that reads a 16-bit unsigned integer.","signatures":[{"label":"BinaryFormat.UnsignedInteger16(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":31,"signatureLabelEnd":47}],"documentation":"A binary format that reads a 16-bit unsigned integer.","SignatureStart":"BinaryFormat.UnsignedInteger16(","SignatureEnd":")"}]},{"export":"BinaryFormat.UnsignedInteger32","kind":"Function","summary":"A binary format that reads a 32-bit unsigned integer.","signatures":[{"label":"BinaryFormat.UnsignedInteger32(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":31,"signatureLabelEnd":47}],"documentation":"A binary format that reads a 32-bit unsigned integer.","SignatureStart":"BinaryFormat.UnsignedInteger32(","SignatureEnd":")"}]},{"export":"BinaryFormat.UnsignedInteger64","kind":"Function","summary":"A binary format that reads a 64-bit unsigned integer.","signatures":[{"label":"BinaryFormat.UnsignedInteger64(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":31,"signatureLabelEnd":47}],"documentation":"A binary format that reads a 64-bit unsigned integer.","SignatureStart":"BinaryFormat.UnsignedInteger64(","SignatureEnd":")"}]},{"export":"BinaryOccurrence.Optional","kind":"Constant","summary":"The item is expected to appear zero or one time in the input.","signatures":null},{"export":"BinaryOccurrence.Repeating","kind":"Constant","summary":"The item is expected to appear zero or more times in the input.","signatures":null},{"export":"BinaryOccurrence.Required","kind":"Constant","summary":"The item is expected to appear once in the input.","signatures":null},{"export":"BinaryOccurrence.Type","kind":"Type","summary":"Specifies how many times the item is expected to appear in the group.","signatures":null},{"export":"Byte.From","kind":"Function","summary":"Creates a 8-bit integer from the given value.","signatures":[{"label":"Byte.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":22}],"documentation":"Creates a 8-bit integer from the given value.","SignatureStart":"Byte.From(","SignatureEnd":")"},{"label":"Byte.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"culture","documentation":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48}],"documentation":"Creates a 8-bit integer from the given value.","SignatureStart":"Byte.From(","SignatureEnd":")"},{"label":"Byte.From(value as any, culture as nullable text, roundingMode as nullable number)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"culture","documentation":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48},{"label":"roundingMode","documentation":"nullable number","signatureLabelOffset":50,"signatureLabelEnd":81}],"documentation":"Creates a 8-bit integer from the given value.","SignatureStart":"Byte.From(","SignatureEnd":")"}]},{"export":"Byte.Type","kind":"Type","summary":"The type that represents all bytes.","signatures":null},{"export":"ByteOrder.BigEndian","kind":"Constant","summary":"A possible value for the <code>byteOrder</code> parameter in <code>BinaryFormat.ByteOrder</code>.  The most signficant byte appears first in Big Endian byte order.","signatures":null},{"export":"ByteOrder.LittleEndian","kind":"Constant","summary":"A possible value for the <code>byteOrder</code> parameter in <code>BinaryFormat.ByteOrder</code>.  The least signficant byte appears first in Little Endian byte order.","signatures":null},{"export":"ByteOrder.Type","kind":"Type","summary":"Specifies the byte order.","signatures":null},{"export":"Character.FromNumber","kind":"Function","summary":"Converts the number to its character value.","signatures":[{"label":"Character.FromNumber(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":21,"signatureLabelEnd":46}],"documentation":"Converts the number to its character value.","SignatureStart":"Character.FromNumber(","SignatureEnd":")"}]},{"export":"Character.ToNumber","kind":"Function","summary":"Converts a character to its number value.","signatures":[{"label":"Character.ToNumber(character as nullable text)","parameters":[{"label":"character","documentation":"nullable text","signatureLabelOffset":19,"signatureLabelEnd":45}],"documentation":"Converts a character to its number value.","SignatureStart":"Character.ToNumber(","SignatureEnd":")"}]},{"export":"Character.Type","kind":"Type","summary":"The type that represents all characters.","signatures":null},{"export":"Combiner.CombineTextByDelimiter","kind":"Function","summary":"Returns a function that combines a list of text into a single text using the specified delimiter.","signatures":[{"label":"Combiner.CombineTextByDelimiter(delimiter as text)","parameters":[{"label":"delimiter","documentation":"text","signatureLabelOffset":32,"signatureLabelEnd":49}],"documentation":"Returns a function that combines a list of text into a single text using the specified delimiter.","SignatureStart":"Combiner.CombineTextByDelimiter(","SignatureEnd":")"},{"label":"Combiner.CombineTextByDelimiter(delimiter as text, quoteStyle as nullable number)","parameters":[{"label":"delimiter","documentation":"text","signatureLabelOffset":32,"signatureLabelEnd":49},{"label":"quoteStyle","documentation":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":80}],"documentation":"Returns a function that combines a list of text into a single text using the specified delimiter.","SignatureStart":"Combiner.CombineTextByDelimiter(","SignatureEnd":")"}]},{"export":"Combiner.CombineTextByEachDelimiter","kind":"Function","summary":"Returns a function that combines a list of text into a single text using each specified delimiter in sequence.","signatures":[{"label":"Combiner.CombineTextByEachDelimiter(delimiters as list)","parameters":[{"label":"delimiters","documentation":"list","signatureLabelOffset":36,"signatureLabelEnd":54}],"documentation":"Returns a function that combines a list of text into a single text using each specified delimiter in sequence.","SignatureStart":"Combiner.CombineTextByEachDelimiter(","SignatureEnd":")"},{"label":"Combiner.CombineTextByEachDelimiter(delimiters as list, quoteStyle as nullable number)","parameters":[{"label":"delimiters","documentation":"list","signatureLabelOffset":36,"signatureLabelEnd":54},{"label":"quoteStyle","documentation":"nullable number","signatureLabelOffset":56,"signatureLabelEnd":85}],"documentation":"Returns a function that combines a list of text into a single text using each specified delimiter in sequence.","SignatureStart":"Combiner.CombineTextByEachDelimiter(","SignatureEnd":")"}]},{"export":"Combiner.CombineTextByLengths","kind":"Function","summary":"Returns a function that combines a list of text into a single text using the specified lengths.","signatures":[{"label":"Combiner.CombineTextByLengths(lengths as list)","parameters":[{"label":"lengths","documentation":"list","signatureLabelOffset":30,"signatureLabelEnd":45}],"documentation":"Returns a function that combines a list of text into a single text using the specified lengths.","SignatureStart":"Combiner.CombineTextByLengths(","SignatureEnd":")"},{"label":"Combiner.CombineTextByLengths(lengths as list, template as nullable text)","parameters":[{"label":"lengths","documentation":"list","signatureLabelOffset":30,"signatureLabelEnd":45},{"label":"template","documentation":"nullable text","signatureLabelOffset":47,"signatureLabelEnd":72}],"documentation":"Returns a function that combines a list of text into a single text using the specified lengths.","SignatureStart":"Combiner.CombineTextByLengths(","SignatureEnd":")"}]},{"export":"Combiner.CombineTextByPositions","kind":"Function","summary":"Returns a function that combines a list of text into a single text using the specified positions.","signatures":[{"label":"Combiner.CombineTextByPositions(positions as list)","parameters":[{"label":"positions","documentation":"list","signatureLabelOffset":32,"signatureLabelEnd":49}],"documentation":"Returns a function that combines a list of text into a single text using the specified positions.","SignatureStart":"Combiner.CombineTextByPositions(","SignatureEnd":")"},{"label":"Combiner.CombineTextByPositions(positions as list, template as nullable text)","parameters":[{"label":"positions","documentation":"list","signatureLabelOffset":32,"signatureLabelEnd":49},{"label":"template","documentation":"nullable text","signatureLabelOffset":51,"signatureLabelEnd":76}],"documentation":"Returns a function that combines a list of text into a single text using the specified positions.","SignatureStart":"Combiner.CombineTextByPositions(","SignatureEnd":")"}]},{"export":"Combiner.CombineTextByRanges","kind":"Function","summary":"Returns a function that combines a list of text into a single text using the specified positions and lengths.","signatures":[{"label":"Combiner.CombineTextByRanges(ranges as list)","parameters":[{"label":"ranges","documentation":"list","signatureLabelOffset":29,"signatureLabelEnd":43}],"documentation":"Returns a function that combines a list of text into a single text using the specified positions and lengths.","SignatureStart":"Combiner.CombineTextByRanges(","SignatureEnd":")"},{"label":"Combiner.CombineTextByRanges(ranges as list, template as nullable text)","parameters":[{"label":"ranges","documentation":"list","signatureLabelOffset":29,"signatureLabelEnd":43},{"label":"template","documentation":"nullable text","signatureLabelOffset":45,"signatureLabelEnd":70}],"documentation":"Returns a function that combines a list of text into a single text using the specified positions and lengths.","SignatureStart":"Combiner.CombineTextByRanges(","SignatureEnd":")"}]},{"export":"Comparer.Equals","kind":"Function","summary":"Returns a logical value based on the equality check over the two given values.","signatures":[{"label":"Comparer.Equals(comparer as function, x as any, y as any)","parameters":[{"label":"comparer","documentation":"function","signatureLabelOffset":16,"signatureLabelEnd":36},{"label":"x","documentation":"any","signatureLabelOffset":38,"signatureLabelEnd":46},{"label":"y","documentation":"any","signatureLabelOffset":48,"signatureLabelEnd":56}],"documentation":"Returns a logical value based on the equality check over the two given values.","SignatureStart":"Comparer.Equals(","SignatureEnd":")"}]},{"export":"Comparer.FromCulture","kind":"Function","summary":"Returns a comparer function given the culture and a logical value for case sensitivity for the comparison.","signatures":[{"label":"Comparer.FromCulture(culture as text)","parameters":[{"label":"culture","documentation":"text","signatureLabelOffset":21,"signatureLabelEnd":36}],"documentation":"Returns a comparer function given the culture and a logical value for case sensitivity for the comparison.","SignatureStart":"Comparer.FromCulture(","SignatureEnd":")"},{"label":"Comparer.FromCulture(culture as text, ignoreCase as nullable logical)","parameters":[{"label":"culture","documentation":"text","signatureLabelOffset":21,"signatureLabelEnd":36},{"label":"ignoreCase","documentation":"nullable logical","signatureLabelOffset":38,"signatureLabelEnd":68}],"documentation":"Returns a comparer function given the culture and a logical value for case sensitivity for the comparison.","SignatureStart":"Comparer.FromCulture(","SignatureEnd":")"}]},{"export":"Comparer.Ordinal","kind":"Function","summary":"Returns a comparer function which uses Ordinal rules to compare values.","signatures":[{"label":"Comparer.Ordinal(x as any, y as any)","parameters":[{"label":"x","documentation":"any","signatureLabelOffset":17,"signatureLabelEnd":25},{"label":"y","documentation":"any","signatureLabelOffset":27,"signatureLabelEnd":35}],"documentation":"Returns a comparer function which uses Ordinal rules to compare values.","SignatureStart":"Comparer.Ordinal(","SignatureEnd":")"}]},{"export":"Comparer.OrdinalIgnoreCase","kind":"Function","summary":"Returns a case-insensitive comparer function which uses Ordinal rules to compare values.","signatures":[{"label":"Comparer.OrdinalIgnoreCase(x as any, y as any)","parameters":[{"label":"x","documentation":"any","signatureLabelOffset":27,"signatureLabelEnd":35},{"label":"y","documentation":"any","signatureLabelOffset":37,"signatureLabelEnd":45}],"documentation":"Returns a case-insensitive comparer function which uses Ordinal rules to compare values.","SignatureStart":"Comparer.OrdinalIgnoreCase(","SignatureEnd":")"}]},{"export":"Compression.Deflate","kind":"Constant","summary":"The compressed data is in the 'Deflate' format.","signatures":null},{"export":"Compression.GZip","kind":"Constant","summary":"The compressed data is in the 'GZip' format.","signatures":null},{"export":"Compression.Type","kind":"Type","summary":"Specifies the type of compression.","signatures":null},{"export":"Csv.Document","kind":"Function","summary":"Returns the contents of the CSV document as a table.","signatures":[{"label":"Csv.Document(source as any)","parameters":[{"label":"source","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":26}],"documentation":"Returns the contents of the CSV document as a table.","SignatureStart":"Csv.Document(","SignatureEnd":")"},{"label":"Csv.Document(source as any, columns as any)","parameters":[{"label":"source","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"label":"columns","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":42}],"documentation":"Returns the contents of the CSV document as a table.","SignatureStart":"Csv.Document(","SignatureEnd":")"},{"label":"Csv.Document(source as any, columns as any, delimiter as any)","parameters":[{"label":"source","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"label":"columns","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":42},{"label":"delimiter","documentation":"any","signatureLabelOffset":44,"signatureLabelEnd":60}],"documentation":"Returns the contents of the CSV document as a table.","SignatureStart":"Csv.Document(","SignatureEnd":")"},{"label":"Csv.Document(source as any, columns as any, delimiter as any, extraValues as nullable number)","parameters":[{"label":"source","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"label":"columns","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":42},{"label":"delimiter","documentation":"any","signatureLabelOffset":44,"signatureLabelEnd":60},{"label":"extraValues","documentation":"nullable number","signatureLabelOffset":62,"signatureLabelEnd":92}],"documentation":"Returns the contents of the CSV document as a table.","SignatureStart":"Csv.Document(","SignatureEnd":")"},{"label":"Csv.Document(source as any, columns as any, delimiter as any, extraValues as nullable number, encoding as nullable number)","parameters":[{"label":"source","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"label":"columns","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":42},{"label":"delimiter","documentation":"any","signatureLabelOffset":44,"signatureLabelEnd":60},{"label":"extraValues","documentation":"nullable number","signatureLabelOffset":62,"signatureLabelEnd":92},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":94,"signatureLabelEnd":121}],"documentation":"Returns the contents of the CSV document as a table.","SignatureStart":"Csv.Document(","SignatureEnd":")"}]},{"export":"CsvStyle.QuoteAfterDelimiter","kind":"Constant","summary":"Quotes in a field are only significant immediately following the delimiter.","signatures":null},{"export":"CsvStyle.QuoteAlways","kind":"Constant","summary":"Quotes in a field are always significant regardless of where they appear.","signatures":null},{"export":"CsvStyle.Type","kind":"Type","summary":"Specifies the significance of quotes in Csv documents.","signatures":null},{"export":"Cube.AddAndExpandDimensionColumn","kind":"Function","summary":"Merges the specified dimension table into the cube’s filter context and changes the dimensional granularity of the filter context by expanding the specified set of dimension attributes.","signatures":[{"label":"Cube.AddAndExpandDimensionColumn(cube as table, dimensionSelector as any, attributeNames as list)","parameters":[{"label":"cube","documentation":"table","signatureLabelOffset":33,"signatureLabelEnd":46},{"label":"dimensionSelector","documentation":"any","signatureLabelOffset":48,"signatureLabelEnd":72},{"label":"attributeNames","documentation":"list","signatureLabelOffset":74,"signatureLabelEnd":96}],"documentation":"Merges the specified dimension table into the cube’s filter context and changes the dimensional granularity of the filter context by expanding the specified set of dimension attributes.","SignatureStart":"Cube.AddAndExpandDimensionColumn(","SignatureEnd":")"},{"label":"Cube.AddAndExpandDimensionColumn(cube as table, dimensionSelector as any, attributeNames as list, newColumnNames as any)","parameters":[{"label":"cube","documentation":"table","signatureLabelOffset":33,"signatureLabelEnd":46},{"label":"dimensionSelector","documentation":"any","signatureLabelOffset":48,"signatureLabelEnd":72},{"label":"attributeNames","documentation":"list","signatureLabelOffset":74,"signatureLabelEnd":96},{"label":"newColumnNames","documentation":"any","signatureLabelOffset":98,"signatureLabelEnd":119}],"documentation":"Merges the specified dimension table into the cube’s filter context and changes the dimensional granularity of the filter context by expanding the specified set of dimension attributes.","SignatureStart":"Cube.AddAndExpandDimensionColumn(","SignatureEnd":")"}]},{"export":"Cube.AddMeasureColumn","kind":"Function","summary":"Adds a column to the cube that contains the results of the measure applied in the row context of each row.","signatures":[{"label":"Cube.AddMeasureColumn(cube as table, column as text, measureSelector as any)","parameters":[{"label":"cube","documentation":"table","signatureLabelOffset":22,"signatureLabelEnd":35},{"label":"column","documentation":"text","signatureLabelOffset":37,"signatureLabelEnd":51},{"label":"measureSelector","documentation":"any","signatureLabelOffset":53,"signatureLabelEnd":75}],"documentation":"Adds a column to the cube that contains the results of the measure applied in the row context of each row.","SignatureStart":"Cube.AddMeasureColumn(","SignatureEnd":")"}]},{"export":"Cube.ApplyParameter","kind":"Function","summary":"Returns a cube after applying a parameter to it.","signatures":[{"label":"Cube.ApplyParameter(cube as table, parameter as any)","parameters":[{"label":"cube","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":33},{"label":"parameter","documentation":"any","signatureLabelOffset":35,"signatureLabelEnd":51}],"documentation":"Returns a cube after applying a parameter to it.","SignatureStart":"Cube.ApplyParameter(","SignatureEnd":")"},{"label":"Cube.ApplyParameter(cube as table, parameter as any, arguments as nullable list)","parameters":[{"label":"cube","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":33},{"label":"parameter","documentation":"any","signatureLabelOffset":35,"signatureLabelEnd":51},{"label":"arguments","documentation":"nullable list","signatureLabelOffset":53,"signatureLabelEnd":79}],"documentation":"Returns a cube after applying a parameter to it.","SignatureStart":"Cube.ApplyParameter(","SignatureEnd":")"}]},{"export":"Cube.AttributeMemberId","kind":"Function","summary":"Returns the unique member identifier from members property value.","signatures":[{"label":"Cube.AttributeMemberId(attribute as any)","parameters":[{"label":"attribute","documentation":"any","signatureLabelOffset":23,"signatureLabelEnd":39}],"documentation":"Returns the unique member identifier from members property value.","SignatureStart":"Cube.AttributeMemberId(","SignatureEnd":")"}]},{"export":"Cube.AttributeMemberProperty","kind":"Function","summary":"Returns a property of a dimension attribute.","signatures":[{"label":"Cube.AttributeMemberProperty(attribute as any, propertyName as text)","parameters":[{"label":"attribute","documentation":"any","signatureLabelOffset":29,"signatureLabelEnd":45},{"label":"propertyName","documentation":"text","signatureLabelOffset":47,"signatureLabelEnd":67}],"documentation":"Returns a property of a dimension attribute.","SignatureStart":"Cube.AttributeMemberProperty(","SignatureEnd":")"}]},{"export":"Cube.CollapseAndRemoveColumns","kind":"Function","summary":"Changes the dimensional granularity of the filter context for the cube by collapsing the attributes mapped to the specified columns.","signatures":[{"label":"Cube.CollapseAndRemoveColumns(cube as table, columnNames as list)","parameters":[{"label":"cube","documentation":"table","signatureLabelOffset":30,"signatureLabelEnd":43},{"label":"columnNames","documentation":"list","signatureLabelOffset":45,"signatureLabelEnd":64}],"documentation":"Changes the dimensional granularity of the filter context for the cube by collapsing the attributes mapped to the specified columns.","SignatureStart":"Cube.CollapseAndRemoveColumns(","SignatureEnd":")"}]},{"export":"Cube.Dimensions","kind":"Function","summary":"Returns a table containing the set of available dimensions.","signatures":[{"label":"Cube.Dimensions(cube as table)","parameters":[{"label":"cube","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":29}],"documentation":"Returns a table containing the set of available dimensions.","SignatureStart":"Cube.Dimensions(","SignatureEnd":")"}]},{"export":"Cube.DisplayFolders","kind":"Function","summary":"Returns a nested tree of tables representing the display folder hierarchy of the objects (e.g. dimensions and measures).","signatures":[{"label":"Cube.DisplayFolders(cube as table)","parameters":[{"label":"cube","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":33}],"documentation":"Returns a nested tree of tables representing the display folder hierarchy of the objects (e.g. dimensions and measures).","SignatureStart":"Cube.DisplayFolders(","SignatureEnd":")"}]},{"export":"Cube.MeasureProperties","kind":"Function","summary":"Returns a table containing the set of available measure properties that are expanded in the cube.","signatures":[{"label":"Cube.MeasureProperties(cube as table)","parameters":[{"label":"cube","documentation":"table","signatureLabelOffset":23,"signatureLabelEnd":36}],"documentation":"Returns a table containing the set of available measure properties that are expanded in the cube.","SignatureStart":"Cube.MeasureProperties(","SignatureEnd":")"}]},{"export":"Cube.MeasureProperty","kind":"Function","summary":"Returns a property of a measure (cell property).","signatures":[{"label":"Cube.MeasureProperty(measure as any, propertyName as text)","parameters":[{"label":"measure","documentation":"any","signatureLabelOffset":21,"signatureLabelEnd":35},{"label":"propertyName","documentation":"text","signatureLabelOffset":37,"signatureLabelEnd":57}],"documentation":"Returns a property of a measure (cell property).","SignatureStart":"Cube.MeasureProperty(","SignatureEnd":")"}]},{"export":"Cube.Measures","kind":"Function","summary":"Returns a table containing the set of available measures.","signatures":[{"label":"Cube.Measures(cube as any)","parameters":[{"label":"cube","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":25}],"documentation":"Returns a table containing the set of available measures.","SignatureStart":"Cube.Measures(","SignatureEnd":")"}]},{"export":"Cube.Parameters","kind":"Function","summary":"Returns a table containing the set of parameters that can be applied to the cube.","signatures":[{"label":"Cube.Parameters(cube as table)","parameters":[{"label":"cube","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":29}],"documentation":"Returns a table containing the set of parameters that can be applied to the cube.","SignatureStart":"Cube.Parameters(","SignatureEnd":")"}]},{"export":"Cube.Properties","kind":"Function","summary":"Returns a table containing the set of available properties for dimensions that are expanded in the cube.","signatures":[{"label":"Cube.Properties(cube as table)","parameters":[{"label":"cube","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":29}],"documentation":"Returns a table containing the set of available properties for dimensions that are expanded in the cube.","SignatureStart":"Cube.Properties(","SignatureEnd":")"}]},{"export":"Cube.PropertyKey","kind":"Function","summary":"Returns the key of a property.","signatures":[{"label":"Cube.PropertyKey(property as any)","parameters":[{"label":"property","documentation":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"documentation":"Returns the key of a property.","SignatureStart":"Cube.PropertyKey(","SignatureEnd":")"}]},{"export":"Cube.ReplaceDimensions","kind":"Function","summary":"Cube.ReplaceDimensions","signatures":[{"label":"Cube.ReplaceDimensions(cube as table, dimensions as table)","parameters":[{"label":"cube","documentation":"table","signatureLabelOffset":23,"signatureLabelEnd":36},{"label":"dimensions","documentation":"table","signatureLabelOffset":38,"signatureLabelEnd":57}],"documentation":"Cube.ReplaceDimensions","SignatureStart":"Cube.ReplaceDimensions(","SignatureEnd":")"}]},{"export":"Cube.Transform","kind":"Function","summary":"Applies a list of cube functions.","signatures":[{"label":"Cube.Transform(cube as table, transforms as list)","parameters":[{"label":"cube","documentation":"table","signatureLabelOffset":15,"signatureLabelEnd":28},{"label":"transforms","documentation":"list","signatureLabelOffset":30,"signatureLabelEnd":48}],"documentation":"Applies a list of cube functions.","SignatureStart":"Cube.Transform(","SignatureEnd":")"}]},{"export":"Culture.Current","kind":"Constant","summary":"Returns the name of the current culture for the application.","signatures":null},{"export":"Currency.From","kind":"Function","summary":"Returns a currency value from the given value.","signatures":[{"label":"Currency.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":26}],"documentation":"Returns a currency value from the given value.","SignatureStart":"Currency.From(","SignatureEnd":")"},{"label":"Currency.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":26},{"label":"culture","documentation":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":52}],"documentation":"Returns a currency value from the given value.","SignatureStart":"Currency.From(","SignatureEnd":")"},{"label":"Currency.From(value as any, culture as nullable text, roundingMode as nullable number)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":26},{"label":"culture","documentation":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":52},{"label":"roundingMode","documentation":"nullable number","signatureLabelOffset":54,"signatureLabelEnd":85}],"documentation":"Returns a currency value from the given value.","SignatureStart":"Currency.From(","SignatureEnd":")"}]},{"export":"Currency.Type","kind":"Type","summary":"The type that represents currency value.","signatures":null},{"export":"Date.AddDays","kind":"Function","summary":"Adds the specified days to the date.","signatures":[{"label":"Date.AddDays(dateTime as any, numberOfDays as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":28},{"label":"numberOfDays","documentation":"number","signatureLabelOffset":30,"signatureLabelEnd":52}],"documentation":"Adds the specified days to the date.","SignatureStart":"Date.AddDays(","SignatureEnd":")"}]},{"export":"Date.AddMonths","kind":"Function","summary":"Adds the specified months to the date.","signatures":[{"label":"Date.AddMonths(dateTime as any, numberOfMonths as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":30},{"label":"numberOfMonths","documentation":"number","signatureLabelOffset":32,"signatureLabelEnd":56}],"documentation":"Adds the specified months to the date.","SignatureStart":"Date.AddMonths(","SignatureEnd":")"}]},{"export":"Date.AddQuarters","kind":"Function","summary":"Adds the specified quarters to the date.","signatures":[{"label":"Date.AddQuarters(dateTime as any, numberOfQuarters as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":17,"signatureLabelEnd":32},{"label":"numberOfQuarters","documentation":"number","signatureLabelOffset":34,"signatureLabelEnd":60}],"documentation":"Adds the specified quarters to the date.","SignatureStart":"Date.AddQuarters(","SignatureEnd":")"}]},{"export":"Date.AddWeeks","kind":"Function","summary":"Adds the specified weeks to the date.","signatures":[{"label":"Date.AddWeeks(dateTime as any, numberOfWeeks as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":29},{"label":"numberOfWeeks","documentation":"number","signatureLabelOffset":31,"signatureLabelEnd":54}],"documentation":"Adds the specified weeks to the date.","SignatureStart":"Date.AddWeeks(","SignatureEnd":")"}]},{"export":"Date.AddYears","kind":"Function","summary":"Adds the specified years to the date.","signatures":[{"label":"Date.AddYears(dateTime as any, numberOfYears as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":29},{"label":"numberOfYears","documentation":"number","signatureLabelOffset":31,"signatureLabelEnd":54}],"documentation":"Adds the specified years to the date.","SignatureStart":"Date.AddYears(","SignatureEnd":")"}]},{"export":"Date.Day","kind":"Function","summary":"Returns the day component.","signatures":[{"label":"Date.Day(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":9,"signatureLabelEnd":24}],"documentation":"Returns the day component.","SignatureStart":"Date.Day(","SignatureEnd":")"}]},{"export":"Date.DayOfWeek","kind":"Function","summary":"Returns a number (from 0 to 6) indicating the day of the week occupied by the provided value.","signatures":[{"label":"Date.DayOfWeek(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":30}],"documentation":"Returns a number (from 0 to 6) indicating the day of the week occupied by the provided value.","SignatureStart":"Date.DayOfWeek(","SignatureEnd":")"},{"label":"Date.DayOfWeek(dateTime as any, firstDayOfWeek as nullable number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":30},{"label":"firstDayOfWeek","documentation":"nullable number","signatureLabelOffset":32,"signatureLabelEnd":65}],"documentation":"Returns a number (from 0 to 6) indicating the day of the week occupied by the provided value.","SignatureStart":"Date.DayOfWeek(","SignatureEnd":")"}]},{"export":"Date.DayOfWeekName","kind":"Function","summary":"Returns the day of the week name.","signatures":[{"label":"Date.DayOfWeekName(date as any)","parameters":[{"label":"date","documentation":"any","signatureLabelOffset":19,"signatureLabelEnd":30}],"documentation":"Returns the day of the week name.","SignatureStart":"Date.DayOfWeekName(","SignatureEnd":")"},{"label":"Date.DayOfWeekName(date as any, culture as nullable text)","parameters":[{"label":"date","documentation":"any","signatureLabelOffset":19,"signatureLabelEnd":30},{"label":"culture","documentation":"nullable text","signatureLabelOffset":32,"signatureLabelEnd":56}],"documentation":"Returns the day of the week name.","SignatureStart":"Date.DayOfWeekName(","SignatureEnd":")"}]},{"export":"Date.DayOfYear","kind":"Function","summary":"Returns a number from 1 to 366 representing the day of the year.","signatures":[{"label":"Date.DayOfYear(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":30}],"documentation":"Returns a number from 1 to 366 representing the day of the year.","SignatureStart":"Date.DayOfYear(","SignatureEnd":")"}]},{"export":"Date.DaysInMonth","kind":"Function","summary":"Returns a number from 28 to 31 indicating the number of days in the month.","signatures":[{"label":"Date.DaysInMonth(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"documentation":"Returns a number from 28 to 31 indicating the number of days in the month.","SignatureStart":"Date.DaysInMonth(","SignatureEnd":")"}]},{"export":"Date.EndOfDay","kind":"Function","summary":"Returns the last value of the day.","signatures":[{"label":"Date.EndOfDay(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":29}],"documentation":"Returns the last value of the day.","SignatureStart":"Date.EndOfDay(","SignatureEnd":")"}]},{"export":"Date.EndOfMonth","kind":"Function","summary":"Returns the last day of the month.","signatures":[{"label":"Date.EndOfMonth(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":16,"signatureLabelEnd":31}],"documentation":"Returns the last day of the month.","SignatureStart":"Date.EndOfMonth(","SignatureEnd":")"}]},{"export":"Date.EndOfQuarter","kind":"Function","summary":"Returns the last value of the quarter.","signatures":[{"label":"Date.EndOfQuarter(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":33}],"documentation":"Returns the last value of the quarter.","SignatureStart":"Date.EndOfQuarter(","SignatureEnd":")"}]},{"export":"Date.EndOfWeek","kind":"Function","summary":"Returns the last day of the week.","signatures":[{"label":"Date.EndOfWeek(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":30}],"documentation":"Returns the last day of the week.","SignatureStart":"Date.EndOfWeek(","SignatureEnd":")"},{"label":"Date.EndOfWeek(dateTime as any, firstDayOfWeek as nullable number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":30},{"label":"firstDayOfWeek","documentation":"nullable number","signatureLabelOffset":32,"signatureLabelEnd":65}],"documentation":"Returns the last day of the week.","SignatureStart":"Date.EndOfWeek(","SignatureEnd":")"}]},{"export":"Date.EndOfYear","kind":"Function","summary":"Returns the last datetime value of the year.","signatures":[{"label":"Date.EndOfYear(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":30}],"documentation":"Returns the last datetime value of the year.","SignatureStart":"Date.EndOfYear(","SignatureEnd":")"}]},{"export":"Date.From","kind":"Function","summary":"Creates a date from the given value.","signatures":[{"label":"Date.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":22}],"documentation":"Creates a date from the given value.","SignatureStart":"Date.From(","SignatureEnd":")"},{"label":"Date.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"culture","documentation":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48}],"documentation":"Creates a date from the given value.","SignatureStart":"Date.From(","SignatureEnd":")"}]},{"export":"Date.FromText","kind":"Function","summary":"Creates a Date from local and universal Date formats.","signatures":[{"label":"Date.FromText(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35}],"documentation":"Creates a Date from local and universal Date formats.","SignatureStart":"Date.FromText(","SignatureEnd":")"},{"label":"Date.FromText(text as nullable text, culture as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"label":"culture","documentation":"nullable text","signatureLabelOffset":37,"signatureLabelEnd":61}],"documentation":"Creates a Date from local and universal Date formats.","SignatureStart":"Date.FromText(","SignatureEnd":")"}]},{"export":"Date.IsInCurrentDay","kind":"Function","summary":"Indicates whether this date occurs during the current day, as determined by the current date and time on the system.","signatures":[{"label":"Date.IsInCurrentDay(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":20,"signatureLabelEnd":35}],"documentation":"Indicates whether this date occurs during the current day, as determined by the current date and time on the system.","SignatureStart":"Date.IsInCurrentDay(","SignatureEnd":")"}]},{"export":"Date.IsInCurrentMonth","kind":"Function","summary":"Indicates whether this date occurs during the current month, as determined by the current date and time on the system.","signatures":[{"label":"Date.IsInCurrentMonth(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":22,"signatureLabelEnd":37}],"documentation":"Indicates whether this date occurs during the current month, as determined by the current date and time on the system.","SignatureStart":"Date.IsInCurrentMonth(","SignatureEnd":")"}]},{"export":"Date.IsInCurrentQuarter","kind":"Function","summary":"Indicates whether this date occurs during the current quarter, as determined by the current date and time on the system.","signatures":[{"label":"Date.IsInCurrentQuarter(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":39}],"documentation":"Indicates whether this date occurs during the current quarter, as determined by the current date and time on the system.","SignatureStart":"Date.IsInCurrentQuarter(","SignatureEnd":")"}]},{"export":"Date.IsInCurrentWeek","kind":"Function","summary":"Indicates whether this date occurs during the current week, as determined by the current date and time on the system.","signatures":[{"label":"Date.IsInCurrentWeek(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":21,"signatureLabelEnd":36}],"documentation":"Indicates whether this date occurs during the current week, as determined by the current date and time on the system.","SignatureStart":"Date.IsInCurrentWeek(","SignatureEnd":")"}]},{"export":"Date.IsInCurrentYear","kind":"Function","summary":"Indicates whether this date occurs during the current year, as determined by the current date and time on the system.","signatures":[{"label":"Date.IsInCurrentYear(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":21,"signatureLabelEnd":36}],"documentation":"Indicates whether this date occurs during the current year, as determined by the current date and time on the system.","SignatureStart":"Date.IsInCurrentYear(","SignatureEnd":")"}]},{"export":"Date.IsInNextDay","kind":"Function","summary":"Indicates whether this date occurs during the next day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.","signatures":[{"label":"Date.IsInNextDay(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"documentation":"Indicates whether this date occurs during the next day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.","SignatureStart":"Date.IsInNextDay(","SignatureEnd":")"}]},{"export":"Date.IsInNextMonth","kind":"Function","summary":"Indicates whether this date occurs during the next month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.","signatures":[{"label":"Date.IsInNextMonth(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":19,"signatureLabelEnd":34}],"documentation":"Indicates whether this date occurs during the next month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.","SignatureStart":"Date.IsInNextMonth(","SignatureEnd":")"}]},{"export":"Date.IsInNextNDays","kind":"Function","summary":"Indicates whether this date occurs during the next number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.","signatures":[{"label":"Date.IsInNextNDays(dateTime as any, days as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":19,"signatureLabelEnd":34},{"label":"days","documentation":"number","signatureLabelOffset":36,"signatureLabelEnd":50}],"documentation":"Indicates whether this date occurs during the next number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.","SignatureStart":"Date.IsInNextNDays(","SignatureEnd":")"}]},{"export":"Date.IsInNextNMonths","kind":"Function","summary":"Indicates whether this date occurs during the next number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.","signatures":[{"label":"Date.IsInNextNMonths(dateTime as any, months as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":21,"signatureLabelEnd":36},{"label":"months","documentation":"number","signatureLabelOffset":38,"signatureLabelEnd":54}],"documentation":"Indicates whether this date occurs during the next number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.","SignatureStart":"Date.IsInNextNMonths(","SignatureEnd":")"}]},{"export":"Date.IsInNextNQuarters","kind":"Function","summary":"Indicates whether this date occurs during the next number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.","signatures":[{"label":"Date.IsInNextNQuarters(dateTime as any, quarters as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":23,"signatureLabelEnd":38},{"label":"quarters","documentation":"number","signatureLabelOffset":40,"signatureLabelEnd":58}],"documentation":"Indicates whether this date occurs during the next number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.","SignatureStart":"Date.IsInNextNQuarters(","SignatureEnd":")"}]},{"export":"Date.IsInNextNWeeks","kind":"Function","summary":"Indicates whether this date occurs during the next number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.","signatures":[{"label":"Date.IsInNextNWeeks(dateTime as any, weeks as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":20,"signatureLabelEnd":35},{"label":"weeks","documentation":"number","signatureLabelOffset":37,"signatureLabelEnd":52}],"documentation":"Indicates whether this date occurs during the next number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.","SignatureStart":"Date.IsInNextNWeeks(","SignatureEnd":")"}]},{"export":"Date.IsInNextNYears","kind":"Function","summary":"Indicates whether this date occurs during the next number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.","signatures":[{"label":"Date.IsInNextNYears(dateTime as any, years as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":20,"signatureLabelEnd":35},{"label":"years","documentation":"number","signatureLabelOffset":37,"signatureLabelEnd":52}],"documentation":"Indicates whether this date occurs during the next number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.","SignatureStart":"Date.IsInNextNYears(","SignatureEnd":")"}]},{"export":"Date.IsInNextQuarter","kind":"Function","summary":"Indicates whether this date occurs during the next quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.","signatures":[{"label":"Date.IsInNextQuarter(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":21,"signatureLabelEnd":36}],"documentation":"Indicates whether this date occurs during the next quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.","SignatureStart":"Date.IsInNextQuarter(","SignatureEnd":")"}]},{"export":"Date.IsInNextWeek","kind":"Function","summary":"Indicates whether this date occurs during the next week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.","signatures":[{"label":"Date.IsInNextWeek(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":33}],"documentation":"Indicates whether this date occurs during the next week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.","SignatureStart":"Date.IsInNextWeek(","SignatureEnd":")"}]},{"export":"Date.IsInNextYear","kind":"Function","summary":"Indicates whether this date occurs during the next year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.","signatures":[{"label":"Date.IsInNextYear(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":33}],"documentation":"Indicates whether this date occurs during the next year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.","SignatureStart":"Date.IsInNextYear(","SignatureEnd":")"}]},{"export":"Date.IsInPreviousDay","kind":"Function","summary":"Indicates whether this date occurs during the previous day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.","signatures":[{"label":"Date.IsInPreviousDay(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":21,"signatureLabelEnd":36}],"documentation":"Indicates whether this date occurs during the previous day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.","SignatureStart":"Date.IsInPreviousDay(","SignatureEnd":")"}]},{"export":"Date.IsInPreviousMonth","kind":"Function","summary":"Indicates whether this date occurs during the previous month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.","signatures":[{"label":"Date.IsInPreviousMonth(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":23,"signatureLabelEnd":38}],"documentation":"Indicates whether this date occurs during the previous month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.","SignatureStart":"Date.IsInPreviousMonth(","SignatureEnd":")"}]},{"export":"Date.IsInPreviousNDays","kind":"Function","summary":"Indicates whether this date occurs during the previous number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.","signatures":[{"label":"Date.IsInPreviousNDays(dateTime as any, days as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":23,"signatureLabelEnd":38},{"label":"days","documentation":"number","signatureLabelOffset":40,"signatureLabelEnd":54}],"documentation":"Indicates whether this date occurs during the previous number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.","SignatureStart":"Date.IsInPreviousNDays(","SignatureEnd":")"}]},{"export":"Date.IsInPreviousNMonths","kind":"Function","summary":"Indicates whether this date occurs during the previous number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.","signatures":[{"label":"Date.IsInPreviousNMonths(dateTime as any, months as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":25,"signatureLabelEnd":40},{"label":"months","documentation":"number","signatureLabelOffset":42,"signatureLabelEnd":58}],"documentation":"Indicates whether this date occurs during the previous number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.","SignatureStart":"Date.IsInPreviousNMonths(","SignatureEnd":")"}]},{"export":"Date.IsInPreviousNQuarters","kind":"Function","summary":"Indicates whether this date occurs during the previous number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.","signatures":[{"label":"Date.IsInPreviousNQuarters(dateTime as any, quarters as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":27,"signatureLabelEnd":42},{"label":"quarters","documentation":"number","signatureLabelOffset":44,"signatureLabelEnd":62}],"documentation":"Indicates whether this date occurs during the previous number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.","SignatureStart":"Date.IsInPreviousNQuarters(","SignatureEnd":")"}]},{"export":"Date.IsInPreviousNWeeks","kind":"Function","summary":"Indicates whether this date occurs during the previous number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.","signatures":[{"label":"Date.IsInPreviousNWeeks(dateTime as any, weeks as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":39},{"label":"weeks","documentation":"number","signatureLabelOffset":41,"signatureLabelEnd":56}],"documentation":"Indicates whether this date occurs during the previous number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.","SignatureStart":"Date.IsInPreviousNWeeks(","SignatureEnd":")"}]},{"export":"Date.IsInPreviousNYears","kind":"Function","summary":"Indicates whether this date occurs during the previous number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.","signatures":[{"label":"Date.IsInPreviousNYears(dateTime as any, years as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":39},{"label":"years","documentation":"number","signatureLabelOffset":41,"signatureLabelEnd":56}],"documentation":"Indicates whether this date occurs during the previous number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.","SignatureStart":"Date.IsInPreviousNYears(","SignatureEnd":")"}]},{"export":"Date.IsInPreviousQuarter","kind":"Function","summary":"Indicates whether this date occurs during the previous quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.","signatures":[{"label":"Date.IsInPreviousQuarter(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":25,"signatureLabelEnd":40}],"documentation":"Indicates whether this date occurs during the previous quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.","SignatureStart":"Date.IsInPreviousQuarter(","SignatureEnd":")"}]},{"export":"Date.IsInPreviousWeek","kind":"Function","summary":"Indicates whether this date occurs during the previous week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.","signatures":[{"label":"Date.IsInPreviousWeek(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":22,"signatureLabelEnd":37}],"documentation":"Indicates whether this date occurs during the previous week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.","SignatureStart":"Date.IsInPreviousWeek(","SignatureEnd":")"}]},{"export":"Date.IsInPreviousYear","kind":"Function","summary":"Indicates whether this date occurs during the previous year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.","signatures":[{"label":"Date.IsInPreviousYear(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":22,"signatureLabelEnd":37}],"documentation":"Indicates whether this date occurs during the previous year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.","SignatureStart":"Date.IsInPreviousYear(","SignatureEnd":")"}]},{"export":"Date.IsInYearToDate","kind":"Function","summary":"Indicates whether this date occurs during the current year and is on or before the current day, as determined by the current date and time on the system.","signatures":[{"label":"Date.IsInYearToDate(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":20,"signatureLabelEnd":35}],"documentation":"Indicates whether this date occurs during the current year and is on or before the current day, as determined by the current date and time on the system.","SignatureStart":"Date.IsInYearToDate(","SignatureEnd":")"}]},{"export":"Date.IsLeapYear","kind":"Function","summary":"Indicates whether this date falls in a leap year.","signatures":[{"label":"Date.IsLeapYear(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":16,"signatureLabelEnd":31}],"documentation":"Indicates whether this date falls in a leap year.","SignatureStart":"Date.IsLeapYear(","SignatureEnd":")"}]},{"export":"Date.Month","kind":"Function","summary":"Returns the month component.","signatures":[{"label":"Date.Month(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":26}],"documentation":"Returns the month component.","SignatureStart":"Date.Month(","SignatureEnd":")"}]},{"export":"Date.MonthName","kind":"Function","summary":"Returns the name of the month component.","signatures":[{"label":"Date.MonthName(date as any)","parameters":[{"label":"date","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":26}],"documentation":"Returns the name of the month component.","SignatureStart":"Date.MonthName(","SignatureEnd":")"},{"label":"Date.MonthName(date as any, culture as nullable text)","parameters":[{"label":"date","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":26},{"label":"culture","documentation":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":52}],"documentation":"Returns the name of the month component.","SignatureStart":"Date.MonthName(","SignatureEnd":")"}]},{"export":"Date.QuarterOfYear","kind":"Function","summary":"Returns a number indicating which quarter of the year the date falls in.","signatures":[{"label":"Date.QuarterOfYear(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":19,"signatureLabelEnd":34}],"documentation":"Returns a number indicating which quarter of the year the date falls in.","SignatureStart":"Date.QuarterOfYear(","SignatureEnd":")"}]},{"export":"Date.StartOfDay","kind":"Function","summary":"Returns the first value of the day.","signatures":[{"label":"Date.StartOfDay(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":16,"signatureLabelEnd":31}],"documentation":"Returns the first value of the day.","SignatureStart":"Date.StartOfDay(","SignatureEnd":")"}]},{"export":"Date.StartOfMonth","kind":"Function","summary":"Returns the first value of the month.","signatures":[{"label":"Date.StartOfMonth(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":33}],"documentation":"Returns the first value of the month.","SignatureStart":"Date.StartOfMonth(","SignatureEnd":")"}]},{"export":"Date.StartOfQuarter","kind":"Function","summary":"Returns the first value of the quarter.","signatures":[{"label":"Date.StartOfQuarter(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":20,"signatureLabelEnd":35}],"documentation":"Returns the first value of the quarter.","SignatureStart":"Date.StartOfQuarter(","SignatureEnd":")"}]},{"export":"Date.StartOfWeek","kind":"Function","summary":"Returns the first value of the week.","signatures":[{"label":"Date.StartOfWeek(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"documentation":"Returns the first value of the week.","SignatureStart":"Date.StartOfWeek(","SignatureEnd":")"},{"label":"Date.StartOfWeek(dateTime as any, firstDayOfWeek as nullable number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":17,"signatureLabelEnd":32},{"label":"firstDayOfWeek","documentation":"nullable number","signatureLabelOffset":34,"signatureLabelEnd":67}],"documentation":"Returns the first value of the week.","SignatureStart":"Date.StartOfWeek(","SignatureEnd":")"}]},{"export":"Date.StartOfYear","kind":"Function","summary":"Returns the first value of the year.","signatures":[{"label":"Date.StartOfYear(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"documentation":"Returns the first value of the year.","SignatureStart":"Date.StartOfYear(","SignatureEnd":")"}]},{"export":"Date.ToRecord","kind":"Function","summary":"Returns a record containing parts of the date value.","signatures":[{"label":"Date.ToRecord(date as date)","parameters":[{"label":"date","documentation":"date","signatureLabelOffset":14,"signatureLabelEnd":26}],"documentation":"Returns a record containing parts of the date value.","SignatureStart":"Date.ToRecord(","SignatureEnd":")"}]},{"export":"Date.ToText","kind":"Function","summary":"Returns a textual representation of the Date value.","signatures":[{"label":"Date.ToText(date as nullable date)","parameters":[{"label":"date","documentation":"nullable date","signatureLabelOffset":12,"signatureLabelEnd":33}],"documentation":"Returns a textual representation of the Date value.","SignatureStart":"Date.ToText(","SignatureEnd":")"},{"label":"Date.ToText(date as nullable date, format as nullable text)","parameters":[{"label":"date","documentation":"nullable date","signatureLabelOffset":12,"signatureLabelEnd":33},{"label":"format","documentation":"nullable text","signatureLabelOffset":35,"signatureLabelEnd":58}],"documentation":"Returns a textual representation of the Date value.","SignatureStart":"Date.ToText(","SignatureEnd":")"},{"label":"Date.ToText(date as nullable date, format as nullable text, culture as nullable text)","parameters":[{"label":"date","documentation":"nullable date","signatureLabelOffset":12,"signatureLabelEnd":33},{"label":"format","documentation":"nullable text","signatureLabelOffset":35,"signatureLabelEnd":58},{"label":"culture","documentation":"nullable text","signatureLabelOffset":60,"signatureLabelEnd":84}],"documentation":"Returns a textual representation of the Date value.","SignatureStart":"Date.ToText(","SignatureEnd":")"}]},{"export":"Date.Type","kind":"Type","summary":"The type that represents all date values.","signatures":null},{"export":"Date.WeekOfMonth","kind":"Function","summary":"Returns a number from 1 to 5 indicating which week of the month this date falls in.","signatures":[{"label":"Date.WeekOfMonth(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"documentation":"Returns a number from 1 to 5 indicating which week of the month this date falls in.","SignatureStart":"Date.WeekOfMonth(","SignatureEnd":")"},{"label":"Date.WeekOfMonth(dateTime as any, firstDayOfWeek as nullable number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":17,"signatureLabelEnd":32},{"label":"firstDayOfWeek","documentation":"nullable number","signatureLabelOffset":34,"signatureLabelEnd":67}],"documentation":"Returns a number from 1 to 5 indicating which week of the month this date falls in.","SignatureStart":"Date.WeekOfMonth(","SignatureEnd":")"}]},{"export":"Date.WeekOfYear","kind":"Function","summary":"Returns a number from 1 to 54 indicating which week of the year this date falls in.","signatures":[{"label":"Date.WeekOfYear(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":16,"signatureLabelEnd":31}],"documentation":"Returns a number from 1 to 54 indicating which week of the year this date falls in.","SignatureStart":"Date.WeekOfYear(","SignatureEnd":")"},{"label":"Date.WeekOfYear(dateTime as any, firstDayOfWeek as nullable number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":16,"signatureLabelEnd":31},{"label":"firstDayOfWeek","documentation":"nullable number","signatureLabelOffset":33,"signatureLabelEnd":66}],"documentation":"Returns a number from 1 to 54 indicating which week of the year this date falls in.","SignatureStart":"Date.WeekOfYear(","SignatureEnd":")"}]},{"export":"Date.Year","kind":"Function","summary":"Returns the year component.","signatures":[{"label":"Date.Year(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":25}],"documentation":"Returns the year component.","SignatureStart":"Date.Year(","SignatureEnd":")"}]},{"export":"DateTime.AddZone","kind":"Function","summary":"Sets timezone information on the datetime value.","signatures":[{"label":"DateTime.AddZone(dateTime as nullable datetime, timezoneHours as number)","parameters":[{"label":"dateTime","documentation":"nullable datetime","signatureLabelOffset":17,"signatureLabelEnd":46},{"label":"timezoneHours","documentation":"number","signatureLabelOffset":48,"signatureLabelEnd":71}],"documentation":"Sets timezone information on the datetime value.","SignatureStart":"DateTime.AddZone(","SignatureEnd":")"},{"label":"DateTime.AddZone(dateTime as nullable datetime, timezoneHours as number, timezoneMinutes as nullable number)","parameters":[{"label":"dateTime","documentation":"nullable datetime","signatureLabelOffset":17,"signatureLabelEnd":46},{"label":"timezoneHours","documentation":"number","signatureLabelOffset":48,"signatureLabelEnd":71},{"label":"timezoneMinutes","documentation":"nullable number","signatureLabelOffset":73,"signatureLabelEnd":107}],"documentation":"Sets timezone information on the datetime value.","SignatureStart":"DateTime.AddZone(","SignatureEnd":")"}]},{"export":"DateTime.Date","kind":"Function","summary":"Returns the date component of the given date, datetime, or datetimezone value.","signatures":[{"label":"DateTime.Date(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":29}],"documentation":"Returns the date component of the given date, datetime, or datetimezone value.","SignatureStart":"DateTime.Date(","SignatureEnd":")"}]},{"export":"DateTime.FixedLocalNow","kind":"Function","summary":"Returns the current date and time in the local timezone. This value is fixed and will not change with successive calls.","signatures":[{"label":"DateTime.FixedLocalNow()","parameters":[],"documentation":"Returns the current date and time in the local timezone. This value is fixed and will not change with successive calls.","SignatureStart":"DateTime.FixedLocalNow(","SignatureEnd":")"}]},{"export":"DateTime.From","kind":"Function","summary":"Creates a datetime from the given value.","signatures":[{"label":"DateTime.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":26}],"documentation":"Creates a datetime from the given value.","SignatureStart":"DateTime.From(","SignatureEnd":")"},{"label":"DateTime.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":26},{"label":"culture","documentation":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":52}],"documentation":"Creates a datetime from the given value.","SignatureStart":"DateTime.From(","SignatureEnd":")"}]},{"export":"DateTime.FromFileTime","kind":"Function","summary":"Creates a datetime from a 64 bits long number.","signatures":[{"label":"DateTime.FromFileTime(fileTime as nullable number)","parameters":[{"label":"fileTime","documentation":"nullable number","signatureLabelOffset":22,"signatureLabelEnd":49}],"documentation":"Creates a datetime from a 64 bits long number.","SignatureStart":"DateTime.FromFileTime(","SignatureEnd":")"}]},{"export":"DateTime.FromText","kind":"Function","summary":"Creates a datetime from local and universal datetime formats.","signatures":[{"label":"DateTime.FromText(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":18,"signatureLabelEnd":39}],"documentation":"Creates a datetime from local and universal datetime formats.","SignatureStart":"DateTime.FromText(","SignatureEnd":")"},{"label":"DateTime.FromText(text as nullable text, culture as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":18,"signatureLabelEnd":39},{"label":"culture","documentation":"nullable text","signatureLabelOffset":41,"signatureLabelEnd":65}],"documentation":"Creates a datetime from local and universal datetime formats.","SignatureStart":"DateTime.FromText(","SignatureEnd":")"}]},{"export":"DateTime.IsInCurrentHour","kind":"Function","summary":"Indicates whether this datetime occurs during the current hour, as determined by the current date and time on the system.","signatures":[{"label":"DateTime.IsInCurrentHour(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":25,"signatureLabelEnd":40}],"documentation":"Indicates whether this datetime occurs during the current hour, as determined by the current date and time on the system.","SignatureStart":"DateTime.IsInCurrentHour(","SignatureEnd":")"}]},{"export":"DateTime.IsInCurrentMinute","kind":"Function","summary":"Indicates whether this datetime occurs during the current minute, as determined by the current date and time on the system.","signatures":[{"label":"DateTime.IsInCurrentMinute(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":27,"signatureLabelEnd":42}],"documentation":"Indicates whether this datetime occurs during the current minute, as determined by the current date and time on the system.","SignatureStart":"DateTime.IsInCurrentMinute(","SignatureEnd":")"}]},{"export":"DateTime.IsInCurrentSecond","kind":"Function","summary":"Indicates whether this datetime occurs during the current second, as determined by the current date and time on the system.","signatures":[{"label":"DateTime.IsInCurrentSecond(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":27,"signatureLabelEnd":42}],"documentation":"Indicates whether this datetime occurs during the current second, as determined by the current date and time on the system.","SignatureStart":"DateTime.IsInCurrentSecond(","SignatureEnd":")"}]},{"export":"DateTime.IsInNextHour","kind":"Function","summary":"Indicates whether this datetime occurs during the next hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.","signatures":[{"label":"DateTime.IsInNextHour(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":22,"signatureLabelEnd":37}],"documentation":"Indicates whether this datetime occurs during the next hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.","SignatureStart":"DateTime.IsInNextHour(","SignatureEnd":")"}]},{"export":"DateTime.IsInNextMinute","kind":"Function","summary":"Indicates whether this datetime occurs during the next minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.","signatures":[{"label":"DateTime.IsInNextMinute(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":39}],"documentation":"Indicates whether this datetime occurs during the next minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.","SignatureStart":"DateTime.IsInNextMinute(","SignatureEnd":")"}]},{"export":"DateTime.IsInNextNHours","kind":"Function","summary":"Indicates whether this datetime occurs during the next number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.","signatures":[{"label":"DateTime.IsInNextNHours(dateTime as any, hours as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":39},{"label":"hours","documentation":"number","signatureLabelOffset":41,"signatureLabelEnd":56}],"documentation":"Indicates whether this datetime occurs during the next number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.","SignatureStart":"DateTime.IsInNextNHours(","SignatureEnd":")"}]},{"export":"DateTime.IsInNextNMinutes","kind":"Function","summary":"Indicates whether this datetime occurs during the next number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.","signatures":[{"label":"DateTime.IsInNextNMinutes(dateTime as any, minutes as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":26,"signatureLabelEnd":41},{"label":"minutes","documentation":"number","signatureLabelOffset":43,"signatureLabelEnd":60}],"documentation":"Indicates whether this datetime occurs during the next number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.","SignatureStart":"DateTime.IsInNextNMinutes(","SignatureEnd":")"}]},{"export":"DateTime.IsInNextNSeconds","kind":"Function","summary":"Indicates whether this datetime occurs during the next number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.","signatures":[{"label":"DateTime.IsInNextNSeconds(dateTime as any, seconds as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":26,"signatureLabelEnd":41},{"label":"seconds","documentation":"number","signatureLabelOffset":43,"signatureLabelEnd":60}],"documentation":"Indicates whether this datetime occurs during the next number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.","SignatureStart":"DateTime.IsInNextNSeconds(","SignatureEnd":")"}]},{"export":"DateTime.IsInNextSecond","kind":"Function","summary":"Indicates whether this datetime occurs during the next second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.","signatures":[{"label":"DateTime.IsInNextSecond(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":39}],"documentation":"Indicates whether this datetime occurs during the next second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.","SignatureStart":"DateTime.IsInNextSecond(","SignatureEnd":")"}]},{"export":"DateTime.IsInPreviousHour","kind":"Function","summary":"Indicates whether this datetime occurs during the previous hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.","signatures":[{"label":"DateTime.IsInPreviousHour(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":26,"signatureLabelEnd":41}],"documentation":"Indicates whether this datetime occurs during the previous hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.","SignatureStart":"DateTime.IsInPreviousHour(","SignatureEnd":")"}]},{"export":"DateTime.IsInPreviousMinute","kind":"Function","summary":"Indicates whether this datetime occurs during the previous minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.","signatures":[{"label":"DateTime.IsInPreviousMinute(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":43}],"documentation":"Indicates whether this datetime occurs during the previous minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.","SignatureStart":"DateTime.IsInPreviousMinute(","SignatureEnd":")"}]},{"export":"DateTime.IsInPreviousNHours","kind":"Function","summary":"Indicates whether this datetime occurs during the previous number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.","signatures":[{"label":"DateTime.IsInPreviousNHours(dateTime as any, hours as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":43},{"label":"hours","documentation":"number","signatureLabelOffset":45,"signatureLabelEnd":60}],"documentation":"Indicates whether this datetime occurs during the previous number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.","SignatureStart":"DateTime.IsInPreviousNHours(","SignatureEnd":")"}]},{"export":"DateTime.IsInPreviousNMinutes","kind":"Function","summary":"Indicates whether this datetime occurs during the previous number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.","signatures":[{"label":"DateTime.IsInPreviousNMinutes(dateTime as any, minutes as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":45},{"label":"minutes","documentation":"number","signatureLabelOffset":47,"signatureLabelEnd":64}],"documentation":"Indicates whether this datetime occurs during the previous number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.","SignatureStart":"DateTime.IsInPreviousNMinutes(","SignatureEnd":")"}]},{"export":"DateTime.IsInPreviousNSeconds","kind":"Function","summary":"Indicates whether this datetime occurs during the previous number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.","signatures":[{"label":"DateTime.IsInPreviousNSeconds(dateTime as any, seconds as number)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":45},{"label":"seconds","documentation":"number","signatureLabelOffset":47,"signatureLabelEnd":64}],"documentation":"Indicates whether this datetime occurs during the previous number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.","SignatureStart":"DateTime.IsInPreviousNSeconds(","SignatureEnd":")"}]},{"export":"DateTime.IsInPreviousSecond","kind":"Function","summary":"Indicates whether this datetime occurs during the previous second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.","signatures":[{"label":"DateTime.IsInPreviousSecond(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":43}],"documentation":"Indicates whether this datetime occurs during the previous second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.","SignatureStart":"DateTime.IsInPreviousSecond(","SignatureEnd":")"}]},{"export":"DateTime.LocalNow","kind":"Function","summary":"Returns the current date and time in the local timezone.","signatures":[{"label":"DateTime.LocalNow()","parameters":[],"documentation":"Returns the current date and time in the local timezone.","SignatureStart":"DateTime.LocalNow(","SignatureEnd":")"}]},{"export":"DateTime.Time","kind":"Function","summary":"Returns the time part of the given datetime value.","signatures":[{"label":"DateTime.Time(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":29}],"documentation":"Returns the time part of the given datetime value.","SignatureStart":"DateTime.Time(","SignatureEnd":")"}]},{"export":"DateTime.ToRecord","kind":"Function","summary":"Returns a record containing the datetime value's parts.","signatures":[{"label":"DateTime.ToRecord(dateTime as datetime)","parameters":[{"label":"dateTime","documentation":"datetime","signatureLabelOffset":18,"signatureLabelEnd":38}],"documentation":"Returns a record containing the datetime value's parts.","SignatureStart":"DateTime.ToRecord(","SignatureEnd":")"}]},{"export":"DateTime.ToText","kind":"Function","summary":"Returns a textual representation of the datetime value.","signatures":[{"label":"DateTime.ToText(dateTime as nullable datetime)","parameters":[{"label":"dateTime","documentation":"nullable datetime","signatureLabelOffset":16,"signatureLabelEnd":45}],"documentation":"Returns a textual representation of the datetime value.","SignatureStart":"DateTime.ToText(","SignatureEnd":")"},{"label":"DateTime.ToText(dateTime as nullable datetime, format as nullable text)","parameters":[{"label":"dateTime","documentation":"nullable datetime","signatureLabelOffset":16,"signatureLabelEnd":45},{"label":"format","documentation":"nullable text","signatureLabelOffset":47,"signatureLabelEnd":70}],"documentation":"Returns a textual representation of the datetime value.","SignatureStart":"DateTime.ToText(","SignatureEnd":")"},{"label":"DateTime.ToText(dateTime as nullable datetime, format as nullable text, culture as nullable text)","parameters":[{"label":"dateTime","documentation":"nullable datetime","signatureLabelOffset":16,"signatureLabelEnd":45},{"label":"format","documentation":"nullable text","signatureLabelOffset":47,"signatureLabelEnd":70},{"label":"culture","documentation":"nullable text","signatureLabelOffset":72,"signatureLabelEnd":96}],"documentation":"Returns a textual representation of the datetime value.","SignatureStart":"DateTime.ToText(","SignatureEnd":")"}]},{"export":"DateTime.Type","kind":"Type","summary":"The type that represents all date and time values without an associated timezone.","signatures":null},{"export":"DateTimeZone.FixedLocalNow","kind":"Function","summary":"Returns the current date & time in the local timezone. This value is fixed and will not change with successive calls.","signatures":[{"label":"DateTimeZone.FixedLocalNow()","parameters":[],"documentation":"Returns the current date & time in the local timezone. This value is fixed and will not change with successive calls.","SignatureStart":"DateTimeZone.FixedLocalNow(","SignatureEnd":")"}]},{"export":"DateTimeZone.FixedUtcNow","kind":"Function","summary":"Returns the current date and time in UTC (the GMT timezone). This value is fixed and will not change with successive calls.","signatures":[{"label":"DateTimeZone.FixedUtcNow()","parameters":[],"documentation":"Returns the current date and time in UTC (the GMT timezone). This value is fixed and will not change with successive calls.","SignatureStart":"DateTimeZone.FixedUtcNow(","SignatureEnd":")"}]},{"export":"DateTimeZone.From","kind":"Function","summary":"Creates a datetimezone from the given value.","signatures":[{"label":"DateTimeZone.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":30}],"documentation":"Creates a datetimezone from the given value.","SignatureStart":"DateTimeZone.From(","SignatureEnd":")"},{"label":"DateTimeZone.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":30},{"label":"culture","documentation":"nullable text","signatureLabelOffset":32,"signatureLabelEnd":56}],"documentation":"Creates a datetimezone from the given value.","SignatureStart":"DateTimeZone.From(","SignatureEnd":")"}]},{"export":"DateTimeZone.FromFileTime","kind":"Function","summary":"Creates a datetimezone from a 64 bits long number.","signatures":[{"label":"DateTimeZone.FromFileTime(fileTime as nullable number)","parameters":[{"label":"fileTime","documentation":"nullable number","signatureLabelOffset":26,"signatureLabelEnd":53}],"documentation":"Creates a datetimezone from a 64 bits long number.","SignatureStart":"DateTimeZone.FromFileTime(","SignatureEnd":")"}]},{"export":"DateTimeZone.FromText","kind":"Function","summary":"Creates a datetimezone from local and universal datetime formats.","signatures":[{"label":"DateTimeZone.FromText(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":22,"signatureLabelEnd":43}],"documentation":"Creates a datetimezone from local and universal datetime formats.","SignatureStart":"DateTimeZone.FromText(","SignatureEnd":")"},{"label":"DateTimeZone.FromText(text as nullable text, culture as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":22,"signatureLabelEnd":43},{"label":"culture","documentation":"nullable text","signatureLabelOffset":45,"signatureLabelEnd":69}],"documentation":"Creates a datetimezone from local and universal datetime formats.","SignatureStart":"DateTimeZone.FromText(","SignatureEnd":")"}]},{"export":"DateTimeZone.LocalNow","kind":"Function","summary":"Returns the current date & time in the local timezone.","signatures":[{"label":"DateTimeZone.LocalNow()","parameters":[],"documentation":"Returns the current date & time in the local timezone.","SignatureStart":"DateTimeZone.LocalNow(","SignatureEnd":")"}]},{"export":"DateTimeZone.RemoveZone","kind":"Function","summary":"Removes timezone information from the given datetimezone value.","signatures":[{"label":"DateTimeZone.RemoveZone(dateTimeZone as nullable datetimezone)","parameters":[{"label":"dateTimeZone","documentation":"nullable datetimezone","signatureLabelOffset":24,"signatureLabelEnd":61}],"documentation":"Removes timezone information from the given datetimezone value.","SignatureStart":"DateTimeZone.RemoveZone(","SignatureEnd":")"}]},{"export":"DateTimeZone.SwitchZone","kind":"Function","summary":"Changes the timezone of the value.","signatures":[{"label":"DateTimeZone.SwitchZone(dateTimeZone as nullable datetimezone, timezoneHours as number)","parameters":[{"label":"dateTimeZone","documentation":"nullable datetimezone","signatureLabelOffset":24,"signatureLabelEnd":61},{"label":"timezoneHours","documentation":"number","signatureLabelOffset":63,"signatureLabelEnd":86}],"documentation":"Changes the timezone of the value.","SignatureStart":"DateTimeZone.SwitchZone(","SignatureEnd":")"},{"label":"DateTimeZone.SwitchZone(dateTimeZone as nullable datetimezone, timezoneHours as number, timezoneMinutes as nullable number)","parameters":[{"label":"dateTimeZone","documentation":"nullable datetimezone","signatureLabelOffset":24,"signatureLabelEnd":61},{"label":"timezoneHours","documentation":"number","signatureLabelOffset":63,"signatureLabelEnd":86},{"label":"timezoneMinutes","documentation":"nullable number","signatureLabelOffset":88,"signatureLabelEnd":122}],"documentation":"Changes the timezone of the value.","SignatureStart":"DateTimeZone.SwitchZone(","SignatureEnd":")"}]},{"export":"DateTimeZone.ToLocal","kind":"Function","summary":"Converts the timezone component to the local timezone.","signatures":[{"label":"DateTimeZone.ToLocal(dateTimeZone as nullable datetimezone)","parameters":[{"label":"dateTimeZone","documentation":"nullable datetimezone","signatureLabelOffset":21,"signatureLabelEnd":58}],"documentation":"Converts the timezone component to the local timezone.","SignatureStart":"DateTimeZone.ToLocal(","SignatureEnd":")"}]},{"export":"DateTimeZone.ToRecord","kind":"Function","summary":"Returns a record containing the datetimezone value's parts.","signatures":[{"label":"DateTimeZone.ToRecord(dateTimeZone as datetimezone)","parameters":[{"label":"dateTimeZone","documentation":"datetimezone","signatureLabelOffset":22,"signatureLabelEnd":50}],"documentation":"Returns a record containing the datetimezone value's parts.","SignatureStart":"DateTimeZone.ToRecord(","SignatureEnd":")"}]},{"export":"DateTimeZone.ToText","kind":"Function","summary":"Returns a textual representation of the datetimezone value.","signatures":[{"label":"DateTimeZone.ToText(dateTimeZone as nullable datetimezone)","parameters":[{"label":"dateTimeZone","documentation":"nullable datetimezone","signatureLabelOffset":20,"signatureLabelEnd":57}],"documentation":"Returns a textual representation of the datetimezone value.","SignatureStart":"DateTimeZone.ToText(","SignatureEnd":")"},{"label":"DateTimeZone.ToText(dateTimeZone as nullable datetimezone, format as nullable text)","parameters":[{"label":"dateTimeZone","documentation":"nullable datetimezone","signatureLabelOffset":20,"signatureLabelEnd":57},{"label":"format","documentation":"nullable text","signatureLabelOffset":59,"signatureLabelEnd":82}],"documentation":"Returns a textual representation of the datetimezone value.","SignatureStart":"DateTimeZone.ToText(","SignatureEnd":")"},{"label":"DateTimeZone.ToText(dateTimeZone as nullable datetimezone, format as nullable text, culture as nullable text)","parameters":[{"label":"dateTimeZone","documentation":"nullable datetimezone","signatureLabelOffset":20,"signatureLabelEnd":57},{"label":"format","documentation":"nullable text","signatureLabelOffset":59,"signatureLabelEnd":82},{"label":"culture","documentation":"nullable text","signatureLabelOffset":84,"signatureLabelEnd":108}],"documentation":"Returns a textual representation of the datetimezone value.","SignatureStart":"DateTimeZone.ToText(","SignatureEnd":")"}]},{"export":"DateTimeZone.ToUtc","kind":"Function","summary":"Converts the timezone component to UTC timezone.","signatures":[{"label":"DateTimeZone.ToUtc(dateTimeZone as nullable datetimezone)","parameters":[{"label":"dateTimeZone","documentation":"nullable datetimezone","signatureLabelOffset":19,"signatureLabelEnd":56}],"documentation":"Converts the timezone component to UTC timezone.","SignatureStart":"DateTimeZone.ToUtc(","SignatureEnd":")"}]},{"export":"DateTimeZone.Type","kind":"Type","summary":"The type that represents all date and time values relative to a timezone.","signatures":null},{"export":"DateTimeZone.UtcNow","kind":"Function","summary":"Returns the current date and time in UTC (the GMT timezone).","signatures":[{"label":"DateTimeZone.UtcNow()","parameters":[],"documentation":"Returns the current date and time in UTC (the GMT timezone).","SignatureStart":"DateTimeZone.UtcNow(","SignatureEnd":")"}]},{"export":"DateTimeZone.ZoneHours","kind":"Function","summary":"Changes the timezone of the value.","signatures":[{"label":"DateTimeZone.ZoneHours(dateTimeZone as nullable datetimezone)","parameters":[{"label":"dateTimeZone","documentation":"nullable datetimezone","signatureLabelOffset":23,"signatureLabelEnd":60}],"documentation":"Changes the timezone of the value.","SignatureStart":"DateTimeZone.ZoneHours(","SignatureEnd":")"}]},{"export":"DateTimeZone.ZoneMinutes","kind":"Function","summary":"Changes the timezone of the value.","signatures":[{"label":"DateTimeZone.ZoneMinutes(dateTimeZone as nullable datetimezone)","parameters":[{"label":"dateTimeZone","documentation":"nullable datetimezone","signatureLabelOffset":25,"signatureLabelEnd":62}],"documentation":"Changes the timezone of the value.","SignatureStart":"DateTimeZone.ZoneMinutes(","SignatureEnd":")"}]},{"export":"Day.Friday","kind":"Constant","summary":"Represents Friday.","signatures":null},{"export":"Day.Monday","kind":"Constant","summary":"Represents Monday.","signatures":null},{"export":"Day.Saturday","kind":"Constant","summary":"Represents Saturday.","signatures":null},{"export":"Day.Sunday","kind":"Constant","summary":"Represents Sunday.","signatures":null},{"export":"Day.Thursday","kind":"Constant","summary":"Represents Thursday.","signatures":null},{"export":"Day.Tuesday","kind":"Constant","summary":"Represents Tuesday.","signatures":null},{"export":"Day.Type","kind":"Type","summary":"Specifies a day of week.","signatures":null},{"export":"Day.Wednesday","kind":"Constant","summary":"Represents Wednesday.","signatures":null},{"export":"Decimal.From","kind":"Function","summary":"Creates a Decimal from the given value.","signatures":[{"label":"Decimal.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":25}],"documentation":"Creates a Decimal from the given value.","SignatureStart":"Decimal.From(","SignatureEnd":")"},{"label":"Decimal.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":25},{"label":"culture","documentation":"nullable text","signatureLabelOffset":27,"signatureLabelEnd":51}],"documentation":"Creates a Decimal from the given value.","SignatureStart":"Decimal.From(","SignatureEnd":")"}]},{"export":"Decimal.Type","kind":"Type","summary":"The type that represents fixed-point decimal number.","signatures":null},{"export":"Diagnostics.ActivityId","kind":"Function","summary":"Returns an opaque identifier for the currently-running evaluation.","signatures":[{"label":"Diagnostics.ActivityId()","parameters":[],"documentation":"Returns an opaque identifier for the currently-running evaluation.","SignatureStart":"Diagnostics.ActivityId(","SignatureEnd":")"}]},{"export":"Diagnostics.Trace","kind":"Function","summary":"Writes a trace entry, if tracing is enabled, and returns the value.","signatures":[{"label":"Diagnostics.Trace(traceLevel as number, message as anynonnull, value as any)","parameters":[{"label":"traceLevel","documentation":"number","signatureLabelOffset":18,"signatureLabelEnd":38},{"label":"message","documentation":"anynonnull","signatureLabelOffset":40,"signatureLabelEnd":61},{"label":"value","documentation":"any","signatureLabelOffset":63,"signatureLabelEnd":75}],"documentation":"Writes a trace entry, if tracing is enabled, and returns the value.","SignatureStart":"Diagnostics.Trace(","SignatureEnd":")"},{"label":"Diagnostics.Trace(traceLevel as number, message as anynonnull, value as any, delayed as nullable logical)","parameters":[{"label":"traceLevel","documentation":"number","signatureLabelOffset":18,"signatureLabelEnd":38},{"label":"message","documentation":"anynonnull","signatureLabelOffset":40,"signatureLabelEnd":61},{"label":"value","documentation":"any","signatureLabelOffset":63,"signatureLabelEnd":75},{"label":"delayed","documentation":"nullable logical","signatureLabelOffset":77,"signatureLabelEnd":104}],"documentation":"Writes a trace entry, if tracing is enabled, and returns the value.","SignatureStart":"Diagnostics.Trace(","SignatureEnd":")"}]},{"export":"DirectQueryCapabilities.From","kind":"Function","summary":"DirectQueryCapabilities.From","signatures":[{"label":"DirectQueryCapabilities.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":29,"signatureLabelEnd":41}],"documentation":"DirectQueryCapabilities.From","SignatureStart":"DirectQueryCapabilities.From(","SignatureEnd":")"}]},{"export":"Double.From","kind":"Function","summary":"Creates a Double from the given value.","signatures":[{"label":"Double.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":12,"signatureLabelEnd":24}],"documentation":"Creates a Double from the given value.","SignatureStart":"Double.From(","SignatureEnd":")"},{"label":"Double.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":12,"signatureLabelEnd":24},{"label":"culture","documentation":"nullable text","signatureLabelOffset":26,"signatureLabelEnd":50}],"documentation":"Creates a Double from the given value.","SignatureStart":"Double.From(","SignatureEnd":")"}]},{"export":"Double.Type","kind":"Type","summary":"The type that represents double precision floating point number.","signatures":null},{"export":"Duration.Days","kind":"Function","summary":"Returns the days part of this duration.","signatures":[{"label":"Duration.Days(duration as nullable duration)","parameters":[{"label":"duration","documentation":"nullable duration","signatureLabelOffset":14,"signatureLabelEnd":43}],"documentation":"Returns the days part of this duration.","SignatureStart":"Duration.Days(","SignatureEnd":")"}]},{"export":"Duration.From","kind":"Function","summary":"Creates a duration from the given value.","signatures":[{"label":"Duration.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":26}],"documentation":"Creates a duration from the given value.","SignatureStart":"Duration.From(","SignatureEnd":")"}]},{"export":"Duration.FromText","kind":"Function","summary":"Returns a duration value from textual elapsed time forms (d.h:m:s).","signatures":[{"label":"Duration.FromText(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":18,"signatureLabelEnd":39}],"documentation":"Returns a duration value from textual elapsed time forms (d.h:m:s).","SignatureStart":"Duration.FromText(","SignatureEnd":")"}]},{"export":"Duration.Hours","kind":"Function","summary":"Returns the hours part of this duration.","signatures":[{"label":"Duration.Hours(duration as nullable duration)","parameters":[{"label":"duration","documentation":"nullable duration","signatureLabelOffset":15,"signatureLabelEnd":44}],"documentation":"Returns the hours part of this duration.","SignatureStart":"Duration.Hours(","SignatureEnd":")"}]},{"export":"Duration.Minutes","kind":"Function","summary":"Returns the minutes part of this duration.","signatures":[{"label":"Duration.Minutes(duration as nullable duration)","parameters":[{"label":"duration","documentation":"nullable duration","signatureLabelOffset":17,"signatureLabelEnd":46}],"documentation":"Returns the minutes part of this duration.","SignatureStart":"Duration.Minutes(","SignatureEnd":")"}]},{"export":"Duration.Seconds","kind":"Function","summary":"Returns the seconds part of this duration.","signatures":[{"label":"Duration.Seconds(duration as nullable duration)","parameters":[{"label":"duration","documentation":"nullable duration","signatureLabelOffset":17,"signatureLabelEnd":46}],"documentation":"Returns the seconds part of this duration.","SignatureStart":"Duration.Seconds(","SignatureEnd":")"}]},{"export":"Duration.ToRecord","kind":"Function","summary":"Returns a record containing the parts of the duration.","signatures":[{"label":"Duration.ToRecord(duration as duration)","parameters":[{"label":"duration","documentation":"duration","signatureLabelOffset":18,"signatureLabelEnd":38}],"documentation":"Returns a record containing the parts of the duration.","SignatureStart":"Duration.ToRecord(","SignatureEnd":")"}]},{"export":"Duration.TotalDays","kind":"Function","summary":"Returns the total days this duration spans.","signatures":[{"label":"Duration.TotalDays(duration as nullable duration)","parameters":[{"label":"duration","documentation":"nullable duration","signatureLabelOffset":19,"signatureLabelEnd":48}],"documentation":"Returns the total days this duration spans.","SignatureStart":"Duration.TotalDays(","SignatureEnd":")"}]},{"export":"Duration.TotalHours","kind":"Function","summary":"Returns the total hours this duration spans.","signatures":[{"label":"Duration.TotalHours(duration as nullable duration)","parameters":[{"label":"duration","documentation":"nullable duration","signatureLabelOffset":20,"signatureLabelEnd":49}],"documentation":"Returns the total hours this duration spans.","SignatureStart":"Duration.TotalHours(","SignatureEnd":")"}]},{"export":"Duration.TotalMinutes","kind":"Function","summary":"Returns the total minutes this duration spans.","signatures":[{"label":"Duration.TotalMinutes(duration as nullable duration)","parameters":[{"label":"duration","documentation":"nullable duration","signatureLabelOffset":22,"signatureLabelEnd":51}],"documentation":"Returns the total minutes this duration spans.","SignatureStart":"Duration.TotalMinutes(","SignatureEnd":")"}]},{"export":"Duration.TotalSeconds","kind":"Function","summary":"Returns the total seconds this duration spans.","signatures":[{"label":"Duration.TotalSeconds(duration as nullable duration)","parameters":[{"label":"duration","documentation":"nullable duration","signatureLabelOffset":22,"signatureLabelEnd":51}],"documentation":"Returns the total seconds this duration spans.","SignatureStart":"Duration.TotalSeconds(","SignatureEnd":")"}]},{"export":"Duration.ToText","kind":"Function","summary":"Returns the text of the form \"d.h:m:s\".","signatures":[{"label":"Duration.ToText(duration as nullable duration)","parameters":[{"label":"duration","documentation":"nullable duration","signatureLabelOffset":16,"signatureLabelEnd":45}],"documentation":"Returns the text of the form \"d.h:m:s\".","SignatureStart":"Duration.ToText(","SignatureEnd":")"},{"label":"Duration.ToText(duration as nullable duration, format as nullable text)","parameters":[{"label":"duration","documentation":"nullable duration","signatureLabelOffset":16,"signatureLabelEnd":45},{"label":"format","documentation":"nullable text","signatureLabelOffset":47,"signatureLabelEnd":70}],"documentation":"Returns the text of the form \"d.h:m:s\".","SignatureStart":"Duration.ToText(","SignatureEnd":")"}]},{"export":"Duration.Type","kind":"Type","summary":"The type that represents all duration values","signatures":null},{"export":"Embedded.Value","kind":"Function","summary":"Accesses a value by name in an embedded mashup.","signatures":[{"label":"Embedded.Value(value as any, path as text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":27},{"label":"path","documentation":"text","signatureLabelOffset":29,"signatureLabelEnd":41}],"documentation":"Accesses a value by name in an embedded mashup.","SignatureStart":"Embedded.Value(","SignatureEnd":")"}]},{"export":"Error.Record","kind":"Function","summary":"Returns an error record from the provided text values for reason, message and detail.","signatures":[{"label":"Error.Record(reason as text)","parameters":[{"label":"reason","documentation":"text","signatureLabelOffset":13,"signatureLabelEnd":27}],"documentation":"Returns an error record from the provided text values for reason, message and detail.","SignatureStart":"Error.Record(","SignatureEnd":")"},{"label":"Error.Record(reason as text, message as nullable text)","parameters":[{"label":"reason","documentation":"text","signatureLabelOffset":13,"signatureLabelEnd":27},{"label":"message","documentation":"nullable text","signatureLabelOffset":29,"signatureLabelEnd":53}],"documentation":"Returns an error record from the provided text values for reason, message and detail.","SignatureStart":"Error.Record(","SignatureEnd":")"},{"label":"Error.Record(reason as text, message as nullable text, detail as any)","parameters":[{"label":"reason","documentation":"text","signatureLabelOffset":13,"signatureLabelEnd":27},{"label":"message","documentation":"nullable text","signatureLabelOffset":29,"signatureLabelEnd":53},{"label":"detail","documentation":"any","signatureLabelOffset":55,"signatureLabelEnd":68}],"documentation":"Returns an error record from the provided text values for reason, message and detail.","SignatureStart":"Error.Record(","SignatureEnd":")"}]},{"export":"Excel.Workbook","kind":"Function","summary":"Returns a record of Sheets from the Excel workbook.","signatures":[{"label":"Excel.Workbook(workbook as binary)","parameters":[{"label":"workbook","documentation":"binary","signatureLabelOffset":15,"signatureLabelEnd":33}],"documentation":"Returns a record of Sheets from the Excel workbook.","SignatureStart":"Excel.Workbook(","SignatureEnd":")"},{"label":"Excel.Workbook(workbook as binary, useHeaders as nullable logical)","parameters":[{"label":"workbook","documentation":"binary","signatureLabelOffset":15,"signatureLabelEnd":33},{"label":"useHeaders","documentation":"nullable logical","signatureLabelOffset":35,"signatureLabelEnd":65}],"documentation":"Returns a record of Sheets from the Excel workbook.","SignatureStart":"Excel.Workbook(","SignatureEnd":")"},{"label":"Excel.Workbook(workbook as binary, useHeaders as nullable logical, delayTypes as nullable logical)","parameters":[{"label":"workbook","documentation":"binary","signatureLabelOffset":15,"signatureLabelEnd":33},{"label":"useHeaders","documentation":"nullable logical","signatureLabelOffset":35,"signatureLabelEnd":65},{"label":"delayTypes","documentation":"nullable logical","signatureLabelOffset":67,"signatureLabelEnd":97}],"documentation":"Returns a record of Sheets from the Excel workbook.","SignatureStart":"Excel.Workbook(","SignatureEnd":")"}]},{"export":"Expression.Constant","kind":"Function","summary":"Expression.Constant","signatures":[{"label":"Expression.Constant(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":20,"signatureLabelEnd":32}],"documentation":"Expression.Constant","SignatureStart":"Expression.Constant(","SignatureEnd":")"}]},{"export":"Expression.Evaluate","kind":"Function","summary":"Expression.Evaluate","signatures":[{"label":"Expression.Evaluate(document as text)","parameters":[{"label":"document","documentation":"text","signatureLabelOffset":20,"signatureLabelEnd":36}],"documentation":"Expression.Evaluate","SignatureStart":"Expression.Evaluate(","SignatureEnd":")"},{"label":"Expression.Evaluate(document as text, environment as nullable record)","parameters":[{"label":"document","documentation":"text","signatureLabelOffset":20,"signatureLabelEnd":36},{"label":"environment","documentation":"nullable record","signatureLabelOffset":38,"signatureLabelEnd":68}],"documentation":"Expression.Evaluate","SignatureStart":"Expression.Evaluate(","SignatureEnd":")"}]},{"export":"Expression.Identifier","kind":"Function","summary":"Expression.Identifier","signatures":[{"label":"Expression.Identifier(name as text)","parameters":[{"label":"name","documentation":"text","signatureLabelOffset":22,"signatureLabelEnd":34}],"documentation":"Expression.Identifier","SignatureStart":"Expression.Identifier(","SignatureEnd":")"}]},{"export":"ExtraValues.Error","kind":"Constant","summary":"If the splitter function returns more columns than the table expects, an error should be raised.","signatures":null},{"export":"ExtraValues.Ignore","kind":"Constant","summary":"If the splitter function returns more columns than the table expects, they should be ignored.","signatures":null},{"export":"ExtraValues.List","kind":"Constant","summary":"If the splitter function returns more columns than the table expects, they should be collected into a list.","signatures":null},{"export":"ExtraValues.Type","kind":"Type","summary":"Specifies the expected action for extra values in a row that contains columns more than expected.","signatures":null},{"export":"Function.From","kind":"Function","summary":"Creates a function with a specific parameter signature on top of a function that takes a single list argument","signatures":[{"label":"Function.From(functionType as type, function as function)","parameters":[{"label":"functionType","documentation":"type","signatureLabelOffset":14,"signatureLabelEnd":34},{"label":"function","documentation":"function","signatureLabelOffset":36,"signatureLabelEnd":56}],"documentation":"Creates a function with a specific parameter signature on top of a function that takes a single list argument","SignatureStart":"Function.From(","SignatureEnd":")"}]},{"export":"Function.Invoke","kind":"Function","summary":"Invokes the given function","signatures":[{"label":"Function.Invoke(function as function, args as list)","parameters":[{"label":"function","documentation":"function","signatureLabelOffset":16,"signatureLabelEnd":36},{"label":"args","documentation":"list","signatureLabelOffset":38,"signatureLabelEnd":50}],"documentation":"Invokes the given function","SignatureStart":"Function.Invoke(","SignatureEnd":")"}]},{"export":"Function.InvokeAfter","kind":"Function","summary":"Invokes the given function after the specified duration has passed.","signatures":[{"label":"Function.InvokeAfter(function as function, delay as duration)","parameters":[{"label":"function","documentation":"function","signatureLabelOffset":21,"signatureLabelEnd":41},{"label":"delay","documentation":"duration","signatureLabelOffset":43,"signatureLabelEnd":60}],"documentation":"Invokes the given function after the specified duration has passed.","SignatureStart":"Function.InvokeAfter(","SignatureEnd":")"}]},{"export":"Function.IsDataSource","kind":"Function","summary":"Returns whether or not a particular function is considered a data source.","signatures":[{"label":"Function.IsDataSource(function as function)","parameters":[{"label":"function","documentation":"function","signatureLabelOffset":22,"signatureLabelEnd":42}],"documentation":"Returns whether or not a particular function is considered a data source.","SignatureStart":"Function.IsDataSource(","SignatureEnd":")"}]},{"export":"Function.ScalarVector","kind":"Function","summary":"Creates a scalar function on top of a vector function, batching multiple invocations.","signatures":[{"label":"Function.ScalarVector(scalarFunctionType as type, vectorFunction as function)","parameters":[{"label":"scalarFunctionType","documentation":"type","signatureLabelOffset":22,"signatureLabelEnd":48},{"label":"vectorFunction","documentation":"function","signatureLabelOffset":50,"signatureLabelEnd":76}],"documentation":"Creates a scalar function on top of a vector function, batching multiple invocations.","SignatureStart":"Function.ScalarVector(","SignatureEnd":")"}]},{"export":"Function.Type","kind":"Type","summary":"The type that represents all functions.","signatures":null},{"export":"GroupKind.Global","kind":"Constant","summary":"GroupKind.Global","signatures":null},{"export":"GroupKind.Local","kind":"Constant","summary":"GroupKind.Local","signatures":null},{"export":"GroupKind.Type","kind":"Type","summary":"Specifies the kind of grouping.","signatures":null},{"export":"Guid.From","kind":"Function","summary":"Returns a guid value from the given value.","signatures":[{"label":"Guid.From(value as nullable text)","parameters":[{"label":"value","documentation":"nullable text","signatureLabelOffset":10,"signatureLabelEnd":32}],"documentation":"Returns a guid value from the given value.","SignatureStart":"Guid.From(","SignatureEnd":")"}]},{"export":"Guid.Type","kind":"Type","summary":"The type that represents a Guid value.","signatures":null},{"export":"Identity.From","kind":"Function","summary":"Creates an identity.","signatures":[{"label":"Identity.From(identityProvider as function, value as any)","parameters":[{"label":"identityProvider","documentation":"function","signatureLabelOffset":14,"signatureLabelEnd":42},{"label":"value","documentation":"any","signatureLabelOffset":44,"signatureLabelEnd":56}],"documentation":"Creates an identity.","SignatureStart":"Identity.From(","SignatureEnd":")"}]},{"export":"Identity.IsMemberOf","kind":"Function","summary":"Determines whether an identity is a member of an identity collection.","signatures":[{"label":"Identity.IsMemberOf(identity as record, collection as record)","parameters":[{"label":"identity","documentation":"record","signatureLabelOffset":20,"signatureLabelEnd":38},{"label":"collection","documentation":"record","signatureLabelOffset":40,"signatureLabelEnd":60}],"documentation":"Determines whether an identity is a member of an identity collection.","SignatureStart":"Identity.IsMemberOf(","SignatureEnd":")"}]},{"export":"Identity.Type","kind":"Type","summary":"An identity represents a user, group, device, or other identifiable thing.","signatures":null},{"export":"IdentityProvider.Default","kind":"Function","summary":"The default identity provider for the current host.","signatures":[{"label":"IdentityProvider.Default()","parameters":[],"documentation":"The default identity provider for the current host.","SignatureStart":"IdentityProvider.Default(","SignatureEnd":")"}]},{"export":"IdentityProvider.Type","kind":"Type","summary":"Defines a scope in which identities are created and compared.","signatures":null},{"export":"Int16.From","kind":"Function","summary":"Creates a 16-bit integer from the given value.","signatures":[{"label":"Int16.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":23}],"documentation":"Creates a 16-bit integer from the given value.","SignatureStart":"Int16.From(","SignatureEnd":")"},{"label":"Int16.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":23},{"label":"culture","documentation":"nullable text","signatureLabelOffset":25,"signatureLabelEnd":49}],"documentation":"Creates a 16-bit integer from the given value.","SignatureStart":"Int16.From(","SignatureEnd":")"},{"label":"Int16.From(value as any, culture as nullable text, roundingMode as nullable number)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":23},{"label":"culture","documentation":"nullable text","signatureLabelOffset":25,"signatureLabelEnd":49},{"label":"roundingMode","documentation":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":82}],"documentation":"Creates a 16-bit integer from the given value.","SignatureStart":"Int16.From(","SignatureEnd":")"}]},{"export":"Int16.Type","kind":"Type","summary":"The type that represents signed 16 bit integer.","signatures":null},{"export":"Int32.From","kind":"Function","summary":"Creates a 32-bit integer from the given value.","signatures":[{"label":"Int32.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":23}],"documentation":"Creates a 32-bit integer from the given value.","SignatureStart":"Int32.From(","SignatureEnd":")"},{"label":"Int32.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":23},{"label":"culture","documentation":"nullable text","signatureLabelOffset":25,"signatureLabelEnd":49}],"documentation":"Creates a 32-bit integer from the given value.","SignatureStart":"Int32.From(","SignatureEnd":")"},{"label":"Int32.From(value as any, culture as nullable text, roundingMode as nullable number)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":23},{"label":"culture","documentation":"nullable text","signatureLabelOffset":25,"signatureLabelEnd":49},{"label":"roundingMode","documentation":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":82}],"documentation":"Creates a 32-bit integer from the given value.","SignatureStart":"Int32.From(","SignatureEnd":")"}]},{"export":"Int32.Type","kind":"Type","summary":"The type that represents signed 32 bit integer.","signatures":null},{"export":"Int64.From","kind":"Function","summary":"Creates a 64-bit integer from the given value.","signatures":[{"label":"Int64.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":23}],"documentation":"Creates a 64-bit integer from the given value.","SignatureStart":"Int64.From(","SignatureEnd":")"},{"label":"Int64.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":23},{"label":"culture","documentation":"nullable text","signatureLabelOffset":25,"signatureLabelEnd":49}],"documentation":"Creates a 64-bit integer from the given value.","SignatureStart":"Int64.From(","SignatureEnd":")"},{"label":"Int64.From(value as any, culture as nullable text, roundingMode as nullable number)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":23},{"label":"culture","documentation":"nullable text","signatureLabelOffset":25,"signatureLabelEnd":49},{"label":"roundingMode","documentation":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":82}],"documentation":"Creates a 64-bit integer from the given value.","SignatureStart":"Int64.From(","SignatureEnd":")"}]},{"export":"Int64.Type","kind":"Type","summary":"The type that represents signed 64 bit integer.","signatures":null},{"export":"Int8.From","kind":"Function","summary":"Creates a signed 8-bit integer from the given value.","signatures":[{"label":"Int8.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":22}],"documentation":"Creates a signed 8-bit integer from the given value.","SignatureStart":"Int8.From(","SignatureEnd":")"},{"label":"Int8.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"culture","documentation":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48}],"documentation":"Creates a signed 8-bit integer from the given value.","SignatureStart":"Int8.From(","SignatureEnd":")"},{"label":"Int8.From(value as any, culture as nullable text, roundingMode as nullable number)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"culture","documentation":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48},{"label":"roundingMode","documentation":"nullable number","signatureLabelOffset":50,"signatureLabelEnd":81}],"documentation":"Creates a signed 8-bit integer from the given value.","SignatureStart":"Int8.From(","SignatureEnd":")"}]},{"export":"Int8.Type","kind":"Type","summary":"The type that represents signed 8 bit integer.","signatures":null},{"export":"ItemExpression.From","kind":"Function","summary":"Returns the AST for the body of a function.","signatures":[{"label":"ItemExpression.From(function as function)","parameters":[{"label":"function","documentation":"function","signatureLabelOffset":20,"signatureLabelEnd":40}],"documentation":"Returns the AST for the body of a function.","SignatureStart":"ItemExpression.From(","SignatureEnd":")"}]},{"export":"ItemExpression.Item","kind":"Constant","summary":"An AST node representing the item in an item expression.","signatures":null},{"export":"JoinAlgorithm.Dynamic","kind":"Constant","summary":"JoinAlgorithm.Dynamic","signatures":null},{"export":"JoinAlgorithm.LeftHash","kind":"Constant","summary":"JoinAlgorithm.LeftHash","signatures":null},{"export":"JoinAlgorithm.LeftIndex","kind":"Constant","summary":"JoinAlgorithm.LeftIndex","signatures":null},{"export":"JoinAlgorithm.PairwiseHash","kind":"Constant","summary":"JoinAlgorithm.PairwiseHash","signatures":null},{"export":"JoinAlgorithm.RightHash","kind":"Constant","summary":"JoinAlgorithm.RightHash","signatures":null},{"export":"JoinAlgorithm.RightIndex","kind":"Constant","summary":"JoinAlgorithm.RightIndex","signatures":null},{"export":"JoinAlgorithm.SortMerge","kind":"Constant","summary":"JoinAlgorithm.SortMerge","signatures":null},{"export":"JoinAlgorithm.Type","kind":"Type","summary":"Specifies the join algorithm to be used in the join operation.","signatures":null},{"export":"JoinKind.FullOuter","kind":"Constant","summary":"A possible value for the optional <code>JoinKind</code> parameter in <code>Table.Join</code>.\r\n    A full outer join ensures that all rows of both tables appear in the result. Rows that did not have a match in the other table are joined with a default row containing null values for all of its columns.","signatures":null},{"export":"JoinKind.Inner","kind":"Constant","summary":"A possible value for the optional <code>JoinKind</code> parameter in <code>Table.Join</code>.\r\n    The table resulting from an inner join contains a row for each pair of rows from the specified tables that were determined to match based on the specified key columns.","signatures":null},{"export":"JoinKind.LeftAnti","kind":"Constant","summary":"A possible value for the optional <code>JoinKind</code> parameter in <code>Table.Join</code>.\r\n    A left anti join returns that all rows from the first table which do not have a match in the second table.","signatures":null},{"export":"JoinKind.LeftOuter","kind":"Constant","summary":"A possible value for the optional <code>JoinKind</code> parameter in <code>Table.Join</code>.\r\n    A left outer join ensures that all rows of the first table appear in the result.","signatures":null},{"export":"JoinKind.RightAnti","kind":"Constant","summary":"A possible value for the optional <code>JoinKind</code> parameter in <code>Table.Join</code>.\r\n    A right anti join returns that all rows from the second table which do not have a match in the first table.","signatures":null},{"export":"JoinKind.RightOuter","kind":"Constant","summary":"A possible value for the optional <code>JoinKind</code> parameter in <code>Table.Join</code>.\r\n    A right outer join ensures that all rows of the second table appear in the result.","signatures":null},{"export":"JoinKind.Type","kind":"Type","summary":"Specifies the kind of join operation.","signatures":null},{"export":"JoinSide.Left","kind":"Constant","summary":"Specifies the left table of a join.","signatures":null},{"export":"JoinSide.Right","kind":"Constant","summary":"Specifies the right table of a join.","signatures":null},{"export":"JoinSide.Type","kind":"Type","summary":"Specifies the left or right table of a join.","signatures":null},{"export":"Json.Document","kind":"Function","summary":"Returns the content of the JSON document.","signatures":[{"label":"Json.Document(jsonText as any)","parameters":[{"label":"jsonText","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":29}],"documentation":"Returns the content of the JSON document.","SignatureStart":"Json.Document(","SignatureEnd":")"},{"label":"Json.Document(jsonText as any, encoding as nullable number)","parameters":[{"label":"jsonText","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":29},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":31,"signatureLabelEnd":58}],"documentation":"Returns the content of the JSON document.","SignatureStart":"Json.Document(","SignatureEnd":")"}]},{"export":"Json.FromValue","kind":"Function","summary":"Produces a JSON representation of a given value.","signatures":[{"label":"Json.FromValue(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":27}],"documentation":"Produces a JSON representation of a given value.","SignatureStart":"Json.FromValue(","SignatureEnd":")"},{"label":"Json.FromValue(value as any, encoding as nullable number)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":27},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":29,"signatureLabelEnd":56}],"documentation":"Produces a JSON representation of a given value.","SignatureStart":"Json.FromValue(","SignatureEnd":")"}]},{"export":"Lines.FromBinary","kind":"Function","summary":"Converts a binary value to a list of text values split at lines breaks.  If a quote style is specified, then line breaks may appear within quotes.  If includeLineSeparators is true, then the line break characters are included in the text.","signatures":[{"label":"Lines.FromBinary(binary as binary)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":17,"signatureLabelEnd":33}],"documentation":"Converts a binary value to a list of text values split at lines breaks.  If a quote style is specified, then line breaks may appear within quotes.  If includeLineSeparators is true, then the line break characters are included in the text.","SignatureStart":"Lines.FromBinary(","SignatureEnd":")"},{"label":"Lines.FromBinary(binary as binary, quoteStyle as nullable number)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":17,"signatureLabelEnd":33},{"label":"quoteStyle","documentation":"nullable number","signatureLabelOffset":35,"signatureLabelEnd":64}],"documentation":"Converts a binary value to a list of text values split at lines breaks.  If a quote style is specified, then line breaks may appear within quotes.  If includeLineSeparators is true, then the line break characters are included in the text.","SignatureStart":"Lines.FromBinary(","SignatureEnd":")"},{"label":"Lines.FromBinary(binary as binary, quoteStyle as nullable number, includeLineSeparators as nullable logical)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":17,"signatureLabelEnd":33},{"label":"quoteStyle","documentation":"nullable number","signatureLabelOffset":35,"signatureLabelEnd":64},{"label":"includeLineSeparators","documentation":"nullable logical","signatureLabelOffset":66,"signatureLabelEnd":107}],"documentation":"Converts a binary value to a list of text values split at lines breaks.  If a quote style is specified, then line breaks may appear within quotes.  If includeLineSeparators is true, then the line break characters are included in the text.","SignatureStart":"Lines.FromBinary(","SignatureEnd":")"},{"label":"Lines.FromBinary(binary as binary, quoteStyle as nullable number, includeLineSeparators as nullable logical, encoding as nullable number)","parameters":[{"label":"binary","documentation":"binary","signatureLabelOffset":17,"signatureLabelEnd":33},{"label":"quoteStyle","documentation":"nullable number","signatureLabelOffset":35,"signatureLabelEnd":64},{"label":"includeLineSeparators","documentation":"nullable logical","signatureLabelOffset":66,"signatureLabelEnd":107},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":109,"signatureLabelEnd":136}],"documentation":"Converts a binary value to a list of text values split at lines breaks.  If a quote style is specified, then line breaks may appear within quotes.  If includeLineSeparators is true, then the line break characters are included in the text.","SignatureStart":"Lines.FromBinary(","SignatureEnd":")"}]},{"export":"Lines.FromText","kind":"Function","summary":"Converts a text value to a list of text values split at lines breaks. If includeLineSeparators is true, then the line break characters are included in the text.","signatures":[{"label":"Lines.FromText(text as text)","parameters":[{"label":"text","documentation":"text","signatureLabelOffset":15,"signatureLabelEnd":27}],"documentation":"Converts a text value to a list of text values split at lines breaks. If includeLineSeparators is true, then the line break characters are included in the text.","SignatureStart":"Lines.FromText(","SignatureEnd":")"},{"label":"Lines.FromText(text as text, quoteStyle as nullable number)","parameters":[{"label":"text","documentation":"text","signatureLabelOffset":15,"signatureLabelEnd":27},{"label":"quoteStyle","documentation":"nullable number","signatureLabelOffset":29,"signatureLabelEnd":58}],"documentation":"Converts a text value to a list of text values split at lines breaks. If includeLineSeparators is true, then the line break characters are included in the text.","SignatureStart":"Lines.FromText(","SignatureEnd":")"},{"label":"Lines.FromText(text as text, quoteStyle as nullable number, includeLineSeparators as nullable logical)","parameters":[{"label":"text","documentation":"text","signatureLabelOffset":15,"signatureLabelEnd":27},{"label":"quoteStyle","documentation":"nullable number","signatureLabelOffset":29,"signatureLabelEnd":58},{"label":"includeLineSeparators","documentation":"nullable logical","signatureLabelOffset":60,"signatureLabelEnd":101}],"documentation":"Converts a text value to a list of text values split at lines breaks. If includeLineSeparators is true, then the line break characters are included in the text.","SignatureStart":"Lines.FromText(","SignatureEnd":")"}]},{"export":"Lines.ToBinary","kind":"Function","summary":"Converts a list of text into a binary value using the specified encoding and lineSeparator.The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.","signatures":[{"label":"Lines.ToBinary(lines as list)","parameters":[{"label":"lines","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":28}],"documentation":"Converts a list of text into a binary value using the specified encoding and lineSeparator.The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.","SignatureStart":"Lines.ToBinary(","SignatureEnd":")"},{"label":"Lines.ToBinary(lines as list, lineSeparator as nullable text)","parameters":[{"label":"lines","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":28},{"label":"lineSeparator","documentation":"nullable text","signatureLabelOffset":30,"signatureLabelEnd":60}],"documentation":"Converts a list of text into a binary value using the specified encoding and lineSeparator.The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.","SignatureStart":"Lines.ToBinary(","SignatureEnd":")"},{"label":"Lines.ToBinary(lines as list, lineSeparator as nullable text, encoding as nullable number)","parameters":[{"label":"lines","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":28},{"label":"lineSeparator","documentation":"nullable text","signatureLabelOffset":30,"signatureLabelEnd":60},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":62,"signatureLabelEnd":89}],"documentation":"Converts a list of text into a binary value using the specified encoding and lineSeparator.The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.","SignatureStart":"Lines.ToBinary(","SignatureEnd":")"},{"label":"Lines.ToBinary(lines as list, lineSeparator as nullable text, encoding as nullable number, includeByteOrderMark as nullable logical)","parameters":[{"label":"lines","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":28},{"label":"lineSeparator","documentation":"nullable text","signatureLabelOffset":30,"signatureLabelEnd":60},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":62,"signatureLabelEnd":89},{"label":"includeByteOrderMark","documentation":"nullable logical","signatureLabelOffset":91,"signatureLabelEnd":131}],"documentation":"Converts a list of text into a binary value using the specified encoding and lineSeparator.The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.","SignatureStart":"Lines.ToBinary(","SignatureEnd":")"}]},{"export":"Lines.ToText","kind":"Function","summary":"Converts a list of text into a single text.  The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.","signatures":[{"label":"Lines.ToText(lines as list)","parameters":[{"label":"lines","documentation":"list","signatureLabelOffset":13,"signatureLabelEnd":26}],"documentation":"Converts a list of text into a single text.  The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.","SignatureStart":"Lines.ToText(","SignatureEnd":")"},{"label":"Lines.ToText(lines as list, lineSeparator as nullable text)","parameters":[{"label":"lines","documentation":"list","signatureLabelOffset":13,"signatureLabelEnd":26},{"label":"lineSeparator","documentation":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":58}],"documentation":"Converts a list of text into a single text.  The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.","SignatureStart":"Lines.ToText(","SignatureEnd":")"}]},{"export":"List.Accumulate","kind":"Function","summary":"Accumulates a summary value from the items in the list.","signatures":[{"label":"List.Accumulate(list as list, seed as any, accumulator as function)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"label":"seed","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":41},{"label":"accumulator","documentation":"function","signatureLabelOffset":43,"signatureLabelEnd":66}],"documentation":"Accumulates a summary value from the items in the list.","SignatureStart":"List.Accumulate(","SignatureEnd":")"}]},{"export":"List.AllTrue","kind":"Function","summary":"Returns true if all expressions are true.","signatures":[{"label":"List.AllTrue(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":13,"signatureLabelEnd":25}],"documentation":"Returns true if all expressions are true.","SignatureStart":"List.AllTrue(","SignatureEnd":")"}]},{"export":"List.Alternate","kind":"Function","summary":"Returns a list comprised of all the odd numbered offset elements in a list.","signatures":[{"label":"List.Alternate(list as list, count as number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"label":"count","documentation":"number","signatureLabelOffset":29,"signatureLabelEnd":44}],"documentation":"Returns a list comprised of all the odd numbered offset elements in a list.","SignatureStart":"List.Alternate(","SignatureEnd":")"},{"label":"List.Alternate(list as list, count as number, repeatInterval as nullable number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"label":"count","documentation":"number","signatureLabelOffset":29,"signatureLabelEnd":44},{"label":"repeatInterval","documentation":"nullable number","signatureLabelOffset":46,"signatureLabelEnd":79}],"documentation":"Returns a list comprised of all the odd numbered offset elements in a list.","SignatureStart":"List.Alternate(","SignatureEnd":")"},{"label":"List.Alternate(list as list, count as number, repeatInterval as nullable number, offset as nullable number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"label":"count","documentation":"number","signatureLabelOffset":29,"signatureLabelEnd":44},{"label":"repeatInterval","documentation":"nullable number","signatureLabelOffset":46,"signatureLabelEnd":79},{"label":"offset","documentation":"nullable number","signatureLabelOffset":81,"signatureLabelEnd":106}],"documentation":"Returns a list comprised of all the odd numbered offset elements in a list.","SignatureStart":"List.Alternate(","SignatureEnd":")"}]},{"export":"List.AnyTrue","kind":"Function","summary":"Returns true if any expression is true.","signatures":[{"label":"List.AnyTrue(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":13,"signatureLabelEnd":25}],"documentation":"Returns true if any expression is true.","SignatureStart":"List.AnyTrue(","SignatureEnd":")"}]},{"export":"List.Average","kind":"Function","summary":"Returns the average of the values. Works with number, date, datetime, datetimezone and duration values.","signatures":[{"label":"List.Average(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":13,"signatureLabelEnd":25}],"documentation":"Returns the average of the values. Works with number, date, datetime, datetimezone and duration values.","SignatureStart":"List.Average(","SignatureEnd":")"},{"label":"List.Average(list as list, precision as nullable number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":13,"signatureLabelEnd":25},{"label":"precision","documentation":"nullable number","signatureLabelOffset":27,"signatureLabelEnd":55}],"documentation":"Returns the average of the values. Works with number, date, datetime, datetimezone and duration values.","SignatureStart":"List.Average(","SignatureEnd":")"}]},{"export":"List.Buffer","kind":"Function","summary":"Buffers a list.","signatures":[{"label":"List.Buffer(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":12,"signatureLabelEnd":24}],"documentation":"Buffers a list.","SignatureStart":"List.Buffer(","SignatureEnd":")"}]},{"export":"List.Combine","kind":"Function","summary":"Returns a single list by combining multiple lists.","signatures":[{"label":"List.Combine(lists as list)","parameters":[{"label":"lists","documentation":"list","signatureLabelOffset":13,"signatureLabelEnd":26}],"documentation":"Returns a single list by combining multiple lists.","SignatureStart":"List.Combine(","SignatureEnd":")"}]},{"export":"List.Contains","kind":"Function","summary":"Indicates whether the list contains the value.","signatures":[{"label":"List.Contains(list as list, value as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":14,"signatureLabelEnd":26},{"label":"value","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":40}],"documentation":"Indicates whether the list contains the value.","SignatureStart":"List.Contains(","SignatureEnd":")"},{"label":"List.Contains(list as list, value as any, equationCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":14,"signatureLabelEnd":26},{"label":"value","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":40},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":42,"signatureLabelEnd":65}],"documentation":"Indicates whether the list contains the value.","SignatureStart":"List.Contains(","SignatureEnd":")"}]},{"export":"List.ContainsAll","kind":"Function","summary":"Indicates where a list includes all the values in another list.","signatures":[{"label":"List.ContainsAll(list as list, values as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"label":"values","documentation":"list","signatureLabelOffset":31,"signatureLabelEnd":45}],"documentation":"Indicates where a list includes all the values in another list.","SignatureStart":"List.ContainsAll(","SignatureEnd":")"},{"label":"List.ContainsAll(list as list, values as list, equationCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"label":"values","documentation":"list","signatureLabelOffset":31,"signatureLabelEnd":45},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":47,"signatureLabelEnd":70}],"documentation":"Indicates where a list includes all the values in another list.","SignatureStart":"List.ContainsAll(","SignatureEnd":")"}]},{"export":"List.ContainsAny","kind":"Function","summary":"Indicates where a list includes any of the values in another list.","signatures":[{"label":"List.ContainsAny(list as list, values as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"label":"values","documentation":"list","signatureLabelOffset":31,"signatureLabelEnd":45}],"documentation":"Indicates where a list includes any of the values in another list.","SignatureStart":"List.ContainsAny(","SignatureEnd":")"},{"label":"List.ContainsAny(list as list, values as list, equationCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"label":"values","documentation":"list","signatureLabelOffset":31,"signatureLabelEnd":45},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":47,"signatureLabelEnd":70}],"documentation":"Indicates where a list includes any of the values in another list.","SignatureStart":"List.ContainsAny(","SignatureEnd":")"}]},{"export":"List.Count","kind":"Function","summary":"Returns the number of items in the list.","signatures":[{"label":"List.Count(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":11,"signatureLabelEnd":23}],"documentation":"Returns the number of items in the list.","SignatureStart":"List.Count(","SignatureEnd":")"}]},{"export":"List.Covariance","kind":"Function","summary":"Returns the covariance between the two lists of numbers.","signatures":[{"label":"List.Covariance(numberList1 as list, numberList2 as list)","parameters":[{"label":"numberList1","documentation":"list","signatureLabelOffset":16,"signatureLabelEnd":35},{"label":"numberList2","documentation":"list","signatureLabelOffset":37,"signatureLabelEnd":56}],"documentation":"Returns the covariance between the two lists of numbers.","SignatureStart":"List.Covariance(","SignatureEnd":")"}]},{"export":"List.Dates","kind":"Function","summary":"Generates a list of date values given an initial value, count, and incremental duration value.","signatures":[{"label":"List.Dates(start as date, count as number, step as duration)","parameters":[{"label":"start","documentation":"date","signatureLabelOffset":11,"signatureLabelEnd":24},{"label":"count","documentation":"number","signatureLabelOffset":26,"signatureLabelEnd":41},{"label":"step","documentation":"duration","signatureLabelOffset":43,"signatureLabelEnd":59}],"documentation":"Generates a list of date values given an initial value, count, and incremental duration value.","SignatureStart":"List.Dates(","SignatureEnd":")"}]},{"export":"List.DateTimes","kind":"Function","summary":"Generates a list of datetime values given an initial value, count, and incremental duration value.","signatures":[{"label":"List.DateTimes(start as datetime, count as number, step as duration)","parameters":[{"label":"start","documentation":"datetime","signatureLabelOffset":15,"signatureLabelEnd":32},{"label":"count","documentation":"number","signatureLabelOffset":34,"signatureLabelEnd":49},{"label":"step","documentation":"duration","signatureLabelOffset":51,"signatureLabelEnd":67}],"documentation":"Generates a list of datetime values given an initial value, count, and incremental duration value.","SignatureStart":"List.DateTimes(","SignatureEnd":")"}]},{"export":"List.DateTimeZones","kind":"Function","summary":"Generates a list of datetimezone values given an initial value, count, and incremental duration value.","signatures":[{"label":"List.DateTimeZones(start as datetimezone, count as number, step as duration)","parameters":[{"label":"start","documentation":"datetimezone","signatureLabelOffset":19,"signatureLabelEnd":40},{"label":"count","documentation":"number","signatureLabelOffset":42,"signatureLabelEnd":57},{"label":"step","documentation":"duration","signatureLabelOffset":59,"signatureLabelEnd":75}],"documentation":"Generates a list of datetimezone values given an initial value, count, and incremental duration value.","SignatureStart":"List.DateTimeZones(","SignatureEnd":")"}]},{"export":"List.Difference","kind":"Function","summary":"Returns the difference of the two given lists.","signatures":[{"label":"List.Difference(list1 as list, list2 as list)","parameters":[{"label":"list1","documentation":"list","signatureLabelOffset":16,"signatureLabelEnd":29},{"label":"list2","documentation":"list","signatureLabelOffset":31,"signatureLabelEnd":44}],"documentation":"Returns the difference of the two given lists.","SignatureStart":"List.Difference(","SignatureEnd":")"},{"label":"List.Difference(list1 as list, list2 as list, equationCriteria as any)","parameters":[{"label":"list1","documentation":"list","signatureLabelOffset":16,"signatureLabelEnd":29},{"label":"list2","documentation":"list","signatureLabelOffset":31,"signatureLabelEnd":44},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":46,"signatureLabelEnd":69}],"documentation":"Returns the difference of the two given lists.","SignatureStart":"List.Difference(","SignatureEnd":")"}]},{"export":"List.Distinct","kind":"Function","summary":"Returns a list of values with duplicates removed.","signatures":[{"label":"List.Distinct(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":14,"signatureLabelEnd":26}],"documentation":"Returns a list of values with duplicates removed.","SignatureStart":"List.Distinct(","SignatureEnd":")"},{"label":"List.Distinct(list as list, equationCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":14,"signatureLabelEnd":26},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":51}],"documentation":"Returns a list of values with duplicates removed.","SignatureStart":"List.Distinct(","SignatureEnd":")"}]},{"export":"List.Durations","kind":"Function","summary":"Generates a list of duration values given an initial value, count, and incremental duration value.","signatures":[{"label":"List.Durations(start as duration, count as number, step as duration)","parameters":[{"label":"start","documentation":"duration","signatureLabelOffset":15,"signatureLabelEnd":32},{"label":"count","documentation":"number","signatureLabelOffset":34,"signatureLabelEnd":49},{"label":"step","documentation":"duration","signatureLabelOffset":51,"signatureLabelEnd":67}],"documentation":"Generates a list of duration values given an initial value, count, and incremental duration value.","SignatureStart":"List.Durations(","SignatureEnd":")"}]},{"export":"List.FindText","kind":"Function","summary":"Returns a list of values (including record fields) that contain the specified text.","signatures":[{"label":"List.FindText(list as list, text as text)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":14,"signatureLabelEnd":26},{"label":"text","documentation":"text","signatureLabelOffset":28,"signatureLabelEnd":40}],"documentation":"Returns a list of values (including record fields) that contain the specified text.","SignatureStart":"List.FindText(","SignatureEnd":")"}]},{"export":"List.First","kind":"Function","summary":"Returns the first value of the list or the specified default if empty.","signatures":[{"label":"List.First(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":11,"signatureLabelEnd":23}],"documentation":"Returns the first value of the list or the specified default if empty.","SignatureStart":"List.First(","SignatureEnd":")"},{"label":"List.First(list as list, defaultValue as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":11,"signatureLabelEnd":23},{"label":"defaultValue","documentation":"any","signatureLabelOffset":25,"signatureLabelEnd":44}],"documentation":"Returns the first value of the list or the specified default if empty.","SignatureStart":"List.First(","SignatureEnd":")"}]},{"export":"List.FirstN","kind":"Function","summary":"Returns the first set of items in the list by specifying how many items to return or a qualifying condition.","signatures":[{"label":"List.FirstN(list as list, countOrCondition as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":12,"signatureLabelEnd":24},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":26,"signatureLabelEnd":49}],"documentation":"Returns the first set of items in the list by specifying how many items to return or a qualifying condition.","SignatureStart":"List.FirstN(","SignatureEnd":")"}]},{"export":"List.Generate","kind":"Function","summary":"Generates a list given an initial value function, a condition function, a next function, and an optional transformation function on the values.","signatures":[{"label":"List.Generate(initial as function, condition as function, next as function)","parameters":[{"label":"initial","documentation":"function","signatureLabelOffset":14,"signatureLabelEnd":33},{"label":"condition","documentation":"function","signatureLabelOffset":35,"signatureLabelEnd":56},{"label":"next","documentation":"function","signatureLabelOffset":58,"signatureLabelEnd":74}],"documentation":"Generates a list given an initial value function, a condition function, a next function, and an optional transformation function on the values.","SignatureStart":"List.Generate(","SignatureEnd":")"},{"label":"List.Generate(initial as function, condition as function, next as function, selector as nullable function)","parameters":[{"label":"initial","documentation":"function","signatureLabelOffset":14,"signatureLabelEnd":33},{"label":"condition","documentation":"function","signatureLabelOffset":35,"signatureLabelEnd":56},{"label":"next","documentation":"function","signatureLabelOffset":58,"signatureLabelEnd":74},{"label":"selector","documentation":"nullable function","signatureLabelOffset":76,"signatureLabelEnd":105}],"documentation":"Generates a list given an initial value function, a condition function, a next function, and an optional transformation function on the values.","SignatureStart":"List.Generate(","SignatureEnd":")"}]},{"export":"List.InsertRange","kind":"Function","summary":"Inserts values into a list at the given index.","signatures":[{"label":"List.InsertRange(list as list, index as number, values as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"label":"index","documentation":"number","signatureLabelOffset":31,"signatureLabelEnd":46},{"label":"values","documentation":"list","signatureLabelOffset":48,"signatureLabelEnd":62}],"documentation":"Inserts values into a list at the given index.","SignatureStart":"List.InsertRange(","SignatureEnd":")"}]},{"export":"List.Intersect","kind":"Function","summary":"Returns the intersection of the list values found in the input.","signatures":[{"label":"List.Intersect(lists as list)","parameters":[{"label":"lists","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":28}],"documentation":"Returns the intersection of the list values found in the input.","SignatureStart":"List.Intersect(","SignatureEnd":")"},{"label":"List.Intersect(lists as list, equationCriteria as any)","parameters":[{"label":"lists","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":28},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":53}],"documentation":"Returns the intersection of the list values found in the input.","SignatureStart":"List.Intersect(","SignatureEnd":")"}]},{"export":"List.IsDistinct","kind":"Function","summary":"Indicates whether there are duplicates in the list.","signatures":[{"label":"List.IsDistinct(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":16,"signatureLabelEnd":28}],"documentation":"Indicates whether there are duplicates in the list.","SignatureStart":"List.IsDistinct(","SignatureEnd":")"},{"label":"List.IsDistinct(list as list, equationCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":53}],"documentation":"Indicates whether there are duplicates in the list.","SignatureStart":"List.IsDistinct(","SignatureEnd":")"}]},{"export":"List.IsEmpty","kind":"Function","summary":"Returns true if the list is empty.","signatures":[{"label":"List.IsEmpty(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":13,"signatureLabelEnd":25}],"documentation":"Returns true if the list is empty.","SignatureStart":"List.IsEmpty(","SignatureEnd":")"}]},{"export":"List.Last","kind":"Function","summary":"Returns the last value of the list or the specified default if empty.","signatures":[{"label":"List.Last(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22}],"documentation":"Returns the last value of the list or the specified default if empty.","SignatureStart":"List.Last(","SignatureEnd":")"},{"label":"List.Last(list as list, defaultValue as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"defaultValue","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":43}],"documentation":"Returns the last value of the list or the specified default if empty.","SignatureStart":"List.Last(","SignatureEnd":")"}]},{"export":"List.LastN","kind":"Function","summary":"Returns the last value in the list.  Can optionally specify how many values to return or a qualifying condition.","signatures":[{"label":"List.LastN(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":11,"signatureLabelEnd":23}],"documentation":"Returns the last value in the list.  Can optionally specify how many values to return or a qualifying condition.","SignatureStart":"List.LastN(","SignatureEnd":")"},{"label":"List.LastN(list as list, countOrCondition as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":11,"signatureLabelEnd":23},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":25,"signatureLabelEnd":48}],"documentation":"Returns the last value in the list.  Can optionally specify how many values to return or a qualifying condition.","SignatureStart":"List.LastN(","SignatureEnd":")"}]},{"export":"List.MatchesAll","kind":"Function","summary":"Returns true if the condition function is satisfied by all values in the list.","signatures":[{"label":"List.MatchesAll(list as list, condition as function)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"label":"condition","documentation":"function","signatureLabelOffset":30,"signatureLabelEnd":51}],"documentation":"Returns true if the condition function is satisfied by all values in the list.","SignatureStart":"List.MatchesAll(","SignatureEnd":")"}]},{"export":"List.MatchesAny","kind":"Function","summary":"Returns true if the condition function is satisfied by any value.","signatures":[{"label":"List.MatchesAny(list as list, condition as function)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"label":"condition","documentation":"function","signatureLabelOffset":30,"signatureLabelEnd":51}],"documentation":"Returns true if the condition function is satisfied by any value.","SignatureStart":"List.MatchesAny(","SignatureEnd":")"}]},{"export":"List.Max","kind":"Function","summary":"Returns the maximum value or the default value for an empty list.","signatures":[{"label":"List.Max(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":9,"signatureLabelEnd":21}],"documentation":"Returns the maximum value or the default value for an empty list.","SignatureStart":"List.Max(","SignatureEnd":")"},{"label":"List.Max(list as list, default as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"label":"default","documentation":"any","signatureLabelOffset":23,"signatureLabelEnd":37}],"documentation":"Returns the maximum value or the default value for an empty list.","SignatureStart":"List.Max(","SignatureEnd":")"},{"label":"List.Max(list as list, default as any, comparisonCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"label":"default","documentation":"any","signatureLabelOffset":23,"signatureLabelEnd":37},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":39,"signatureLabelEnd":64}],"documentation":"Returns the maximum value or the default value for an empty list.","SignatureStart":"List.Max(","SignatureEnd":")"},{"label":"List.Max(list as list, default as any, comparisonCriteria as any, includeNulls as nullable logical)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"label":"default","documentation":"any","signatureLabelOffset":23,"signatureLabelEnd":37},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":39,"signatureLabelEnd":64},{"label":"includeNulls","documentation":"nullable logical","signatureLabelOffset":66,"signatureLabelEnd":98}],"documentation":"Returns the maximum value or the default value for an empty list.","SignatureStart":"List.Max(","SignatureEnd":")"}]},{"export":"List.MaxN","kind":"Function","summary":"Returns the maximum value(s) in the list. The number of values to return or filtering condition must be specified.","signatures":[{"label":"List.MaxN(list as list, countOrCondition as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":47}],"documentation":"Returns the maximum value(s) in the list. The number of values to return or filtering condition must be specified.","SignatureStart":"List.MaxN(","SignatureEnd":")"},{"label":"List.MaxN(list as list, countOrCondition as any, comparisonCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":47},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":49,"signatureLabelEnd":74}],"documentation":"Returns the maximum value(s) in the list. The number of values to return or filtering condition must be specified.","SignatureStart":"List.MaxN(","SignatureEnd":")"},{"label":"List.MaxN(list as list, countOrCondition as any, comparisonCriteria as any, includeNulls as nullable logical)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":47},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":49,"signatureLabelEnd":74},{"label":"includeNulls","documentation":"nullable logical","signatureLabelOffset":76,"signatureLabelEnd":108}],"documentation":"Returns the maximum value(s) in the list. The number of values to return or filtering condition must be specified.","SignatureStart":"List.MaxN(","SignatureEnd":")"}]},{"export":"List.Median","kind":"Function","summary":"Returns the median value in the list.","signatures":[{"label":"List.Median(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":12,"signatureLabelEnd":24}],"documentation":"Returns the median value in the list.","SignatureStart":"List.Median(","SignatureEnd":")"},{"label":"List.Median(list as list, comparisonCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":12,"signatureLabelEnd":24},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":26,"signatureLabelEnd":51}],"documentation":"Returns the median value in the list.","SignatureStart":"List.Median(","SignatureEnd":")"}]},{"export":"List.Min","kind":"Function","summary":"Returns the minimum value or the default value for an empty list.","signatures":[{"label":"List.Min(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":9,"signatureLabelEnd":21}],"documentation":"Returns the minimum value or the default value for an empty list.","SignatureStart":"List.Min(","SignatureEnd":")"},{"label":"List.Min(list as list, default as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"label":"default","documentation":"any","signatureLabelOffset":23,"signatureLabelEnd":37}],"documentation":"Returns the minimum value or the default value for an empty list.","SignatureStart":"List.Min(","SignatureEnd":")"},{"label":"List.Min(list as list, default as any, comparisonCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"label":"default","documentation":"any","signatureLabelOffset":23,"signatureLabelEnd":37},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":39,"signatureLabelEnd":64}],"documentation":"Returns the minimum value or the default value for an empty list.","SignatureStart":"List.Min(","SignatureEnd":")"},{"label":"List.Min(list as list, default as any, comparisonCriteria as any, includeNulls as nullable logical)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"label":"default","documentation":"any","signatureLabelOffset":23,"signatureLabelEnd":37},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":39,"signatureLabelEnd":64},{"label":"includeNulls","documentation":"nullable logical","signatureLabelOffset":66,"signatureLabelEnd":98}],"documentation":"Returns the minimum value or the default value for an empty list.","SignatureStart":"List.Min(","SignatureEnd":")"}]},{"export":"List.MinN","kind":"Function","summary":"Returns the minimum value(s) in the list. The number of values to return or filtering condition may be specified.","signatures":[{"label":"List.MinN(list as list, countOrCondition as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":47}],"documentation":"Returns the minimum value(s) in the list. The number of values to return or filtering condition may be specified.","SignatureStart":"List.MinN(","SignatureEnd":")"},{"label":"List.MinN(list as list, countOrCondition as any, comparisonCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":47},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":49,"signatureLabelEnd":74}],"documentation":"Returns the minimum value(s) in the list. The number of values to return or filtering condition may be specified.","SignatureStart":"List.MinN(","SignatureEnd":")"},{"label":"List.MinN(list as list, countOrCondition as any, comparisonCriteria as any, includeNulls as nullable logical)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":47},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":49,"signatureLabelEnd":74},{"label":"includeNulls","documentation":"nullable logical","signatureLabelOffset":76,"signatureLabelEnd":108}],"documentation":"Returns the minimum value(s) in the list. The number of values to return or filtering condition may be specified.","SignatureStart":"List.MinN(","SignatureEnd":")"}]},{"export":"List.Mode","kind":"Function","summary":"Returns the most frequent value in the list.","signatures":[{"label":"List.Mode(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22}],"documentation":"Returns the most frequent value in the list.","SignatureStart":"List.Mode(","SignatureEnd":")"},{"label":"List.Mode(list as list, equationCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":47}],"documentation":"Returns the most frequent value in the list.","SignatureStart":"List.Mode(","SignatureEnd":")"}]},{"export":"List.Modes","kind":"Function","summary":"Returns a list of the most frequent values in the list.","signatures":[{"label":"List.Modes(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":11,"signatureLabelEnd":23}],"documentation":"Returns a list of the most frequent values in the list.","SignatureStart":"List.Modes(","SignatureEnd":")"},{"label":"List.Modes(list as list, equationCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":11,"signatureLabelEnd":23},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":25,"signatureLabelEnd":48}],"documentation":"Returns a list of the most frequent values in the list.","SignatureStart":"List.Modes(","SignatureEnd":")"}]},{"export":"List.NonNullCount","kind":"Function","summary":"Returns the number of non-null items in the list.","signatures":[{"label":"List.NonNullCount(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":18,"signatureLabelEnd":30}],"documentation":"Returns the number of non-null items in the list.","SignatureStart":"List.NonNullCount(","SignatureEnd":")"}]},{"export":"List.Numbers","kind":"Function","summary":"Returns a list of numbers given an initial value, count, and optional increment value.","signatures":[{"label":"List.Numbers(start as number, count as number)","parameters":[{"label":"start","documentation":"number","signatureLabelOffset":13,"signatureLabelEnd":28},{"label":"count","documentation":"number","signatureLabelOffset":30,"signatureLabelEnd":45}],"documentation":"Returns a list of numbers given an initial value, count, and optional increment value.","SignatureStart":"List.Numbers(","SignatureEnd":")"},{"label":"List.Numbers(start as number, count as number, increment as nullable number)","parameters":[{"label":"start","documentation":"number","signatureLabelOffset":13,"signatureLabelEnd":28},{"label":"count","documentation":"number","signatureLabelOffset":30,"signatureLabelEnd":45},{"label":"increment","documentation":"nullable number","signatureLabelOffset":47,"signatureLabelEnd":75}],"documentation":"Returns a list of numbers given an initial value, count, and optional increment value.","SignatureStart":"List.Numbers(","SignatureEnd":")"}]},{"export":"List.PositionOf","kind":"Function","summary":"Returns the offset(s) of a value in a list.","signatures":[{"label":"List.PositionOf(list as list, value as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"label":"value","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":42}],"documentation":"Returns the offset(s) of a value in a list.","SignatureStart":"List.PositionOf(","SignatureEnd":")"},{"label":"List.PositionOf(list as list, value as any, occurrence as nullable number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"label":"value","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":42},{"label":"occurrence","documentation":"nullable number","signatureLabelOffset":44,"signatureLabelEnd":73}],"documentation":"Returns the offset(s) of a value in a list.","SignatureStart":"List.PositionOf(","SignatureEnd":")"},{"label":"List.PositionOf(list as list, value as any, occurrence as nullable number, equationCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"label":"value","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":42},{"label":"occurrence","documentation":"nullable number","signatureLabelOffset":44,"signatureLabelEnd":73},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":75,"signatureLabelEnd":98}],"documentation":"Returns the offset(s) of a value in a list.","SignatureStart":"List.PositionOf(","SignatureEnd":")"}]},{"export":"List.PositionOfAny","kind":"Function","summary":"Returns the first offset of a value in a list.","signatures":[{"label":"List.PositionOfAny(list as list, values as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":19,"signatureLabelEnd":31},{"label":"values","documentation":"list","signatureLabelOffset":33,"signatureLabelEnd":47}],"documentation":"Returns the first offset of a value in a list.","SignatureStart":"List.PositionOfAny(","SignatureEnd":")"},{"label":"List.PositionOfAny(list as list, values as list, occurrence as nullable number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":19,"signatureLabelEnd":31},{"label":"values","documentation":"list","signatureLabelOffset":33,"signatureLabelEnd":47},{"label":"occurrence","documentation":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":78}],"documentation":"Returns the first offset of a value in a list.","SignatureStart":"List.PositionOfAny(","SignatureEnd":")"},{"label":"List.PositionOfAny(list as list, values as list, occurrence as nullable number, equationCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":19,"signatureLabelEnd":31},{"label":"values","documentation":"list","signatureLabelOffset":33,"signatureLabelEnd":47},{"label":"occurrence","documentation":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":78},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":80,"signatureLabelEnd":103}],"documentation":"Returns the first offset of a value in a list.","SignatureStart":"List.PositionOfAny(","SignatureEnd":")"}]},{"export":"List.Positions","kind":"Function","summary":"Returns a list of offsets for the input.","signatures":[{"label":"List.Positions(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":27}],"documentation":"Returns a list of offsets for the input.","SignatureStart":"List.Positions(","SignatureEnd":")"}]},{"export":"List.Product","kind":"Function","summary":"Returns the product of the numbers in the list.","signatures":[{"label":"List.Product(numbersList as list)","parameters":[{"label":"numbersList","documentation":"list","signatureLabelOffset":13,"signatureLabelEnd":32}],"documentation":"Returns the product of the numbers in the list.","SignatureStart":"List.Product(","SignatureEnd":")"},{"label":"List.Product(numbersList as list, precision as nullable number)","parameters":[{"label":"numbersList","documentation":"list","signatureLabelOffset":13,"signatureLabelEnd":32},{"label":"precision","documentation":"nullable number","signatureLabelOffset":34,"signatureLabelEnd":62}],"documentation":"Returns the product of the numbers in the list.","SignatureStart":"List.Product(","SignatureEnd":")"}]},{"export":"List.Random","kind":"Function","summary":"Returns a list of random numbers.","signatures":[{"label":"List.Random(count as number)","parameters":[{"label":"count","documentation":"number","signatureLabelOffset":12,"signatureLabelEnd":27}],"documentation":"Returns a list of random numbers.","SignatureStart":"List.Random(","SignatureEnd":")"},{"label":"List.Random(count as number, seed as nullable number)","parameters":[{"label":"count","documentation":"number","signatureLabelOffset":12,"signatureLabelEnd":27},{"label":"seed","documentation":"nullable number","signatureLabelOffset":29,"signatureLabelEnd":52}],"documentation":"Returns a list of random numbers.","SignatureStart":"List.Random(","SignatureEnd":")"}]},{"export":"List.Range","kind":"Function","summary":"Returns a subset of the list beginning at an offset.","signatures":[{"label":"List.Range(list as list, offset as number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":11,"signatureLabelEnd":23},{"label":"offset","documentation":"number","signatureLabelOffset":25,"signatureLabelEnd":41}],"documentation":"Returns a subset of the list beginning at an offset.","SignatureStart":"List.Range(","SignatureEnd":")"},{"label":"List.Range(list as list, offset as number, count as nullable number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":11,"signatureLabelEnd":23},{"label":"offset","documentation":"number","signatureLabelOffset":25,"signatureLabelEnd":41},{"label":"count","documentation":"nullable number","signatureLabelOffset":43,"signatureLabelEnd":67}],"documentation":"Returns a subset of the list beginning at an offset.","SignatureStart":"List.Range(","SignatureEnd":")"}]},{"export":"List.RemoveFirstN","kind":"Function","summary":"Returns a list that skips the specified number of elements at the beginning of the list.","signatures":[{"label":"List.RemoveFirstN(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":18,"signatureLabelEnd":30}],"documentation":"Returns a list that skips the specified number of elements at the beginning of the list.","SignatureStart":"List.RemoveFirstN(","SignatureEnd":")"},{"label":"List.RemoveFirstN(list as list, countOrCondition as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":18,"signatureLabelEnd":30},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":32,"signatureLabelEnd":55}],"documentation":"Returns a list that skips the specified number of elements at the beginning of the list.","SignatureStart":"List.RemoveFirstN(","SignatureEnd":")"}]},{"export":"List.RemoveItems","kind":"Function","summary":"Removes items from list1 that are present in list.","signatures":[{"label":"List.RemoveItems(list1 as list, list2 as list)","parameters":[{"label":"list1","documentation":"list","signatureLabelOffset":17,"signatureLabelEnd":30},{"label":"list2","documentation":"list","signatureLabelOffset":32,"signatureLabelEnd":45}],"documentation":"Removes items from list1 that are present in list.","SignatureStart":"List.RemoveItems(","SignatureEnd":")"}]},{"export":"List.RemoveLastN","kind":"Function","summary":"Returns a list that removes the specified number of elements from the end of the list.","signatures":[{"label":"List.RemoveLastN(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":17,"signatureLabelEnd":29}],"documentation":"Returns a list that removes the specified number of elements from the end of the list.","SignatureStart":"List.RemoveLastN(","SignatureEnd":")"},{"label":"List.RemoveLastN(list as list, countOrCondition as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":31,"signatureLabelEnd":54}],"documentation":"Returns a list that removes the specified number of elements from the end of the list.","SignatureStart":"List.RemoveLastN(","SignatureEnd":")"}]},{"export":"List.RemoveMatchingItems","kind":"Function","summary":"Removes all occurrences of the input values.","signatures":[{"label":"List.RemoveMatchingItems(list1 as list, list2 as list)","parameters":[{"label":"list1","documentation":"list","signatureLabelOffset":25,"signatureLabelEnd":38},{"label":"list2","documentation":"list","signatureLabelOffset":40,"signatureLabelEnd":53}],"documentation":"Removes all occurrences of the input values.","SignatureStart":"List.RemoveMatchingItems(","SignatureEnd":")"},{"label":"List.RemoveMatchingItems(list1 as list, list2 as list, equationCriteria as any)","parameters":[{"label":"list1","documentation":"list","signatureLabelOffset":25,"signatureLabelEnd":38},{"label":"list2","documentation":"list","signatureLabelOffset":40,"signatureLabelEnd":53},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":55,"signatureLabelEnd":78}],"documentation":"Removes all occurrences of the input values.","SignatureStart":"List.RemoveMatchingItems(","SignatureEnd":")"}]},{"export":"List.RemoveNulls","kind":"Function","summary":"Removes all \"null\" values from the specified list.","signatures":[{"label":"List.RemoveNulls(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":17,"signatureLabelEnd":29}],"documentation":"Removes all \"null\" values from the specified list.","SignatureStart":"List.RemoveNulls(","SignatureEnd":")"}]},{"export":"List.RemoveRange","kind":"Function","summary":"Removes count number of values starting at the specified position.","signatures":[{"label":"List.RemoveRange(list as list, index as number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"label":"index","documentation":"number","signatureLabelOffset":31,"signatureLabelEnd":46}],"documentation":"Removes count number of values starting at the specified position.","SignatureStart":"List.RemoveRange(","SignatureEnd":")"},{"label":"List.RemoveRange(list as list, index as number, count as nullable number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"label":"index","documentation":"number","signatureLabelOffset":31,"signatureLabelEnd":46},{"label":"count","documentation":"nullable number","signatureLabelOffset":48,"signatureLabelEnd":72}],"documentation":"Removes count number of values starting at the specified position.","SignatureStart":"List.RemoveRange(","SignatureEnd":")"}]},{"export":"List.Repeat","kind":"Function","summary":"Returns a list that is count repetitions of the original list.","signatures":[{"label":"List.Repeat(list as list, count as number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":12,"signatureLabelEnd":24},{"label":"count","documentation":"number","signatureLabelOffset":26,"signatureLabelEnd":41}],"documentation":"Returns a list that is count repetitions of the original list.","SignatureStart":"List.Repeat(","SignatureEnd":")"}]},{"export":"List.ReplaceMatchingItems","kind":"Function","summary":"Applies each replacement of { old, new }.","signatures":[{"label":"List.ReplaceMatchingItems(list as list, replacements as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":26,"signatureLabelEnd":38},{"label":"replacements","documentation":"list","signatureLabelOffset":40,"signatureLabelEnd":60}],"documentation":"Applies each replacement of { old, new }.","SignatureStart":"List.ReplaceMatchingItems(","SignatureEnd":")"},{"label":"List.ReplaceMatchingItems(list as list, replacements as list, equationCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":26,"signatureLabelEnd":38},{"label":"replacements","documentation":"list","signatureLabelOffset":40,"signatureLabelEnd":60},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":62,"signatureLabelEnd":85}],"documentation":"Applies each replacement of { old, new }.","SignatureStart":"List.ReplaceMatchingItems(","SignatureEnd":")"}]},{"export":"List.ReplaceRange","kind":"Function","summary":"Replaces count number of values starting at position with the replacement values.","signatures":[{"label":"List.ReplaceRange(list as list, index as number, count as number, replaceWith as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":18,"signatureLabelEnd":30},{"label":"index","documentation":"number","signatureLabelOffset":32,"signatureLabelEnd":47},{"label":"count","documentation":"number","signatureLabelOffset":49,"signatureLabelEnd":64},{"label":"replaceWith","documentation":"list","signatureLabelOffset":66,"signatureLabelEnd":85}],"documentation":"Replaces count number of values starting at position with the replacement values.","SignatureStart":"List.ReplaceRange(","SignatureEnd":")"}]},{"export":"List.ReplaceValue","kind":"Function","summary":"Searches a list for the specified value and replaces it.","signatures":[{"label":"List.ReplaceValue(list as list, oldValue as any, newValue as any, replacer as function)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":18,"signatureLabelEnd":30},{"label":"oldValue","documentation":"any","signatureLabelOffset":32,"signatureLabelEnd":47},{"label":"newValue","documentation":"any","signatureLabelOffset":49,"signatureLabelEnd":64},{"label":"replacer","documentation":"function","signatureLabelOffset":66,"signatureLabelEnd":86}],"documentation":"Searches a list for the specified value and replaces it.","SignatureStart":"List.ReplaceValue(","SignatureEnd":")"}]},{"export":"List.Reverse","kind":"Function","summary":"Reverses the order of values in the list.","signatures":[{"label":"List.Reverse(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":13,"signatureLabelEnd":25}],"documentation":"Reverses the order of values in the list.","SignatureStart":"List.Reverse(","SignatureEnd":")"}]},{"export":"List.Select","kind":"Function","summary":"Returns a list of values that match the condition.","signatures":[{"label":"List.Select(list as list, selection as function)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":12,"signatureLabelEnd":24},{"label":"selection","documentation":"function","signatureLabelOffset":26,"signatureLabelEnd":47}],"documentation":"Returns a list of values that match the condition.","SignatureStart":"List.Select(","SignatureEnd":")"}]},{"export":"List.Single","kind":"Function","summary":"Returns the one list item for a list of length one, otherwise throws an exception.","signatures":[{"label":"List.Single(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":12,"signatureLabelEnd":24}],"documentation":"Returns the one list item for a list of length one, otherwise throws an exception.","SignatureStart":"List.Single(","SignatureEnd":")"}]},{"export":"List.SingleOrDefault","kind":"Function","summary":"Returns the one list item for a list of length one and the default value for an empty list.","signatures":[{"label":"List.SingleOrDefault(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":21,"signatureLabelEnd":33}],"documentation":"Returns the one list item for a list of length one and the default value for an empty list.","SignatureStart":"List.SingleOrDefault(","SignatureEnd":")"},{"label":"List.SingleOrDefault(list as list, default as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":21,"signatureLabelEnd":33},{"label":"default","documentation":"any","signatureLabelOffset":35,"signatureLabelEnd":49}],"documentation":"Returns the one list item for a list of length one and the default value for an empty list.","SignatureStart":"List.SingleOrDefault(","SignatureEnd":")"}]},{"export":"List.Skip","kind":"Function","summary":"Returns a list that skips the specified number of elements at the beginning of the list.","signatures":[{"label":"List.Skip(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22}],"documentation":"Returns a list that skips the specified number of elements at the beginning of the list.","SignatureStart":"List.Skip(","SignatureEnd":")"},{"label":"List.Skip(list as list, countOrCondition as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":47}],"documentation":"Returns a list that skips the specified number of elements at the beginning of the list.","SignatureStart":"List.Skip(","SignatureEnd":")"}]},{"export":"List.Sort","kind":"Function","summary":"Sorts a list of data according to the criteria specified.","signatures":[{"label":"List.Sort(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22}],"documentation":"Sorts a list of data according to the criteria specified.","SignatureStart":"List.Sort(","SignatureEnd":")"},{"label":"List.Sort(list as list, comparisonCriteria as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":24,"signatureLabelEnd":49}],"documentation":"Sorts a list of data according to the criteria specified.","SignatureStart":"List.Sort(","SignatureEnd":")"}]},{"export":"List.Split","kind":"Function","summary":"Splits the specified list into a list of lists using the specified page size.","signatures":[{"label":"List.Split(list as list, pageSize as number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":11,"signatureLabelEnd":23},{"label":"pageSize","documentation":"number","signatureLabelOffset":25,"signatureLabelEnd":43}],"documentation":"Splits the specified list into a list of lists using the specified page size.","SignatureStart":"List.Split(","SignatureEnd":")"}]},{"export":"List.StandardDeviation","kind":"Function","summary":"Returns a sample based estimate of the standard deviation.","signatures":[{"label":"List.StandardDeviation(numbersList as list)","parameters":[{"label":"numbersList","documentation":"list","signatureLabelOffset":23,"signatureLabelEnd":42}],"documentation":"Returns a sample based estimate of the standard deviation.","SignatureStart":"List.StandardDeviation(","SignatureEnd":")"}]},{"export":"List.Sum","kind":"Function","summary":"Returns the sum of the items in the list.","signatures":[{"label":"List.Sum(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":9,"signatureLabelEnd":21}],"documentation":"Returns the sum of the items in the list.","SignatureStart":"List.Sum(","SignatureEnd":")"},{"label":"List.Sum(list as list, precision as nullable number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"label":"precision","documentation":"nullable number","signatureLabelOffset":23,"signatureLabelEnd":51}],"documentation":"Returns the sum of the items in the list.","SignatureStart":"List.Sum(","SignatureEnd":")"}]},{"export":"List.Times","kind":"Function","summary":"Generates a list of time values given an initial value, count, and incremental duration value.","signatures":[{"label":"List.Times(start as time, count as number, step as duration)","parameters":[{"label":"start","documentation":"time","signatureLabelOffset":11,"signatureLabelEnd":24},{"label":"count","documentation":"number","signatureLabelOffset":26,"signatureLabelEnd":41},{"label":"step","documentation":"duration","signatureLabelOffset":43,"signatureLabelEnd":59}],"documentation":"Generates a list of time values given an initial value, count, and incremental duration value.","SignatureStart":"List.Times(","SignatureEnd":")"}]},{"export":"List.Transform","kind":"Function","summary":"Returns a new list of values computed from this list.","signatures":[{"label":"List.Transform(list as list, transform as function)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"label":"transform","documentation":"function","signatureLabelOffset":29,"signatureLabelEnd":50}],"documentation":"Returns a new list of values computed from this list.","SignatureStart":"List.Transform(","SignatureEnd":")"}]},{"export":"List.TransformMany","kind":"Function","summary":"Returns a list whose elements are transformed from the input list using specified functions.","signatures":[{"label":"List.TransformMany(list as list, collectionTransform as function, resultTransform as function)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":19,"signatureLabelEnd":31},{"label":"collectionTransform","documentation":"function","signatureLabelOffset":33,"signatureLabelEnd":64},{"label":"resultTransform","documentation":"function","signatureLabelOffset":66,"signatureLabelEnd":93}],"documentation":"Returns a list whose elements are transformed from the input list using specified functions.","SignatureStart":"List.TransformMany(","SignatureEnd":")"}]},{"export":"List.Type","kind":"Type","summary":"The type that represents all lists.","signatures":null},{"export":"List.Union","kind":"Function","summary":"Returns the union of the list values found in the input.","signatures":[{"label":"List.Union(lists as list)","parameters":[{"label":"lists","documentation":"list","signatureLabelOffset":11,"signatureLabelEnd":24}],"documentation":"Returns the union of the list values found in the input.","SignatureStart":"List.Union(","SignatureEnd":")"},{"label":"List.Union(lists as list, equationCriteria as any)","parameters":[{"label":"lists","documentation":"list","signatureLabelOffset":11,"signatureLabelEnd":24},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":26,"signatureLabelEnd":49}],"documentation":"Returns the union of the list values found in the input.","SignatureStart":"List.Union(","SignatureEnd":")"}]},{"export":"List.Zip","kind":"Function","summary":"Returns a list of lists by combining items at the same position in multiple lists.","signatures":[{"label":"List.Zip(lists as list)","parameters":[{"label":"lists","documentation":"list","signatureLabelOffset":9,"signatureLabelEnd":22}],"documentation":"Returns a list of lists by combining items at the same position in multiple lists.","SignatureStart":"List.Zip(","SignatureEnd":")"}]},{"export":"Logical.From","kind":"Function","summary":"Creates a logical from the given value.","signatures":[{"label":"Logical.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":25}],"documentation":"Creates a logical from the given value.","SignatureStart":"Logical.From(","SignatureEnd":")"}]},{"export":"Logical.FromText","kind":"Function","summary":"Creates a logical value from the text values \"true\" and \"false\".","signatures":[{"label":"Logical.FromText(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":17,"signatureLabelEnd":38}],"documentation":"Creates a logical value from the text values \"true\" and \"false\".","SignatureStart":"Logical.FromText(","SignatureEnd":")"}]},{"export":"Logical.ToText","kind":"Function","summary":"Returns the text \"true\" or \"false\" given a logical value.","signatures":[{"label":"Logical.ToText(logicalValue as nullable logical)","parameters":[{"label":"logicalValue","documentation":"nullable logical","signatureLabelOffset":15,"signatureLabelEnd":47}],"documentation":"Returns the text \"true\" or \"false\" given a logical value.","SignatureStart":"Logical.ToText(","SignatureEnd":")"}]},{"export":"Logical.Type","kind":"Type","summary":"The type that represents all logical values.","signatures":null},{"export":"MissingField.Error","kind":"Constant","summary":"An optional parameter in record and table functions indicating that missing fields should result in an error. (This is the default parameter value.)","signatures":null},{"export":"MissingField.Ignore","kind":"Constant","summary":"An optional parameter in record and table functions indicating that missing fields should be ignored.","signatures":null},{"export":"MissingField.Type","kind":"Type","summary":"Specifies the expected action for missing values in a row that contains columns less than expected.","signatures":null},{"export":"MissingField.UseNull","kind":"Constant","summary":"An optional parameter in record and table functions indicating that missing fields should be included as null values.","signatures":null},{"export":"None.Type","kind":"Type","summary":"None.Type","signatures":null},{"export":"Null.Type","kind":"Type","summary":"The type that represents null.","signatures":null},{"export":"Number.Abs","kind":"Function","summary":"Returns the absolute value of the number.","signatures":[{"label":"Number.Abs(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36}],"documentation":"Returns the absolute value of the number.","SignatureStart":"Number.Abs(","SignatureEnd":")"}]},{"export":"Number.Acos","kind":"Function","summary":"Returns the arccosine of the number.","signatures":[{"label":"Number.Acos(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"documentation":"Returns the arccosine of the number.","SignatureStart":"Number.Acos(","SignatureEnd":")"}]},{"export":"Number.Asin","kind":"Function","summary":"Returns the arcsine of the number.","signatures":[{"label":"Number.Asin(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"documentation":"Returns the arcsine of the number.","SignatureStart":"Number.Asin(","SignatureEnd":")"}]},{"export":"Number.Atan","kind":"Function","summary":"Returns the arctangent of the number.","signatures":[{"label":"Number.Atan(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"documentation":"Returns the arctangent of the number.","SignatureStart":"Number.Atan(","SignatureEnd":")"}]},{"export":"Number.Atan2","kind":"Function","summary":"Returns the arctangent of the division of the two numbers.","signatures":[{"label":"Number.Atan2(y as nullable number, x as nullable number)","parameters":[{"label":"y","documentation":"nullable number","signatureLabelOffset":13,"signatureLabelEnd":33},{"label":"x","documentation":"nullable number","signatureLabelOffset":35,"signatureLabelEnd":55}],"documentation":"Returns the arctangent of the division of the two numbers.","SignatureStart":"Number.Atan2(","SignatureEnd":")"}]},{"export":"Number.BitwiseAnd","kind":"Function","summary":"Returns the result of performing a bitwise \"And\" operation between the two inputs.","signatures":[{"label":"Number.BitwiseAnd(number1 as nullable number, number2 as nullable number)","parameters":[{"label":"number1","documentation":"nullable number","signatureLabelOffset":18,"signatureLabelEnd":44},{"label":"number2","documentation":"nullable number","signatureLabelOffset":46,"signatureLabelEnd":72}],"documentation":"Returns the result of performing a bitwise \"And\" operation between the two inputs.","SignatureStart":"Number.BitwiseAnd(","SignatureEnd":")"}]},{"export":"Number.BitwiseNot","kind":"Function","summary":"Returns a byte where each bit is the opposite of the input.","signatures":[{"label":"Number.BitwiseNot(number as any)","parameters":[{"label":"number","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":31}],"documentation":"Returns a byte where each bit is the opposite of the input.","SignatureStart":"Number.BitwiseNot(","SignatureEnd":")"}]},{"export":"Number.BitwiseOr","kind":"Function","summary":"Returns the result of performing a bitwise \"Or\" between the two inputs.","signatures":[{"label":"Number.BitwiseOr(number1 as nullable number, number2 as nullable number)","parameters":[{"label":"number1","documentation":"nullable number","signatureLabelOffset":17,"signatureLabelEnd":43},{"label":"number2","documentation":"nullable number","signatureLabelOffset":45,"signatureLabelEnd":71}],"documentation":"Returns the result of performing a bitwise \"Or\" between the two inputs.","SignatureStart":"Number.BitwiseOr(","SignatureEnd":")"}]},{"export":"Number.BitwiseShiftLeft","kind":"Function","summary":"Shifts the bits set to the left.","signatures":[{"label":"Number.BitwiseShiftLeft(number1 as nullable number, number2 as nullable number)","parameters":[{"label":"number1","documentation":"nullable number","signatureLabelOffset":24,"signatureLabelEnd":50},{"label":"number2","documentation":"nullable number","signatureLabelOffset":52,"signatureLabelEnd":78}],"documentation":"Shifts the bits set to the left.","SignatureStart":"Number.BitwiseShiftLeft(","SignatureEnd":")"}]},{"export":"Number.BitwiseShiftRight","kind":"Function","summary":"Shifts the bits set to the right.","signatures":[{"label":"Number.BitwiseShiftRight(number1 as nullable number, number2 as nullable number)","parameters":[{"label":"number1","documentation":"nullable number","signatureLabelOffset":25,"signatureLabelEnd":51},{"label":"number2","documentation":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":79}],"documentation":"Shifts the bits set to the right.","SignatureStart":"Number.BitwiseShiftRight(","SignatureEnd":")"}]},{"export":"Number.BitwiseXor","kind":"Function","summary":"Returns the result of performing a bitwise \"XOR\" (Exclusive-OR) between the two inputs.","signatures":[{"label":"Number.BitwiseXor(number1 as nullable number, number2 as nullable number)","parameters":[{"label":"number1","documentation":"nullable number","signatureLabelOffset":18,"signatureLabelEnd":44},{"label":"number2","documentation":"nullable number","signatureLabelOffset":46,"signatureLabelEnd":72}],"documentation":"Returns the result of performing a bitwise \"XOR\" (Exclusive-OR) between the two inputs.","SignatureStart":"Number.BitwiseXor(","SignatureEnd":")"}]},{"export":"Number.Combinations","kind":"Function","summary":"Returns the number of unique combinations.","signatures":[{"label":"Number.Combinations(setSize as nullable number, combinationSize as nullable number)","parameters":[{"label":"setSize","documentation":"nullable number","signatureLabelOffset":20,"signatureLabelEnd":46},{"label":"combinationSize","documentation":"nullable number","signatureLabelOffset":48,"signatureLabelEnd":82}],"documentation":"Returns the number of unique combinations.","SignatureStart":"Number.Combinations(","SignatureEnd":")"}]},{"export":"Number.Cos","kind":"Function","summary":"Returns the cosine of the number.","signatures":[{"label":"Number.Cos(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36}],"documentation":"Returns the cosine of the number.","SignatureStart":"Number.Cos(","SignatureEnd":")"}]},{"export":"Number.Cosh","kind":"Function","summary":"Returns the hyperbolic cosine of the number.","signatures":[{"label":"Number.Cosh(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"documentation":"Returns the hyperbolic cosine of the number.","SignatureStart":"Number.Cosh(","SignatureEnd":")"}]},{"export":"Number.E","kind":"Constant","summary":"A constant value that represents e.","signatures":null},{"export":"Number.Epsilon","kind":"Constant","summary":"A constant value that represents the smallest positive number a floating-point number can hold.","signatures":null},{"export":"Number.Exp","kind":"Function","summary":"Raises e to the given power.","signatures":[{"label":"Number.Exp(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36}],"documentation":"Raises e to the given power.","SignatureStart":"Number.Exp(","SignatureEnd":")"}]},{"export":"Number.Factorial","kind":"Function","summary":"Returns the factorial of the number.","signatures":[{"label":"Number.Factorial(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":17,"signatureLabelEnd":42}],"documentation":"Returns the factorial of the number.","SignatureStart":"Number.Factorial(","SignatureEnd":")"}]},{"export":"Number.From","kind":"Function","summary":"Creates a number from the given value.","signatures":[{"label":"Number.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":12,"signatureLabelEnd":24}],"documentation":"Creates a number from the given value.","SignatureStart":"Number.From(","SignatureEnd":")"},{"label":"Number.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":12,"signatureLabelEnd":24},{"label":"culture","documentation":"nullable text","signatureLabelOffset":26,"signatureLabelEnd":50}],"documentation":"Creates a number from the given value.","SignatureStart":"Number.From(","SignatureEnd":")"}]},{"export":"Number.FromText","kind":"Function","summary":"Creates numbers from common text formats (\"15\", \"3,423.10\", \"5.0E-10\").","signatures":[{"label":"Number.FromText(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":16,"signatureLabelEnd":37}],"documentation":"Creates numbers from common text formats (\"15\", \"3,423.10\", \"5.0E-10\").","SignatureStart":"Number.FromText(","SignatureEnd":")"},{"label":"Number.FromText(text as nullable text, culture as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":16,"signatureLabelEnd":37},{"label":"culture","documentation":"nullable text","signatureLabelOffset":39,"signatureLabelEnd":63}],"documentation":"Creates numbers from common text formats (\"15\", \"3,423.10\", \"5.0E-10\").","SignatureStart":"Number.FromText(","SignatureEnd":")"}]},{"export":"Number.IntegerDivide","kind":"Function","summary":"Divides two numbers and returns the integer portion of the result.","signatures":[{"label":"Number.IntegerDivide(number1 as nullable number, number2 as nullable number)","parameters":[{"label":"number1","documentation":"nullable number","signatureLabelOffset":21,"signatureLabelEnd":47},{"label":"number2","documentation":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":75}],"documentation":"Divides two numbers and returns the integer portion of the result.","SignatureStart":"Number.IntegerDivide(","SignatureEnd":")"},{"label":"Number.IntegerDivide(number1 as nullable number, number2 as nullable number, precision as nullable number)","parameters":[{"label":"number1","documentation":"nullable number","signatureLabelOffset":21,"signatureLabelEnd":47},{"label":"number2","documentation":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":75},{"label":"precision","documentation":"nullable number","signatureLabelOffset":77,"signatureLabelEnd":105}],"documentation":"Divides two numbers and returns the integer portion of the result.","SignatureStart":"Number.IntegerDivide(","SignatureEnd":")"}]},{"export":"Number.IsEven","kind":"Function","summary":"Indicates if the value is even.","signatures":[{"label":"Number.IsEven(number as number)","parameters":[{"label":"number","documentation":"number","signatureLabelOffset":14,"signatureLabelEnd":30}],"documentation":"Indicates if the value is even.","SignatureStart":"Number.IsEven(","SignatureEnd":")"}]},{"export":"Number.IsNaN","kind":"Function","summary":"Indicates if the value is NaN (Not a number).","signatures":[{"label":"Number.IsNaN(number as number)","parameters":[{"label":"number","documentation":"number","signatureLabelOffset":13,"signatureLabelEnd":29}],"documentation":"Indicates if the value is NaN (Not a number).","SignatureStart":"Number.IsNaN(","SignatureEnd":")"}]},{"export":"Number.IsOdd","kind":"Function","summary":"Indicates if the value is odd.","signatures":[{"label":"Number.IsOdd(number as number)","parameters":[{"label":"number","documentation":"number","signatureLabelOffset":13,"signatureLabelEnd":29}],"documentation":"Indicates if the value is odd.","SignatureStart":"Number.IsOdd(","SignatureEnd":")"}]},{"export":"Number.Ln","kind":"Function","summary":"Returns the natural logarithm of the number.","signatures":[{"label":"Number.Ln(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":10,"signatureLabelEnd":35}],"documentation":"Returns the natural logarithm of the number.","SignatureStart":"Number.Ln(","SignatureEnd":")"}]},{"export":"Number.Log","kind":"Function","summary":"Returns the logarithm of the number to the specified base (default e).","signatures":[{"label":"Number.Log(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36}],"documentation":"Returns the logarithm of the number to the specified base (default e).","SignatureStart":"Number.Log(","SignatureEnd":")"},{"label":"Number.Log(number as nullable number, base as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36},{"label":"base","documentation":"nullable number","signatureLabelOffset":38,"signatureLabelEnd":61}],"documentation":"Returns the logarithm of the number to the specified base (default e).","SignatureStart":"Number.Log(","SignatureEnd":")"}]},{"export":"Number.Log10","kind":"Function","summary":"Returns the base 10 logarithm of the number.","signatures":[{"label":"Number.Log10(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":13,"signatureLabelEnd":38}],"documentation":"Returns the base 10 logarithm of the number.","SignatureStart":"Number.Log10(","SignatureEnd":")"}]},{"export":"Number.Mod","kind":"Function","summary":"Integer divides two numbers and returns the remainder.","signatures":[{"label":"Number.Mod(number as nullable number, divisor as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36},{"label":"divisor","documentation":"nullable number","signatureLabelOffset":38,"signatureLabelEnd":64}],"documentation":"Integer divides two numbers and returns the remainder.","SignatureStart":"Number.Mod(","SignatureEnd":")"},{"label":"Number.Mod(number as nullable number, divisor as nullable number, precision as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36},{"label":"divisor","documentation":"nullable number","signatureLabelOffset":38,"signatureLabelEnd":64},{"label":"precision","documentation":"nullable number","signatureLabelOffset":66,"signatureLabelEnd":94}],"documentation":"Integer divides two numbers and returns the remainder.","SignatureStart":"Number.Mod(","SignatureEnd":")"}]},{"export":"Number.NaN","kind":"Constant","summary":"A constant value that represents  0 divided by 0.","signatures":null},{"export":"Number.NegativeInfinity","kind":"Constant","summary":"A constant value that represents -1 divided by 0.","signatures":null},{"export":"Number.Permutations","kind":"Function","summary":"Returns the number of permutations.","signatures":[{"label":"Number.Permutations(setSize as nullable number, permutationSize as nullable number)","parameters":[{"label":"setSize","documentation":"nullable number","signatureLabelOffset":20,"signatureLabelEnd":46},{"label":"permutationSize","documentation":"nullable number","signatureLabelOffset":48,"signatureLabelEnd":82}],"documentation":"Returns the number of permutations.","SignatureStart":"Number.Permutations(","SignatureEnd":")"}]},{"export":"Number.PI","kind":"Constant","summary":"A constant that represents pi.","signatures":null},{"export":"Number.PositiveInfinity","kind":"Constant","summary":"A constant value that represents 1 divided by 0.","signatures":null},{"export":"Number.Power","kind":"Function","summary":"Raises a number to the given power.","signatures":[{"label":"Number.Power(number as nullable number, power as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":13,"signatureLabelEnd":38},{"label":"power","documentation":"nullable number","signatureLabelOffset":40,"signatureLabelEnd":64}],"documentation":"Raises a number to the given power.","SignatureStart":"Number.Power(","SignatureEnd":")"}]},{"export":"Number.Random","kind":"Function","summary":"Returns a random number.","signatures":[{"label":"Number.Random()","parameters":[],"documentation":"Returns a random number.","SignatureStart":"Number.Random(","SignatureEnd":")"}]},{"export":"Number.RandomBetween","kind":"Function","summary":"Returns a random number between two numbers.","signatures":[{"label":"Number.RandomBetween(bottom as number, top as number)","parameters":[{"label":"bottom","documentation":"number","signatureLabelOffset":21,"signatureLabelEnd":37},{"label":"top","documentation":"number","signatureLabelOffset":39,"signatureLabelEnd":52}],"documentation":"Returns a random number between two numbers.","SignatureStart":"Number.RandomBetween(","SignatureEnd":")"}]},{"export":"Number.Round","kind":"Function","summary":"Returns the rounded number. The number of digits and rounding mode can be specified.","signatures":[{"label":"Number.Round(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":13,"signatureLabelEnd":38}],"documentation":"Returns the rounded number. The number of digits and rounding mode can be specified.","SignatureStart":"Number.Round(","SignatureEnd":")"},{"label":"Number.Round(number as nullable number, digits as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":13,"signatureLabelEnd":38},{"label":"digits","documentation":"nullable number","signatureLabelOffset":40,"signatureLabelEnd":65}],"documentation":"Returns the rounded number. The number of digits and rounding mode can be specified.","SignatureStart":"Number.Round(","SignatureEnd":")"},{"label":"Number.Round(number as nullable number, digits as nullable number, roundingMode as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":13,"signatureLabelEnd":38},{"label":"digits","documentation":"nullable number","signatureLabelOffset":40,"signatureLabelEnd":65},{"label":"roundingMode","documentation":"nullable number","signatureLabelOffset":67,"signatureLabelEnd":98}],"documentation":"Returns the rounded number. The number of digits and rounding mode can be specified.","SignatureStart":"Number.Round(","SignatureEnd":")"}]},{"export":"Number.RoundAwayFromZero","kind":"Function","summary":"Returns the result of rounding positive numbers up and negative numbers down. The number of digits can be specified.","signatures":[{"label":"Number.RoundAwayFromZero(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":25,"signatureLabelEnd":50}],"documentation":"Returns the result of rounding positive numbers up and negative numbers down. The number of digits can be specified.","SignatureStart":"Number.RoundAwayFromZero(","SignatureEnd":")"},{"label":"Number.RoundAwayFromZero(number as nullable number, digits as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":25,"signatureLabelEnd":50},{"label":"digits","documentation":"nullable number","signatureLabelOffset":52,"signatureLabelEnd":77}],"documentation":"Returns the result of rounding positive numbers up and negative numbers down. The number of digits can be specified.","SignatureStart":"Number.RoundAwayFromZero(","SignatureEnd":")"}]},{"export":"Number.RoundDown","kind":"Function","summary":"Returns the highest previous number. The number of digits can be specified.","signatures":[{"label":"Number.RoundDown(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":17,"signatureLabelEnd":42}],"documentation":"Returns the highest previous number. The number of digits can be specified.","SignatureStart":"Number.RoundDown(","SignatureEnd":")"},{"label":"Number.RoundDown(number as nullable number, digits as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":17,"signatureLabelEnd":42},{"label":"digits","documentation":"nullable number","signatureLabelOffset":44,"signatureLabelEnd":69}],"documentation":"Returns the highest previous number. The number of digits can be specified.","SignatureStart":"Number.RoundDown(","SignatureEnd":")"}]},{"export":"Number.RoundTowardZero","kind":"Function","summary":"Returns the result of rounding positive numbers down and negative numbers up. The number of digits can be specified.","signatures":[{"label":"Number.RoundTowardZero(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":23,"signatureLabelEnd":48}],"documentation":"Returns the result of rounding positive numbers down and negative numbers up. The number of digits can be specified.","SignatureStart":"Number.RoundTowardZero(","SignatureEnd":")"},{"label":"Number.RoundTowardZero(number as nullable number, digits as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":23,"signatureLabelEnd":48},{"label":"digits","documentation":"nullable number","signatureLabelOffset":50,"signatureLabelEnd":75}],"documentation":"Returns the result of rounding positive numbers down and negative numbers up. The number of digits can be specified.","SignatureStart":"Number.RoundTowardZero(","SignatureEnd":")"}]},{"export":"Number.RoundUp","kind":"Function","summary":"Returns the next highest number. The number of digits can be specified.","signatures":[{"label":"Number.RoundUp(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":15,"signatureLabelEnd":40}],"documentation":"Returns the next highest number. The number of digits can be specified.","SignatureStart":"Number.RoundUp(","SignatureEnd":")"},{"label":"Number.RoundUp(number as nullable number, digits as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":15,"signatureLabelEnd":40},{"label":"digits","documentation":"nullable number","signatureLabelOffset":42,"signatureLabelEnd":67}],"documentation":"Returns the next highest number. The number of digits can be specified.","SignatureStart":"Number.RoundUp(","SignatureEnd":")"}]},{"export":"Number.Sign","kind":"Function","summary":"Returns 1 if the number is positive, -1 if it is negative, and 0 if it is zero.","signatures":[{"label":"Number.Sign(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"documentation":"Returns 1 if the number is positive, -1 if it is negative, and 0 if it is zero.","SignatureStart":"Number.Sign(","SignatureEnd":")"}]},{"export":"Number.Sin","kind":"Function","summary":"Returns the sine of the number.","signatures":[{"label":"Number.Sin(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36}],"documentation":"Returns the sine of the number.","SignatureStart":"Number.Sin(","SignatureEnd":")"}]},{"export":"Number.Sinh","kind":"Function","summary":"Returns the hyperbolic sine of the number.","signatures":[{"label":"Number.Sinh(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"documentation":"Returns the hyperbolic sine of the number.","SignatureStart":"Number.Sinh(","SignatureEnd":")"}]},{"export":"Number.Sqrt","kind":"Function","summary":"Returns the square root of the number.","signatures":[{"label":"Number.Sqrt(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"documentation":"Returns the square root of the number.","SignatureStart":"Number.Sqrt(","SignatureEnd":")"}]},{"export":"Number.Tan","kind":"Function","summary":"Returns the tangent of the number.","signatures":[{"label":"Number.Tan(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36}],"documentation":"Returns the tangent of the number.","SignatureStart":"Number.Tan(","SignatureEnd":")"}]},{"export":"Number.Tanh","kind":"Function","summary":"Returns the hyperbolic tangent of the number.","signatures":[{"label":"Number.Tanh(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"documentation":"Returns the hyperbolic tangent of the number.","SignatureStart":"Number.Tanh(","SignatureEnd":")"}]},{"export":"Number.ToText","kind":"Function","summary":"Formats the given number as text.","signatures":[{"label":"Number.ToText(number as nullable number)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":14,"signatureLabelEnd":39}],"documentation":"Formats the given number as text.","SignatureStart":"Number.ToText(","SignatureEnd":")"},{"label":"Number.ToText(number as nullable number, format as nullable text)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":14,"signatureLabelEnd":39},{"label":"format","documentation":"nullable text","signatureLabelOffset":41,"signatureLabelEnd":64}],"documentation":"Formats the given number as text.","SignatureStart":"Number.ToText(","SignatureEnd":")"},{"label":"Number.ToText(number as nullable number, format as nullable text, culture as nullable text)","parameters":[{"label":"number","documentation":"nullable number","signatureLabelOffset":14,"signatureLabelEnd":39},{"label":"format","documentation":"nullable text","signatureLabelOffset":41,"signatureLabelEnd":64},{"label":"culture","documentation":"nullable text","signatureLabelOffset":66,"signatureLabelEnd":90}],"documentation":"Formats the given number as text.","SignatureStart":"Number.ToText(","SignatureEnd":")"}]},{"export":"Number.Type","kind":"Type","summary":"The type that represents all numbers.","signatures":null},{"export":"Occurrence.All","kind":"Constant","summary":"A list of positions of all occurrences of the found values is returned.","signatures":null},{"export":"Occurrence.First","kind":"Constant","summary":"The position of the first occurrence of the found value is returned.","signatures":null},{"export":"Occurrence.Last","kind":"Constant","summary":"The position of the last occurrence of the found value is returned.","signatures":null},{"export":"Occurrence.Optional","kind":"Constant","summary":"The item is expected to appear zero or one time in the input.","signatures":null},{"export":"Occurrence.Repeating","kind":"Constant","summary":"The item is expected to appear zero or more times in the input.","signatures":null},{"export":"Occurrence.Required","kind":"Constant","summary":"The item is expected to appear once in the input.","signatures":null},{"export":"Occurrence.Type","kind":"Type","summary":"Specifies the occurrence of an element in a sequence.","signatures":null},{"export":"Order.Ascending","kind":"Constant","summary":"Function type which sorts the list in ascending order.","signatures":null},{"export":"Order.Descending","kind":"Constant","summary":"Function type which sorts the list in descending order.","signatures":null},{"export":"Order.Type","kind":"Type","summary":"Specifies the direction of sorting.","signatures":null},{"export":"Password.Type","kind":"Type","summary":"The type that represents a text password.","signatures":null},{"export":"Percentage.From","kind":"Function","summary":"Returns a percentage value from the given value.","signatures":[{"label":"Percentage.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":16,"signatureLabelEnd":28}],"documentation":"Returns a percentage value from the given value.","SignatureStart":"Percentage.From(","SignatureEnd":")"},{"label":"Percentage.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":16,"signatureLabelEnd":28},{"label":"culture","documentation":"nullable text","signatureLabelOffset":30,"signatureLabelEnd":54}],"documentation":"Returns a percentage value from the given value.","SignatureStart":"Percentage.From(","SignatureEnd":")"}]},{"export":"Percentage.Type","kind":"Type","summary":"The type that represents percentage value.","signatures":null},{"export":"Precision.Decimal","kind":"Constant","summary":"An optional parameter for the built-in arthimetic operators to specify decimal precision.","signatures":null},{"export":"Precision.Double","kind":"Constant","summary":"An optional parameter for the built-in arthimetic operators to specify double precision.","signatures":null},{"export":"Precision.Type","kind":"Type","summary":"Specifies the precision of comparison.","signatures":null},{"export":"QuoteStyle.Csv","kind":"Constant","summary":"Quote characters indicate the start of a quoted string.  Nested quotes are indicated by two quote characters.","signatures":null},{"export":"QuoteStyle.None","kind":"Constant","summary":"Quote characters have no significance.","signatures":null},{"export":"QuoteStyle.Type","kind":"Type","summary":"Specifies the quote style.","signatures":null},{"export":"RData.FromBinary","kind":"Function","summary":"Returns a record of data frames from the RData file.","signatures":[{"label":"RData.FromBinary(stream as binary)","parameters":[{"label":"stream","documentation":"binary","signatureLabelOffset":17,"signatureLabelEnd":33}],"documentation":"Returns a record of data frames from the RData file.","SignatureStart":"RData.FromBinary(","SignatureEnd":")"}]},{"export":"Record.AddField","kind":"Function","summary":"Adds a field to a record.","signatures":[{"label":"Record.AddField(record as record, fieldName as text, value as any)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":16,"signatureLabelEnd":32},{"label":"fieldName","documentation":"text","signatureLabelOffset":34,"signatureLabelEnd":51},{"label":"value","documentation":"any","signatureLabelOffset":53,"signatureLabelEnd":65}],"documentation":"Adds a field to a record.","SignatureStart":"Record.AddField(","SignatureEnd":")"},{"label":"Record.AddField(record as record, fieldName as text, value as any, delayed as nullable logical)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":16,"signatureLabelEnd":32},{"label":"fieldName","documentation":"text","signatureLabelOffset":34,"signatureLabelEnd":51},{"label":"value","documentation":"any","signatureLabelOffset":53,"signatureLabelEnd":65},{"label":"delayed","documentation":"nullable logical","signatureLabelOffset":67,"signatureLabelEnd":94}],"documentation":"Adds a field to a record.","SignatureStart":"Record.AddField(","SignatureEnd":")"}]},{"export":"Record.Combine","kind":"Function","summary":"Combines the records in the given list.","signatures":[{"label":"Record.Combine(records as list)","parameters":[{"label":"records","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":30}],"documentation":"Combines the records in the given list.","SignatureStart":"Record.Combine(","SignatureEnd":")"}]},{"export":"Record.Field","kind":"Function","summary":"Returns the value of the specified field in a record.","signatures":[{"label":"Record.Field(record as record, field as text)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":13,"signatureLabelEnd":29},{"label":"field","documentation":"text","signatureLabelOffset":31,"signatureLabelEnd":44}],"documentation":"Returns the value of the specified field in a record.","SignatureStart":"Record.Field(","SignatureEnd":")"}]},{"export":"Record.FieldCount","kind":"Function","summary":"Returns the number of fields in the record.","signatures":[{"label":"Record.FieldCount(record as record)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":18,"signatureLabelEnd":34}],"documentation":"Returns the number of fields in the record.","SignatureStart":"Record.FieldCount(","SignatureEnd":")"}]},{"export":"Record.FieldNames","kind":"Function","summary":"Returns the names of the fields.","signatures":[{"label":"Record.FieldNames(record as record)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":18,"signatureLabelEnd":34}],"documentation":"Returns the names of the fields.","SignatureStart":"Record.FieldNames(","SignatureEnd":")"}]},{"export":"Record.FieldOrDefault","kind":"Function","summary":"Returns the value of the specified field in a record or the default value if the field is not found.","signatures":[{"label":"Record.FieldOrDefault(record as nullable record, field as text)","parameters":[{"label":"record","documentation":"nullable record","signatureLabelOffset":22,"signatureLabelEnd":47},{"label":"field","documentation":"text","signatureLabelOffset":49,"signatureLabelEnd":62}],"documentation":"Returns the value of the specified field in a record or the default value if the field is not found.","SignatureStart":"Record.FieldOrDefault(","SignatureEnd":")"},{"label":"Record.FieldOrDefault(record as nullable record, field as text, defaultValue as any)","parameters":[{"label":"record","documentation":"nullable record","signatureLabelOffset":22,"signatureLabelEnd":47},{"label":"field","documentation":"text","signatureLabelOffset":49,"signatureLabelEnd":62},{"label":"defaultValue","documentation":"any","signatureLabelOffset":64,"signatureLabelEnd":83}],"documentation":"Returns the value of the specified field in a record or the default value if the field is not found.","SignatureStart":"Record.FieldOrDefault(","SignatureEnd":")"}]},{"export":"Record.FieldValues","kind":"Function","summary":"Returns a list of the field values.","signatures":[{"label":"Record.FieldValues(record as record)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":19,"signatureLabelEnd":35}],"documentation":"Returns a list of the field values.","SignatureStart":"Record.FieldValues(","SignatureEnd":")"}]},{"export":"Record.FromList","kind":"Function","summary":"Returns a record given a list of field values and a set of fields.","signatures":[{"label":"Record.FromList(list as list, fields as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"label":"fields","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":43}],"documentation":"Returns a record given a list of field values and a set of fields.","SignatureStart":"Record.FromList(","SignatureEnd":")"}]},{"export":"Record.FromTable","kind":"Function","summary":"Creates a record from a table of the form {[Name = name, Value = value]}.","signatures":[{"label":"Record.FromTable(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":31}],"documentation":"Creates a record from a table of the form {[Name = name, Value = value]}.","SignatureStart":"Record.FromTable(","SignatureEnd":")"}]},{"export":"Record.HasFields","kind":"Function","summary":"Indicates whether the record has the specified fields.","signatures":[{"label":"Record.HasFields(record as record, fields as any)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":17,"signatureLabelEnd":33},{"label":"fields","documentation":"any","signatureLabelOffset":35,"signatureLabelEnd":48}],"documentation":"Indicates whether the record has the specified fields.","SignatureStart":"Record.HasFields(","SignatureEnd":")"}]},{"export":"Record.RemoveFields","kind":"Function","summary":"Removes the specified field(s) from the input record.","signatures":[{"label":"Record.RemoveFields(record as record, fields as any)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":20,"signatureLabelEnd":36},{"label":"fields","documentation":"any","signatureLabelOffset":38,"signatureLabelEnd":51}],"documentation":"Removes the specified field(s) from the input record.","SignatureStart":"Record.RemoveFields(","SignatureEnd":")"},{"label":"Record.RemoveFields(record as record, fields as any, missingField as nullable number)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":20,"signatureLabelEnd":36},{"label":"fields","documentation":"any","signatureLabelOffset":38,"signatureLabelEnd":51},{"label":"missingField","documentation":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":84}],"documentation":"Removes the specified field(s) from the input record.","SignatureStart":"Record.RemoveFields(","SignatureEnd":")"}]},{"export":"Record.RenameFields","kind":"Function","summary":"Applies rename(s) from a list in the form { old, new }.","signatures":[{"label":"Record.RenameFields(record as record, renames as list)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":20,"signatureLabelEnd":36},{"label":"renames","documentation":"list","signatureLabelOffset":38,"signatureLabelEnd":53}],"documentation":"Applies rename(s) from a list in the form { old, new }.","SignatureStart":"Record.RenameFields(","SignatureEnd":")"},{"label":"Record.RenameFields(record as record, renames as list, missingField as nullable number)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":20,"signatureLabelEnd":36},{"label":"renames","documentation":"list","signatureLabelOffset":38,"signatureLabelEnd":53},{"label":"missingField","documentation":"nullable number","signatureLabelOffset":55,"signatureLabelEnd":86}],"documentation":"Applies rename(s) from a list in the form { old, new }.","SignatureStart":"Record.RenameFields(","SignatureEnd":")"}]},{"export":"Record.ReorderFields","kind":"Function","summary":"Reorders the field(s) specified into the new order.","signatures":[{"label":"Record.ReorderFields(record as record, fieldOrder as list)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":21,"signatureLabelEnd":37},{"label":"fieldOrder","documentation":"list","signatureLabelOffset":39,"signatureLabelEnd":57}],"documentation":"Reorders the field(s) specified into the new order.","SignatureStart":"Record.ReorderFields(","SignatureEnd":")"},{"label":"Record.ReorderFields(record as record, fieldOrder as list, missingField as nullable number)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":21,"signatureLabelEnd":37},{"label":"fieldOrder","documentation":"list","signatureLabelOffset":39,"signatureLabelEnd":57},{"label":"missingField","documentation":"nullable number","signatureLabelOffset":59,"signatureLabelEnd":90}],"documentation":"Reorders the field(s) specified into the new order.","SignatureStart":"Record.ReorderFields(","SignatureEnd":")"}]},{"export":"Record.SelectFields","kind":"Function","summary":"Returns a record that contains only the specified fields.","signatures":[{"label":"Record.SelectFields(record as record, fields as any)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":20,"signatureLabelEnd":36},{"label":"fields","documentation":"any","signatureLabelOffset":38,"signatureLabelEnd":51}],"documentation":"Returns a record that contains only the specified fields.","SignatureStart":"Record.SelectFields(","SignatureEnd":")"},{"label":"Record.SelectFields(record as record, fields as any, missingField as nullable number)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":20,"signatureLabelEnd":36},{"label":"fields","documentation":"any","signatureLabelOffset":38,"signatureLabelEnd":51},{"label":"missingField","documentation":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":84}],"documentation":"Returns a record that contains only the specified fields.","SignatureStart":"Record.SelectFields(","SignatureEnd":")"}]},{"export":"Record.ToList","kind":"Function","summary":"Returns a list of values containing the field values of the input record.","signatures":[{"label":"Record.ToList(record as record)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":14,"signatureLabelEnd":30}],"documentation":"Returns a list of values containing the field values of the input record.","SignatureStart":"Record.ToList(","SignatureEnd":")"}]},{"export":"Record.ToTable","kind":"Function","summary":"Returns a table with each row being a field name and value of the input record.","signatures":[{"label":"Record.ToTable(record as record)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":15,"signatureLabelEnd":31}],"documentation":"Returns a table with each row being a field name and value of the input record.","SignatureStart":"Record.ToTable(","SignatureEnd":")"}]},{"export":"Record.TransformFields","kind":"Function","summary":"Returns a record after applying specified transformations.","signatures":[{"label":"Record.TransformFields(record as record, transformOperations as list)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":23,"signatureLabelEnd":39},{"label":"transformOperations","documentation":"list","signatureLabelOffset":41,"signatureLabelEnd":68}],"documentation":"Returns a record after applying specified transformations.","SignatureStart":"Record.TransformFields(","SignatureEnd":")"},{"label":"Record.TransformFields(record as record, transformOperations as list, missingField as nullable number)","parameters":[{"label":"record","documentation":"record","signatureLabelOffset":23,"signatureLabelEnd":39},{"label":"transformOperations","documentation":"list","signatureLabelOffset":41,"signatureLabelEnd":68},{"label":"missingField","documentation":"nullable number","signatureLabelOffset":70,"signatureLabelEnd":101}],"documentation":"Returns a record after applying specified transformations.","SignatureStart":"Record.TransformFields(","SignatureEnd":")"}]},{"export":"Record.Type","kind":"Type","summary":"The type that represents all records.","signatures":null},{"export":"RelativePosition.FromEnd","kind":"Constant","summary":"Indicates indexing should be done from the end of the input.","signatures":null},{"export":"RelativePosition.FromStart","kind":"Constant","summary":"Indicates indexing should be done from the start of the input.","signatures":null},{"export":"RelativePosition.Type","kind":"Type","summary":"Indicates whether indexing should be done from the start or end of the input.","signatures":null},{"export":"Replacer.ReplaceText","kind":"Function","summary":"Replaces text within the provided input.","signatures":[{"label":"Replacer.ReplaceText(text as nullable text, old as text, new as text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":21,"signatureLabelEnd":42},{"label":"old","documentation":"text","signatureLabelOffset":44,"signatureLabelEnd":55},{"label":"new","documentation":"text","signatureLabelOffset":57,"signatureLabelEnd":68}],"documentation":"Replaces text within the provided input.","SignatureStart":"Replacer.ReplaceText(","SignatureEnd":")"}]},{"export":"Replacer.ReplaceValue","kind":"Function","summary":"Replaces values within the provided input.","signatures":[{"label":"Replacer.ReplaceValue(value as any, old as any, new as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":22,"signatureLabelEnd":34},{"label":"old","documentation":"any","signatureLabelOffset":36,"signatureLabelEnd":46},{"label":"new","documentation":"any","signatureLabelOffset":48,"signatureLabelEnd":58}],"documentation":"Replaces values within the provided input.","SignatureStart":"Replacer.ReplaceValue(","SignatureEnd":")"}]},{"export":"RoundingMode.AwayFromZero","kind":"Constant","summary":"RoundingMode.AwayFromZero","signatures":null},{"export":"RoundingMode.Down","kind":"Constant","summary":"RoundingMode.Down","signatures":null},{"export":"RoundingMode.ToEven","kind":"Constant","summary":"RoundingMode.ToEven","signatures":null},{"export":"RoundingMode.TowardZero","kind":"Constant","summary":"RoundingMode.TowardZero","signatures":null},{"export":"RoundingMode.Type","kind":"Type","summary":"Specifies rounding direction when there is a tie between the possible numbers to round to.","signatures":null},{"export":"RoundingMode.Up","kind":"Constant","summary":"RoundingMode.Up","signatures":null},{"export":"RowExpression.Column","kind":"Function","summary":"Returns an AST that represents access to a column within a row expression.","signatures":[{"label":"RowExpression.Column(columnName as text)","parameters":[{"label":"columnName","documentation":"text","signatureLabelOffset":21,"signatureLabelEnd":39}],"documentation":"Returns an AST that represents access to a column within a row expression.","SignatureStart":"RowExpression.Column(","SignatureEnd":")"}]},{"export":"RowExpression.From","kind":"Function","summary":"Returns the AST for the body of a function.","signatures":[{"label":"RowExpression.From(function as function)","parameters":[{"label":"function","documentation":"function","signatureLabelOffset":19,"signatureLabelEnd":39}],"documentation":"Returns the AST for the body of a function.","SignatureStart":"RowExpression.From(","SignatureEnd":")"}]},{"export":"RowExpression.Row","kind":"Constant","summary":"An AST node representing the row in a row expression.","signatures":null},{"export":"Single.From","kind":"Function","summary":"Creates a Single from the given value.","signatures":[{"label":"Single.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":12,"signatureLabelEnd":24}],"documentation":"Creates a Single from the given value.","SignatureStart":"Single.From(","SignatureEnd":")"},{"label":"Single.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":12,"signatureLabelEnd":24},{"label":"culture","documentation":"nullable text","signatureLabelOffset":26,"signatureLabelEnd":50}],"documentation":"Creates a Single from the given value.","SignatureStart":"Single.From(","SignatureEnd":")"}]},{"export":"Single.Type","kind":"Type","summary":"The type that represents single precision floating point number.","signatures":null},{"export":"Splitter.SplitByNothing","kind":"Function","summary":"Returns a function that does no splitting, returning its argument as a single element list.","signatures":[{"label":"Splitter.SplitByNothing()","parameters":[],"documentation":"Returns a function that does no splitting, returning its argument as a single element list.","SignatureStart":"Splitter.SplitByNothing(","SignatureEnd":")"}]},{"export":"Splitter.SplitTextByAnyDelimiter","kind":"Function","summary":"Returns a function that splits text into a list of text at any of the specified delimiters.","signatures":[{"label":"Splitter.SplitTextByAnyDelimiter(delimiters as list)","parameters":[{"label":"delimiters","documentation":"list","signatureLabelOffset":33,"signatureLabelEnd":51}],"documentation":"Returns a function that splits text into a list of text at any of the specified delimiters.","SignatureStart":"Splitter.SplitTextByAnyDelimiter(","SignatureEnd":")"},{"label":"Splitter.SplitTextByAnyDelimiter(delimiters as list, quoteStyle as nullable number)","parameters":[{"label":"delimiters","documentation":"list","signatureLabelOffset":33,"signatureLabelEnd":51},{"label":"quoteStyle","documentation":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":82}],"documentation":"Returns a function that splits text into a list of text at any of the specified delimiters.","SignatureStart":"Splitter.SplitTextByAnyDelimiter(","SignatureEnd":")"},{"label":"Splitter.SplitTextByAnyDelimiter(delimiters as list, quoteStyle as nullable number, startAtEnd as nullable logical)","parameters":[{"label":"delimiters","documentation":"list","signatureLabelOffset":33,"signatureLabelEnd":51},{"label":"quoteStyle","documentation":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":82},{"label":"startAtEnd","documentation":"nullable logical","signatureLabelOffset":84,"signatureLabelEnd":114}],"documentation":"Returns a function that splits text into a list of text at any of the specified delimiters.","SignatureStart":"Splitter.SplitTextByAnyDelimiter(","SignatureEnd":")"}]},{"export":"Splitter.SplitTextByCharacterTransition","kind":"Function","summary":"Returns a function that splits text into a list of text according to a transition from one kind of character to another. The {0} and {1} parameters can either be a list of characters, or a function that takes a character and returns true/false.","signatures":[{"label":"Splitter.SplitTextByCharacterTransition(before as anynonnull, after as anynonnull)","parameters":[{"label":"before","documentation":"anynonnull","signatureLabelOffset":40,"signatureLabelEnd":60},{"label":"after","documentation":"anynonnull","signatureLabelOffset":62,"signatureLabelEnd":81}],"documentation":"Returns a function that splits text into a list of text according to a transition from one kind of character to another. The {0} and {1} parameters can either be a list of characters, or a function that takes a character and returns true/false.","SignatureStart":"Splitter.SplitTextByCharacterTransition(","SignatureEnd":")"}]},{"export":"Splitter.SplitTextByDelimiter","kind":"Function","summary":"Returns a function that splits text into a list of text according to the specified delimiter.","signatures":[{"label":"Splitter.SplitTextByDelimiter(delimiter as text)","parameters":[{"label":"delimiter","documentation":"text","signatureLabelOffset":30,"signatureLabelEnd":47}],"documentation":"Returns a function that splits text into a list of text according to the specified delimiter.","SignatureStart":"Splitter.SplitTextByDelimiter(","SignatureEnd":")"},{"label":"Splitter.SplitTextByDelimiter(delimiter as text, quoteStyle as nullable number)","parameters":[{"label":"delimiter","documentation":"text","signatureLabelOffset":30,"signatureLabelEnd":47},{"label":"quoteStyle","documentation":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":78}],"documentation":"Returns a function that splits text into a list of text according to the specified delimiter.","SignatureStart":"Splitter.SplitTextByDelimiter(","SignatureEnd":")"}]},{"export":"Splitter.SplitTextByEachDelimiter","kind":"Function","summary":"Returns a function that splits text into a list of text at each specified delimiter in sequence.","signatures":[{"label":"Splitter.SplitTextByEachDelimiter(delimiters as list)","parameters":[{"label":"delimiters","documentation":"list","signatureLabelOffset":34,"signatureLabelEnd":52}],"documentation":"Returns a function that splits text into a list of text at each specified delimiter in sequence.","SignatureStart":"Splitter.SplitTextByEachDelimiter(","SignatureEnd":")"},{"label":"Splitter.SplitTextByEachDelimiter(delimiters as list, quoteStyle as nullable number)","parameters":[{"label":"delimiters","documentation":"list","signatureLabelOffset":34,"signatureLabelEnd":52},{"label":"quoteStyle","documentation":"nullable number","signatureLabelOffset":54,"signatureLabelEnd":83}],"documentation":"Returns a function that splits text into a list of text at each specified delimiter in sequence.","SignatureStart":"Splitter.SplitTextByEachDelimiter(","SignatureEnd":")"},{"label":"Splitter.SplitTextByEachDelimiter(delimiters as list, quoteStyle as nullable number, startAtEnd as nullable logical)","parameters":[{"label":"delimiters","documentation":"list","signatureLabelOffset":34,"signatureLabelEnd":52},{"label":"quoteStyle","documentation":"nullable number","signatureLabelOffset":54,"signatureLabelEnd":83},{"label":"startAtEnd","documentation":"nullable logical","signatureLabelOffset":85,"signatureLabelEnd":115}],"documentation":"Returns a function that splits text into a list of text at each specified delimiter in sequence.","SignatureStart":"Splitter.SplitTextByEachDelimiter(","SignatureEnd":")"}]},{"export":"Splitter.SplitTextByLengths","kind":"Function","summary":"Returns a function that splits text into a list of text by each specified length.","signatures":[{"label":"Splitter.SplitTextByLengths(lengths as list)","parameters":[{"label":"lengths","documentation":"list","signatureLabelOffset":28,"signatureLabelEnd":43}],"documentation":"Returns a function that splits text into a list of text by each specified length.","SignatureStart":"Splitter.SplitTextByLengths(","SignatureEnd":")"},{"label":"Splitter.SplitTextByLengths(lengths as list, startAtEnd as nullable logical)","parameters":[{"label":"lengths","documentation":"list","signatureLabelOffset":28,"signatureLabelEnd":43},{"label":"startAtEnd","documentation":"nullable logical","signatureLabelOffset":45,"signatureLabelEnd":75}],"documentation":"Returns a function that splits text into a list of text by each specified length.","SignatureStart":"Splitter.SplitTextByLengths(","SignatureEnd":")"}]},{"export":"Splitter.SplitTextByPositions","kind":"Function","summary":"Returns a function that splits text into a list of text at each specified position.","signatures":[{"label":"Splitter.SplitTextByPositions(positions as list)","parameters":[{"label":"positions","documentation":"list","signatureLabelOffset":30,"signatureLabelEnd":47}],"documentation":"Returns a function that splits text into a list of text at each specified position.","SignatureStart":"Splitter.SplitTextByPositions(","SignatureEnd":")"},{"label":"Splitter.SplitTextByPositions(positions as list, startAtEnd as nullable logical)","parameters":[{"label":"positions","documentation":"list","signatureLabelOffset":30,"signatureLabelEnd":47},{"label":"startAtEnd","documentation":"nullable logical","signatureLabelOffset":49,"signatureLabelEnd":79}],"documentation":"Returns a function that splits text into a list of text at each specified position.","SignatureStart":"Splitter.SplitTextByPositions(","SignatureEnd":")"}]},{"export":"Splitter.SplitTextByRanges","kind":"Function","summary":"Returns a function that splits text into a list of text according to the specified offsets and lengths.","signatures":[{"label":"Splitter.SplitTextByRanges(ranges as list)","parameters":[{"label":"ranges","documentation":"list","signatureLabelOffset":27,"signatureLabelEnd":41}],"documentation":"Returns a function that splits text into a list of text according to the specified offsets and lengths.","SignatureStart":"Splitter.SplitTextByRanges(","SignatureEnd":")"},{"label":"Splitter.SplitTextByRanges(ranges as list, startAtEnd as nullable logical)","parameters":[{"label":"ranges","documentation":"list","signatureLabelOffset":27,"signatureLabelEnd":41},{"label":"startAtEnd","documentation":"nullable logical","signatureLabelOffset":43,"signatureLabelEnd":73}],"documentation":"Returns a function that splits text into a list of text according to the specified offsets and lengths.","SignatureStart":"Splitter.SplitTextByRanges(","SignatureEnd":")"}]},{"export":"Splitter.SplitTextByRepeatedLengths","kind":"Function","summary":"Returns a function that splits text into a list of text after the specified length repeatedly.","signatures":[{"label":"Splitter.SplitTextByRepeatedLengths(length as number)","parameters":[{"label":"length","documentation":"number","signatureLabelOffset":36,"signatureLabelEnd":52}],"documentation":"Returns a function that splits text into a list of text after the specified length repeatedly.","SignatureStart":"Splitter.SplitTextByRepeatedLengths(","SignatureEnd":")"},{"label":"Splitter.SplitTextByRepeatedLengths(length as number, startAtEnd as nullable logical)","parameters":[{"label":"length","documentation":"number","signatureLabelOffset":36,"signatureLabelEnd":52},{"label":"startAtEnd","documentation":"nullable logical","signatureLabelOffset":54,"signatureLabelEnd":84}],"documentation":"Returns a function that splits text into a list of text after the specified length repeatedly.","SignatureStart":"Splitter.SplitTextByRepeatedLengths(","SignatureEnd":")"}]},{"export":"Splitter.SplitTextByWhitespace","kind":"Function","summary":"Returns a function that splits text into a list of text at whitespace.","signatures":[{"label":"Splitter.SplitTextByWhitespace()","parameters":[],"documentation":"Returns a function that splits text into a list of text at whitespace.","SignatureStart":"Splitter.SplitTextByWhitespace(","SignatureEnd":")"},{"label":"Splitter.SplitTextByWhitespace(quoteStyle as nullable number)","parameters":[{"label":"quoteStyle","documentation":"nullable number","signatureLabelOffset":31,"signatureLabelEnd":60}],"documentation":"Returns a function that splits text into a list of text at whitespace.","SignatureStart":"Splitter.SplitTextByWhitespace(","SignatureEnd":")"}]},{"export":"SqlExpression.SchemaFrom","kind":"Function","summary":"SqlExpression.SchemaFrom","signatures":[{"label":"SqlExpression.SchemaFrom(schema as any)","parameters":[{"label":"schema","documentation":"any","signatureLabelOffset":25,"signatureLabelEnd":38}],"documentation":"SqlExpression.SchemaFrom","SignatureStart":"SqlExpression.SchemaFrom(","SignatureEnd":")"}]},{"export":"SqlExpression.ToExpression","kind":"Function","summary":"SqlExpression.ToExpression","signatures":[{"label":"SqlExpression.ToExpression(sql as text, environment as record)","parameters":[{"label":"sql","documentation":"text","signatureLabelOffset":27,"signatureLabelEnd":38},{"label":"environment","documentation":"record","signatureLabelOffset":40,"signatureLabelEnd":61}],"documentation":"SqlExpression.ToExpression","SignatureStart":"SqlExpression.ToExpression(","SignatureEnd":")"}]},{"export":"Table.AddColumn","kind":"Function","summary":"Adds a column with the specified name. The value is computed using the specified selection function with each row taken as an input.","signatures":[{"label":"Table.AddColumn(table as table, newColumnName as text, columnGenerator as function)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":30},{"label":"newColumnName","documentation":"text","signatureLabelOffset":32,"signatureLabelEnd":53},{"label":"columnGenerator","documentation":"function","signatureLabelOffset":55,"signatureLabelEnd":82}],"documentation":"Adds a column with the specified name. The value is computed using the specified selection function with each row taken as an input.","SignatureStart":"Table.AddColumn(","SignatureEnd":")"},{"label":"Table.AddColumn(table as table, newColumnName as text, columnGenerator as function, columnType as nullable type)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":30},{"label":"newColumnName","documentation":"text","signatureLabelOffset":32,"signatureLabelEnd":53},{"label":"columnGenerator","documentation":"function","signatureLabelOffset":55,"signatureLabelEnd":82},{"label":"columnType","documentation":"nullable type","signatureLabelOffset":84,"signatureLabelEnd":111}],"documentation":"Adds a column with the specified name. The value is computed using the specified selection function with each row taken as an input.","SignatureStart":"Table.AddColumn(","SignatureEnd":")"}]},{"export":"Table.AddIndexColumn","kind":"Function","summary":"Appends a column with explicit position values.","signatures":[{"label":"Table.AddIndexColumn(table as table, newColumnName as text)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"label":"newColumnName","documentation":"text","signatureLabelOffset":37,"signatureLabelEnd":58}],"documentation":"Appends a column with explicit position values.","SignatureStart":"Table.AddIndexColumn(","SignatureEnd":")"},{"label":"Table.AddIndexColumn(table as table, newColumnName as text, initialValue as nullable number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"label":"newColumnName","documentation":"text","signatureLabelOffset":37,"signatureLabelEnd":58},{"label":"initialValue","documentation":"nullable number","signatureLabelOffset":60,"signatureLabelEnd":91}],"documentation":"Appends a column with explicit position values.","SignatureStart":"Table.AddIndexColumn(","SignatureEnd":")"},{"label":"Table.AddIndexColumn(table as table, newColumnName as text, initialValue as nullable number, increment as nullable number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"label":"newColumnName","documentation":"text","signatureLabelOffset":37,"signatureLabelEnd":58},{"label":"initialValue","documentation":"nullable number","signatureLabelOffset":60,"signatureLabelEnd":91},{"label":"increment","documentation":"nullable number","signatureLabelOffset":93,"signatureLabelEnd":121}],"documentation":"Appends a column with explicit position values.","SignatureStart":"Table.AddIndexColumn(","SignatureEnd":")"}]},{"export":"Table.AddJoinColumn","kind":"Function","summary":"Performs a join between tables on supplied columns and produces the join result in a new column.","signatures":[{"label":"Table.AddJoinColumn(table1 as table, key1 as any, table2 as any, key2 as any, newColumnName as text)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":35},{"label":"key1","documentation":"any","signatureLabelOffset":37,"signatureLabelEnd":48},{"label":"table2","documentation":"any","signatureLabelOffset":50,"signatureLabelEnd":63},{"label":"key2","documentation":"any","signatureLabelOffset":65,"signatureLabelEnd":76},{"label":"newColumnName","documentation":"text","signatureLabelOffset":78,"signatureLabelEnd":99}],"documentation":"Performs a join between tables on supplied columns and produces the join result in a new column.","SignatureStart":"Table.AddJoinColumn(","SignatureEnd":")"}]},{"export":"Table.AddKey","kind":"Function","summary":"Add a key to a table, specify the subset of the table’s column names that defines the key, and specify whether the key is primary.","signatures":[{"label":"Table.AddKey(table as table, columns as list, isPrimary as logical)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":13,"signatureLabelEnd":27},{"label":"columns","documentation":"list","signatureLabelOffset":29,"signatureLabelEnd":44},{"label":"isPrimary","documentation":"logical","signatureLabelOffset":46,"signatureLabelEnd":66}],"documentation":"Add a key to a table, specify the subset of the table’s column names that defines the key, and specify whether the key is primary.","SignatureStart":"Table.AddKey(","SignatureEnd":")"}]},{"export":"Table.AggregateTableColumn","kind":"Function","summary":"Aggregates a column of tables into multiple columns in the containing table.","signatures":[{"label":"Table.AggregateTableColumn(table as table, column as text, aggregations as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"label":"column","documentation":"text","signatureLabelOffset":43,"signatureLabelEnd":57},{"label":"aggregations","documentation":"list","signatureLabelOffset":59,"signatureLabelEnd":79}],"documentation":"Aggregates a column of tables into multiple columns in the containing table.","SignatureStart":"Table.AggregateTableColumn(","SignatureEnd":")"}]},{"export":"Table.AlternateRows","kind":"Function","summary":"Keeps the initial offset then alternates taking and skipping the following rows.","signatures":[{"label":"Table.AlternateRows(table as table, offset as number, skip as number, take as number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"offset","documentation":"number","signatureLabelOffset":36,"signatureLabelEnd":52},{"label":"skip","documentation":"number","signatureLabelOffset":54,"signatureLabelEnd":68},{"label":"take","documentation":"number","signatureLabelOffset":70,"signatureLabelEnd":84}],"documentation":"Keeps the initial offset then alternates taking and skipping the following rows.","SignatureStart":"Table.AlternateRows(","SignatureEnd":")"}]},{"export":"Table.Buffer","kind":"Function","summary":"Buffers a table in memory, isolating it from external changes during evaluation.","signatures":[{"label":"Table.Buffer(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":13,"signatureLabelEnd":27}],"documentation":"Buffers a table in memory, isolating it from external changes during evaluation.","SignatureStart":"Table.Buffer(","SignatureEnd":")"}]},{"export":"Table.Column","kind":"Function","summary":"Returns a specified column of data from the table as a list.","signatures":[{"label":"Table.Column(table as table, column as text)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":13,"signatureLabelEnd":27},{"label":"column","documentation":"text","signatureLabelOffset":29,"signatureLabelEnd":43}],"documentation":"Returns a specified column of data from the table as a list.","SignatureStart":"Table.Column(","SignatureEnd":")"}]},{"export":"Table.ColumnCount","kind":"Function","summary":"Returns the number of columns in the table.","signatures":[{"label":"Table.ColumnCount(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32}],"documentation":"Returns the number of columns in the table.","SignatureStart":"Table.ColumnCount(","SignatureEnd":")"}]},{"export":"Table.ColumnNames","kind":"Function","summary":"Returns the column names as a list.","signatures":[{"label":"Table.ColumnNames(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32}],"documentation":"Returns the column names as a list.","SignatureStart":"Table.ColumnNames(","SignatureEnd":")"}]},{"export":"Table.ColumnsOfType","kind":"Function","summary":"Returns a list with the names of the columns that match the specified types.","signatures":[{"label":"Table.ColumnsOfType(table as table, listOfTypes as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"listOfTypes","documentation":"list","signatureLabelOffset":36,"signatureLabelEnd":55}],"documentation":"Returns a list with the names of the columns that match the specified types.","SignatureStart":"Table.ColumnsOfType(","SignatureEnd":")"}]},{"export":"Table.Combine","kind":"Function","summary":"Returns a table that is the result of merging a list of tables.","signatures":[{"label":"Table.Combine(tables as list)","parameters":[{"label":"tables","documentation":"list","signatureLabelOffset":14,"signatureLabelEnd":28}],"documentation":"Returns a table that is the result of merging a list of tables.","SignatureStart":"Table.Combine(","SignatureEnd":")"},{"label":"Table.Combine(tables as list, columns as any)","parameters":[{"label":"tables","documentation":"list","signatureLabelOffset":14,"signatureLabelEnd":28},{"label":"columns","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":44}],"documentation":"Returns a table that is the result of merging a list of tables.","SignatureStart":"Table.Combine(","SignatureEnd":")"}]},{"export":"Table.CombineColumns","kind":"Function","summary":"Combines the specified columns into a new column using the specified combiner function.","signatures":[{"label":"Table.CombineColumns(table as table, sourceColumns as list, combiner as function, column as text)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"label":"sourceColumns","documentation":"list","signatureLabelOffset":37,"signatureLabelEnd":58},{"label":"combiner","documentation":"function","signatureLabelOffset":60,"signatureLabelEnd":80},{"label":"column","documentation":"text","signatureLabelOffset":82,"signatureLabelEnd":96}],"documentation":"Combines the specified columns into a new column using the specified combiner function.","SignatureStart":"Table.CombineColumns(","SignatureEnd":")"}]},{"export":"Table.Contains","kind":"Function","summary":"Indicates whether the specified record appears as a row in the table.","signatures":[{"label":"Table.Contains(table as table, row as record)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":15,"signatureLabelEnd":29},{"label":"row","documentation":"record","signatureLabelOffset":31,"signatureLabelEnd":44}],"documentation":"Indicates whether the specified record appears as a row in the table.","SignatureStart":"Table.Contains(","SignatureEnd":")"},{"label":"Table.Contains(table as table, row as record, equationCriteria as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":15,"signatureLabelEnd":29},{"label":"row","documentation":"record","signatureLabelOffset":31,"signatureLabelEnd":44},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":46,"signatureLabelEnd":69}],"documentation":"Indicates whether the specified record appears as a row in the table.","SignatureStart":"Table.Contains(","SignatureEnd":")"}]},{"export":"Table.ContainsAll","kind":"Function","summary":"Indicates whether all of the specified records appear as rows in the table.","signatures":[{"label":"Table.ContainsAll(table as table, rows as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"rows","documentation":"list","signatureLabelOffset":34,"signatureLabelEnd":46}],"documentation":"Indicates whether all of the specified records appear as rows in the table.","SignatureStart":"Table.ContainsAll(","SignatureEnd":")"},{"label":"Table.ContainsAll(table as table, rows as list, equationCriteria as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"rows","documentation":"list","signatureLabelOffset":34,"signatureLabelEnd":46},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":48,"signatureLabelEnd":71}],"documentation":"Indicates whether all of the specified records appear as rows in the table.","SignatureStart":"Table.ContainsAll(","SignatureEnd":")"}]},{"export":"Table.ContainsAny","kind":"Function","summary":"Indicates whether any of the specified records appear as rows in the table.","signatures":[{"label":"Table.ContainsAny(table as table, rows as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"rows","documentation":"list","signatureLabelOffset":34,"signatureLabelEnd":46}],"documentation":"Indicates whether any of the specified records appear as rows in the table.","SignatureStart":"Table.ContainsAny(","SignatureEnd":")"},{"label":"Table.ContainsAny(table as table, rows as list, equationCriteria as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"rows","documentation":"list","signatureLabelOffset":34,"signatureLabelEnd":46},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":48,"signatureLabelEnd":71}],"documentation":"Indicates whether any of the specified records appear as rows in the table.","SignatureStart":"Table.ContainsAny(","SignatureEnd":")"}]},{"export":"Table.DemoteHeaders","kind":"Function","summary":"Demotes the column headers to the first row of values.","signatures":[{"label":"Table.DemoteHeaders(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34}],"documentation":"Demotes the column headers to the first row of values.","SignatureStart":"Table.DemoteHeaders(","SignatureEnd":")"}]},{"export":"Table.Distinct","kind":"Function","summary":"Removes duplicate rows from the table.","signatures":[{"label":"Table.Distinct(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":15,"signatureLabelEnd":29}],"documentation":"Removes duplicate rows from the table.","SignatureStart":"Table.Distinct(","SignatureEnd":")"},{"label":"Table.Distinct(table as table, equationCriteria as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":15,"signatureLabelEnd":29},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":31,"signatureLabelEnd":54}],"documentation":"Removes duplicate rows from the table.","SignatureStart":"Table.Distinct(","SignatureEnd":")"}]},{"export":"Table.DuplicateColumn","kind":"Function","summary":"Duplicates a column with the specified name. Values and type are copied from the source column.","signatures":[{"label":"Table.DuplicateColumn(table as table, columnName as text, newColumnName as text)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":22,"signatureLabelEnd":36},{"label":"columnName","documentation":"text","signatureLabelOffset":38,"signatureLabelEnd":56},{"label":"newColumnName","documentation":"text","signatureLabelOffset":58,"signatureLabelEnd":79}],"documentation":"Duplicates a column with the specified name. Values and type are copied from the source column.","SignatureStart":"Table.DuplicateColumn(","SignatureEnd":")"},{"label":"Table.DuplicateColumn(table as table, columnName as text, newColumnName as text, columnType as nullable type)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":22,"signatureLabelEnd":36},{"label":"columnName","documentation":"text","signatureLabelOffset":38,"signatureLabelEnd":56},{"label":"newColumnName","documentation":"text","signatureLabelOffset":58,"signatureLabelEnd":79},{"label":"columnType","documentation":"nullable type","signatureLabelOffset":81,"signatureLabelEnd":108}],"documentation":"Duplicates a column with the specified name. Values and type are copied from the source column.","SignatureStart":"Table.DuplicateColumn(","SignatureEnd":")"}]},{"export":"Table.ExpandListColumn","kind":"Function","summary":"Given a column of lists in a table, create a copy of a row for each value in its list.","signatures":[{"label":"Table.ExpandListColumn(table as table, column as text)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":23,"signatureLabelEnd":37},{"label":"column","documentation":"text","signatureLabelOffset":39,"signatureLabelEnd":53}],"documentation":"Given a column of lists in a table, create a copy of a row for each value in its list.","SignatureStart":"Table.ExpandListColumn(","SignatureEnd":")"}]},{"export":"Table.ExpandRecordColumn","kind":"Function","summary":"Expands a column of records into columns with each of the values.","signatures":[{"label":"Table.ExpandRecordColumn(table as table, column as text, fieldNames as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":25,"signatureLabelEnd":39},{"label":"column","documentation":"text","signatureLabelOffset":41,"signatureLabelEnd":55},{"label":"fieldNames","documentation":"list","signatureLabelOffset":57,"signatureLabelEnd":75}],"documentation":"Expands a column of records into columns with each of the values.","SignatureStart":"Table.ExpandRecordColumn(","SignatureEnd":")"},{"label":"Table.ExpandRecordColumn(table as table, column as text, fieldNames as list, newColumnNames as nullable list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":25,"signatureLabelEnd":39},{"label":"column","documentation":"text","signatureLabelOffset":41,"signatureLabelEnd":55},{"label":"fieldNames","documentation":"list","signatureLabelOffset":57,"signatureLabelEnd":75},{"label":"newColumnNames","documentation":"nullable list","signatureLabelOffset":77,"signatureLabelEnd":108}],"documentation":"Expands a column of records into columns with each of the values.","SignatureStart":"Table.ExpandRecordColumn(","SignatureEnd":")"}]},{"export":"Table.ExpandTableColumn","kind":"Function","summary":"Expands a column of records or a column of tables into multiple columns in the containing table.","signatures":[{"label":"Table.ExpandTableColumn(table as table, column as text, columnNames as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":24,"signatureLabelEnd":38},{"label":"column","documentation":"text","signatureLabelOffset":40,"signatureLabelEnd":54},{"label":"columnNames","documentation":"list","signatureLabelOffset":56,"signatureLabelEnd":75}],"documentation":"Expands a column of records or a column of tables into multiple columns in the containing table.","SignatureStart":"Table.ExpandTableColumn(","SignatureEnd":")"},{"label":"Table.ExpandTableColumn(table as table, column as text, columnNames as list, newColumnNames as nullable list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":24,"signatureLabelEnd":38},{"label":"column","documentation":"text","signatureLabelOffset":40,"signatureLabelEnd":54},{"label":"columnNames","documentation":"list","signatureLabelOffset":56,"signatureLabelEnd":75},{"label":"newColumnNames","documentation":"nullable list","signatureLabelOffset":77,"signatureLabelEnd":108}],"documentation":"Expands a column of records or a column of tables into multiple columns in the containing table.","SignatureStart":"Table.ExpandTableColumn(","SignatureEnd":")"}]},{"export":"Table.FillDown","kind":"Function","summary":"Propagates the value of a previous cell to the null-valued cells below in the column.","signatures":[{"label":"Table.FillDown(table as table, columns as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":15,"signatureLabelEnd":29},{"label":"columns","documentation":"list","signatureLabelOffset":31,"signatureLabelEnd":46}],"documentation":"Propagates the value of a previous cell to the null-valued cells below in the column.","SignatureStart":"Table.FillDown(","SignatureEnd":")"}]},{"export":"Table.FillUp","kind":"Function","summary":"Propagates the value of a cell to the null-valued cells above in the column.","signatures":[{"label":"Table.FillUp(table as table, columns as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":13,"signatureLabelEnd":27},{"label":"columns","documentation":"list","signatureLabelOffset":29,"signatureLabelEnd":44}],"documentation":"Propagates the value of a cell to the null-valued cells above in the column.","SignatureStart":"Table.FillUp(","SignatureEnd":")"}]},{"export":"Table.FilterWithDataTable","kind":"Function","summary":"Table.FilterWithDataTable","signatures":[{"label":"Table.FilterWithDataTable(table as table, dataTableIdentifier as text)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":26,"signatureLabelEnd":40},{"label":"dataTableIdentifier","documentation":"text","signatureLabelOffset":42,"signatureLabelEnd":69}],"documentation":"Table.FilterWithDataTable","SignatureStart":"Table.FilterWithDataTable(","SignatureEnd":")"}]},{"export":"Table.FindText","kind":"Function","summary":"Returns all the rows that contain the given text in the table.","signatures":[{"label":"Table.FindText(table as table, text as text)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":15,"signatureLabelEnd":29},{"label":"text","documentation":"text","signatureLabelOffset":31,"signatureLabelEnd":43}],"documentation":"Returns all the rows that contain the given text in the table.","SignatureStart":"Table.FindText(","SignatureEnd":")"}]},{"export":"Table.First","kind":"Function","summary":"Returns the first row or a specified default value.","signatures":[{"label":"Table.First(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":12,"signatureLabelEnd":26}],"documentation":"Returns the first row or a specified default value.","SignatureStart":"Table.First(","SignatureEnd":")"},{"label":"Table.First(table as table, default as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"label":"default","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":42}],"documentation":"Returns the first row or a specified default value.","SignatureStart":"Table.First(","SignatureEnd":")"}]},{"export":"Table.FirstN","kind":"Function","summary":"Returns the first count rows specified.","signatures":[{"label":"Table.FirstN(table as table, countOrCondition as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":13,"signatureLabelEnd":27},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":29,"signatureLabelEnd":52}],"documentation":"Returns the first count rows specified.","SignatureStart":"Table.FirstN(","SignatureEnd":")"}]},{"export":"Table.FirstValue","kind":"Function","summary":"Returns the first column of the first row of the table or a specified default value.","signatures":[{"label":"Table.FirstValue(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":31}],"documentation":"Returns the first column of the first row of the table or a specified default value.","SignatureStart":"Table.FirstValue(","SignatureEnd":")"},{"label":"Table.FirstValue(table as table, default as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"label":"default","documentation":"any","signatureLabelOffset":33,"signatureLabelEnd":47}],"documentation":"Returns the first column of the first row of the table or a specified default value.","SignatureStart":"Table.FirstValue(","SignatureEnd":")"}]},{"export":"Table.FromColumns","kind":"Function","summary":"Creates a table from a list of columns and specified values.","signatures":[{"label":"Table.FromColumns(lists as list)","parameters":[{"label":"lists","documentation":"list","signatureLabelOffset":18,"signatureLabelEnd":31}],"documentation":"Creates a table from a list of columns and specified values.","SignatureStart":"Table.FromColumns(","SignatureEnd":")"},{"label":"Table.FromColumns(lists as list, columns as any)","parameters":[{"label":"lists","documentation":"list","signatureLabelOffset":18,"signatureLabelEnd":31},{"label":"columns","documentation":"any","signatureLabelOffset":33,"signatureLabelEnd":47}],"documentation":"Creates a table from a list of columns and specified values.","SignatureStart":"Table.FromColumns(","SignatureEnd":")"}]},{"export":"Table.FromList","kind":"Function","summary":"Converts a list into a table by applying the specified splitting function to each item in the list.","signatures":[{"label":"Table.FromList(list as list)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":27}],"documentation":"Converts a list into a table by applying the specified splitting function to each item in the list.","SignatureStart":"Table.FromList(","SignatureEnd":")"},{"label":"Table.FromList(list as list, splitter as nullable function)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"label":"splitter","documentation":"nullable function","signatureLabelOffset":29,"signatureLabelEnd":58}],"documentation":"Converts a list into a table by applying the specified splitting function to each item in the list.","SignatureStart":"Table.FromList(","SignatureEnd":")"},{"label":"Table.FromList(list as list, splitter as nullable function, columns as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"label":"splitter","documentation":"nullable function","signatureLabelOffset":29,"signatureLabelEnd":58},{"label":"columns","documentation":"any","signatureLabelOffset":60,"signatureLabelEnd":74}],"documentation":"Converts a list into a table by applying the specified splitting function to each item in the list.","SignatureStart":"Table.FromList(","SignatureEnd":")"},{"label":"Table.FromList(list as list, splitter as nullable function, columns as any, default as any)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"label":"splitter","documentation":"nullable function","signatureLabelOffset":29,"signatureLabelEnd":58},{"label":"columns","documentation":"any","signatureLabelOffset":60,"signatureLabelEnd":74},{"label":"default","documentation":"any","signatureLabelOffset":76,"signatureLabelEnd":90}],"documentation":"Converts a list into a table by applying the specified splitting function to each item in the list.","SignatureStart":"Table.FromList(","SignatureEnd":")"},{"label":"Table.FromList(list as list, splitter as nullable function, columns as any, default as any, extraValues as nullable number)","parameters":[{"label":"list","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"label":"splitter","documentation":"nullable function","signatureLabelOffset":29,"signatureLabelEnd":58},{"label":"columns","documentation":"any","signatureLabelOffset":60,"signatureLabelEnd":74},{"label":"default","documentation":"any","signatureLabelOffset":76,"signatureLabelEnd":90},{"label":"extraValues","documentation":"nullable number","signatureLabelOffset":92,"signatureLabelEnd":122}],"documentation":"Converts a list into a table by applying the specified splitting function to each item in the list.","SignatureStart":"Table.FromList(","SignatureEnd":")"}]},{"export":"Table.FromPartitions","kind":"Function","summary":"Returns a table that is the result of combining a set of partitioned tables.","signatures":[{"label":"Table.FromPartitions(partitionColumn as text, partitions as list)","parameters":[{"label":"partitionColumn","documentation":"text","signatureLabelOffset":21,"signatureLabelEnd":44},{"label":"partitions","documentation":"list","signatureLabelOffset":46,"signatureLabelEnd":64}],"documentation":"Returns a table that is the result of combining a set of partitioned tables.","SignatureStart":"Table.FromPartitions(","SignatureEnd":")"},{"label":"Table.FromPartitions(partitionColumn as text, partitions as list, partitionColumnType as nullable type)","parameters":[{"label":"partitionColumn","documentation":"text","signatureLabelOffset":21,"signatureLabelEnd":44},{"label":"partitions","documentation":"list","signatureLabelOffset":46,"signatureLabelEnd":64},{"label":"partitionColumnType","documentation":"nullable type","signatureLabelOffset":66,"signatureLabelEnd":102}],"documentation":"Returns a table that is the result of combining a set of partitioned tables.","SignatureStart":"Table.FromPartitions(","SignatureEnd":")"}]},{"export":"Table.FromRecords","kind":"Function","summary":"Converts a list of records into a table.","signatures":[{"label":"Table.FromRecords(records as list)","parameters":[{"label":"records","documentation":"list","signatureLabelOffset":18,"signatureLabelEnd":33}],"documentation":"Converts a list of records into a table.","SignatureStart":"Table.FromRecords(","SignatureEnd":")"},{"label":"Table.FromRecords(records as list, columns as any)","parameters":[{"label":"records","documentation":"list","signatureLabelOffset":18,"signatureLabelEnd":33},{"label":"columns","documentation":"any","signatureLabelOffset":35,"signatureLabelEnd":49}],"documentation":"Converts a list of records into a table.","SignatureStart":"Table.FromRecords(","SignatureEnd":")"},{"label":"Table.FromRecords(records as list, columns as any, missingField as nullable number)","parameters":[{"label":"records","documentation":"list","signatureLabelOffset":18,"signatureLabelEnd":33},{"label":"columns","documentation":"any","signatureLabelOffset":35,"signatureLabelEnd":49},{"label":"missingField","documentation":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":82}],"documentation":"Converts a list of records into a table.","SignatureStart":"Table.FromRecords(","SignatureEnd":")"}]},{"export":"Table.FromRows","kind":"Function","summary":"Creates a table from a list of row values and optional columns","signatures":[{"label":"Table.FromRows(rows as list)","parameters":[{"label":"rows","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":27}],"documentation":"Creates a table from a list of row values and optional columns","SignatureStart":"Table.FromRows(","SignatureEnd":")"},{"label":"Table.FromRows(rows as list, columns as any)","parameters":[{"label":"rows","documentation":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"label":"columns","documentation":"any","signatureLabelOffset":29,"signatureLabelEnd":43}],"documentation":"Creates a table from a list of row values and optional columns","SignatureStart":"Table.FromRows(","SignatureEnd":")"}]},{"export":"Table.FromValue","kind":"Function","summary":"Creates a table with a column from the provided value(s).","signatures":[{"label":"Table.FromValue(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":16,"signatureLabelEnd":28}],"documentation":"Creates a table with a column from the provided value(s).","SignatureStart":"Table.FromValue(","SignatureEnd":")"},{"label":"Table.FromValue(value as any, options as nullable record)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":16,"signatureLabelEnd":28},{"label":"options","documentation":"nullable record","signatureLabelOffset":30,"signatureLabelEnd":56}],"documentation":"Creates a table with a column from the provided value(s).","SignatureStart":"Table.FromValue(","SignatureEnd":")"}]},{"export":"Table.Group","kind":"Function","summary":"Groups rows in the table that have the same key.","signatures":[{"label":"Table.Group(table as table, key as any, aggregatedColumns as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"label":"key","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":38},{"label":"aggregatedColumns","documentation":"list","signatureLabelOffset":40,"signatureLabelEnd":65}],"documentation":"Groups rows in the table that have the same key.","SignatureStart":"Table.Group(","SignatureEnd":")"},{"label":"Table.Group(table as table, key as any, aggregatedColumns as list, groupKind as nullable number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"label":"key","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":38},{"label":"aggregatedColumns","documentation":"list","signatureLabelOffset":40,"signatureLabelEnd":65},{"label":"groupKind","documentation":"nullable number","signatureLabelOffset":67,"signatureLabelEnd":95}],"documentation":"Groups rows in the table that have the same key.","SignatureStart":"Table.Group(","SignatureEnd":")"},{"label":"Table.Group(table as table, key as any, aggregatedColumns as list, groupKind as nullable number, comparer as nullable function)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"label":"key","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":38},{"label":"aggregatedColumns","documentation":"list","signatureLabelOffset":40,"signatureLabelEnd":65},{"label":"groupKind","documentation":"nullable number","signatureLabelOffset":67,"signatureLabelEnd":95},{"label":"comparer","documentation":"nullable function","signatureLabelOffset":97,"signatureLabelEnd":126}],"documentation":"Groups rows in the table that have the same key.","SignatureStart":"Table.Group(","SignatureEnd":")"}]},{"export":"Table.HasColumns","kind":"Function","summary":"indicates whether the table contains the specified column(s).","signatures":[{"label":"Table.HasColumns(table as table, columns as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"label":"columns","documentation":"any","signatureLabelOffset":33,"signatureLabelEnd":47}],"documentation":"indicates whether the table contains the specified column(s).","SignatureStart":"Table.HasColumns(","SignatureEnd":")"}]},{"export":"Table.InsertRows","kind":"Function","summary":"Inserts a list of rows into the table at the specified position.","signatures":[{"label":"Table.InsertRows(table as table, offset as number, rows as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"label":"offset","documentation":"number","signatureLabelOffset":33,"signatureLabelEnd":49},{"label":"rows","documentation":"list","signatureLabelOffset":51,"signatureLabelEnd":63}],"documentation":"Inserts a list of rows into the table at the specified position.","SignatureStart":"Table.InsertRows(","SignatureEnd":")"}]},{"export":"Table.IsDistinct","kind":"Function","summary":"Indicates whether the table contains only distinct rows (no duplicates).","signatures":[{"label":"Table.IsDistinct(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":31}],"documentation":"Indicates whether the table contains only distinct rows (no duplicates).","SignatureStart":"Table.IsDistinct(","SignatureEnd":")"},{"label":"Table.IsDistinct(table as table, comparisonCriteria as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":33,"signatureLabelEnd":58}],"documentation":"Indicates whether the table contains only distinct rows (no duplicates).","SignatureStart":"Table.IsDistinct(","SignatureEnd":")"}]},{"export":"Table.IsEmpty","kind":"Function","summary":"Indicates whether the table contains any rows.","signatures":[{"label":"Table.IsEmpty(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":14,"signatureLabelEnd":28}],"documentation":"Indicates whether the table contains any rows.","SignatureStart":"Table.IsEmpty(","SignatureEnd":")"}]},{"export":"Table.Join","kind":"Function","summary":"Joins the rows from the two tables that match based on the given keys.","signatures":[{"label":"Table.Join(table1 as table, key1 as any, table2 as table, key2 as any)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":11,"signatureLabelEnd":26},{"label":"key1","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":39},{"label":"table2","documentation":"table","signatureLabelOffset":41,"signatureLabelEnd":56},{"label":"key2","documentation":"any","signatureLabelOffset":58,"signatureLabelEnd":69}],"documentation":"Joins the rows from the two tables that match based on the given keys.","SignatureStart":"Table.Join(","SignatureEnd":")"},{"label":"Table.Join(table1 as table, key1 as any, table2 as table, key2 as any, joinKind as nullable number)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":11,"signatureLabelEnd":26},{"label":"key1","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":39},{"label":"table2","documentation":"table","signatureLabelOffset":41,"signatureLabelEnd":56},{"label":"key2","documentation":"any","signatureLabelOffset":58,"signatureLabelEnd":69},{"label":"joinKind","documentation":"nullable number","signatureLabelOffset":71,"signatureLabelEnd":98}],"documentation":"Joins the rows from the two tables that match based on the given keys.","SignatureStart":"Table.Join(","SignatureEnd":")"},{"label":"Table.Join(table1 as table, key1 as any, table2 as table, key2 as any, joinKind as nullable number, joinAlgorithm as nullable number)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":11,"signatureLabelEnd":26},{"label":"key1","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":39},{"label":"table2","documentation":"table","signatureLabelOffset":41,"signatureLabelEnd":56},{"label":"key2","documentation":"any","signatureLabelOffset":58,"signatureLabelEnd":69},{"label":"joinKind","documentation":"nullable number","signatureLabelOffset":71,"signatureLabelEnd":98},{"label":"joinAlgorithm","documentation":"nullable number","signatureLabelOffset":100,"signatureLabelEnd":132}],"documentation":"Joins the rows from the two tables that match based on the given keys.","SignatureStart":"Table.Join(","SignatureEnd":")"},{"label":"Table.Join(table1 as table, key1 as any, table2 as table, key2 as any, joinKind as nullable number, joinAlgorithm as nullable number, keyEqualityComparers as nullable list)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":11,"signatureLabelEnd":26},{"label":"key1","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":39},{"label":"table2","documentation":"table","signatureLabelOffset":41,"signatureLabelEnd":56},{"label":"key2","documentation":"any","signatureLabelOffset":58,"signatureLabelEnd":69},{"label":"joinKind","documentation":"nullable number","signatureLabelOffset":71,"signatureLabelEnd":98},{"label":"joinAlgorithm","documentation":"nullable number","signatureLabelOffset":100,"signatureLabelEnd":132},{"label":"keyEqualityComparers","documentation":"nullable list","signatureLabelOffset":134,"signatureLabelEnd":171}],"documentation":"Joins the rows from the two tables that match based on the given keys.","SignatureStart":"Table.Join(","SignatureEnd":")"}]},{"export":"Table.Keys","kind":"Function","summary":"Table.Keys","signatures":[{"label":"Table.Keys(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":11,"signatureLabelEnd":25}],"documentation":"Table.Keys","SignatureStart":"Table.Keys(","SignatureEnd":")"}]},{"export":"Table.Last","kind":"Function","summary":"Returns the last row or a specified default value.","signatures":[{"label":"Table.Last(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":11,"signatureLabelEnd":25}],"documentation":"Returns the last row or a specified default value.","SignatureStart":"Table.Last(","SignatureEnd":")"},{"label":"Table.Last(table as table, default as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":11,"signatureLabelEnd":25},{"label":"default","documentation":"any","signatureLabelOffset":27,"signatureLabelEnd":41}],"documentation":"Returns the last row or a specified default value.","SignatureStart":"Table.Last(","SignatureEnd":")"}]},{"export":"Table.LastN","kind":"Function","summary":"Returns the last specified number of rows.","signatures":[{"label":"Table.LastN(table as table, countOrCondition as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":51}],"documentation":"Returns the last specified number of rows.","SignatureStart":"Table.LastN(","SignatureEnd":")"}]},{"export":"Table.MatchesAllRows","kind":"Function","summary":"Indicates whether all the rows in the table meet the given condition.","signatures":[{"label":"Table.MatchesAllRows(table as table, condition as function)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"label":"condition","documentation":"function","signatureLabelOffset":37,"signatureLabelEnd":58}],"documentation":"Indicates whether all the rows in the table meet the given condition.","SignatureStart":"Table.MatchesAllRows(","SignatureEnd":")"}]},{"export":"Table.MatchesAnyRows","kind":"Function","summary":"Indicates whether any the rows in the table meet the given condition.","signatures":[{"label":"Table.MatchesAnyRows(table as table, condition as function)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"label":"condition","documentation":"function","signatureLabelOffset":37,"signatureLabelEnd":58}],"documentation":"Indicates whether any the rows in the table meet the given condition.","SignatureStart":"Table.MatchesAnyRows(","SignatureEnd":")"}]},{"export":"Table.Max","kind":"Function","summary":"Returns the largest row or default value using the given criteria.","signatures":[{"label":"Table.Max(table as table, comparisonCriteria as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":10,"signatureLabelEnd":24},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":26,"signatureLabelEnd":51}],"documentation":"Returns the largest row or default value using the given criteria.","SignatureStart":"Table.Max(","SignatureEnd":")"},{"label":"Table.Max(table as table, comparisonCriteria as any, default as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":10,"signatureLabelEnd":24},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":26,"signatureLabelEnd":51},{"label":"default","documentation":"any","signatureLabelOffset":53,"signatureLabelEnd":67}],"documentation":"Returns the largest row or default value using the given criteria.","SignatureStart":"Table.Max(","SignatureEnd":")"}]},{"export":"Table.MaxN","kind":"Function","summary":"Returns the largest row(s) using the given criteria.","signatures":[{"label":"Table.MaxN(table as table, comparisonCriteria as any, countOrCondition as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":11,"signatureLabelEnd":25},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":27,"signatureLabelEnd":52},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":54,"signatureLabelEnd":77}],"documentation":"Returns the largest row(s) using the given criteria.","SignatureStart":"Table.MaxN(","SignatureEnd":")"}]},{"export":"Table.Min","kind":"Function","summary":"Returns the smallest row or a default value using the given criteria.","signatures":[{"label":"Table.Min(table as table, comparisonCriteria as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":10,"signatureLabelEnd":24},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":26,"signatureLabelEnd":51}],"documentation":"Returns the smallest row or a default value using the given criteria.","SignatureStart":"Table.Min(","SignatureEnd":")"},{"label":"Table.Min(table as table, comparisonCriteria as any, default as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":10,"signatureLabelEnd":24},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":26,"signatureLabelEnd":51},{"label":"default","documentation":"any","signatureLabelOffset":53,"signatureLabelEnd":67}],"documentation":"Returns the smallest row or a default value using the given criteria.","SignatureStart":"Table.Min(","SignatureEnd":")"}]},{"export":"Table.MinN","kind":"Function","summary":"Returns the smallest row(s) using the given criteria.","signatures":[{"label":"Table.MinN(table as table, comparisonCriteria as any, countOrCondition as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":11,"signatureLabelEnd":25},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":27,"signatureLabelEnd":52},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":54,"signatureLabelEnd":77}],"documentation":"Returns the smallest row(s) using the given criteria.","SignatureStart":"Table.MinN(","SignatureEnd":")"}]},{"export":"Table.NestedJoin","kind":"Function","summary":"Performs a join between tables on supplied columns and produces the join result in a new column.","signatures":[{"label":"Table.NestedJoin(table1 as table, key1 as any, table2 as any, key2 as any, newColumnName as text)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":32},{"label":"key1","documentation":"any","signatureLabelOffset":34,"signatureLabelEnd":45},{"label":"table2","documentation":"any","signatureLabelOffset":47,"signatureLabelEnd":60},{"label":"key2","documentation":"any","signatureLabelOffset":62,"signatureLabelEnd":73},{"label":"newColumnName","documentation":"text","signatureLabelOffset":75,"signatureLabelEnd":96}],"documentation":"Performs a join between tables on supplied columns and produces the join result in a new column.","SignatureStart":"Table.NestedJoin(","SignatureEnd":")"},{"label":"Table.NestedJoin(table1 as table, key1 as any, table2 as any, key2 as any, newColumnName as text, joinKind as nullable number)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":32},{"label":"key1","documentation":"any","signatureLabelOffset":34,"signatureLabelEnd":45},{"label":"table2","documentation":"any","signatureLabelOffset":47,"signatureLabelEnd":60},{"label":"key2","documentation":"any","signatureLabelOffset":62,"signatureLabelEnd":73},{"label":"newColumnName","documentation":"text","signatureLabelOffset":75,"signatureLabelEnd":96},{"label":"joinKind","documentation":"nullable number","signatureLabelOffset":98,"signatureLabelEnd":125}],"documentation":"Performs a join between tables on supplied columns and produces the join result in a new column.","SignatureStart":"Table.NestedJoin(","SignatureEnd":")"},{"label":"Table.NestedJoin(table1 as table, key1 as any, table2 as any, key2 as any, newColumnName as text, joinKind as nullable number, keyEqualityComparers as nullable list)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":32},{"label":"key1","documentation":"any","signatureLabelOffset":34,"signatureLabelEnd":45},{"label":"table2","documentation":"any","signatureLabelOffset":47,"signatureLabelEnd":60},{"label":"key2","documentation":"any","signatureLabelOffset":62,"signatureLabelEnd":73},{"label":"newColumnName","documentation":"text","signatureLabelOffset":75,"signatureLabelEnd":96},{"label":"joinKind","documentation":"nullable number","signatureLabelOffset":98,"signatureLabelEnd":125},{"label":"keyEqualityComparers","documentation":"nullable list","signatureLabelOffset":127,"signatureLabelEnd":164}],"documentation":"Performs a join between tables on supplied columns and produces the join result in a new column.","SignatureStart":"Table.NestedJoin(","SignatureEnd":")"}]},{"export":"Table.Partition","kind":"Function","summary":"Partitions the table into a list of tables based on the number of groups and column specified.","signatures":[{"label":"Table.Partition(table as table, column as text, groups as number, hash as function)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":30},{"label":"column","documentation":"text","signatureLabelOffset":32,"signatureLabelEnd":46},{"label":"groups","documentation":"number","signatureLabelOffset":48,"signatureLabelEnd":64},{"label":"hash","documentation":"function","signatureLabelOffset":66,"signatureLabelEnd":82}],"documentation":"Partitions the table into a list of tables based on the number of groups and column specified.","SignatureStart":"Table.Partition(","SignatureEnd":")"}]},{"export":"Table.PartitionValues","kind":"Function","summary":"Returns information about how a table is partitioned.","signatures":[{"label":"Table.PartitionValues(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":22,"signatureLabelEnd":36}],"documentation":"Returns information about how a table is partitioned.","SignatureStart":"Table.PartitionValues(","SignatureEnd":")"}]},{"export":"Table.Pivot","kind":"Function","summary":"Given a pair of columns representing attribute-value pairs, rotates the data in the attribute column into a column headings.","signatures":[{"label":"Table.Pivot(table as table, pivotValues as list, attributeColumn as text, valueColumn as text)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"label":"pivotValues","documentation":"list","signatureLabelOffset":28,"signatureLabelEnd":47},{"label":"attributeColumn","documentation":"text","signatureLabelOffset":49,"signatureLabelEnd":72},{"label":"valueColumn","documentation":"text","signatureLabelOffset":74,"signatureLabelEnd":93}],"documentation":"Given a pair of columns representing attribute-value pairs, rotates the data in the attribute column into a column headings.","SignatureStart":"Table.Pivot(","SignatureEnd":")"},{"label":"Table.Pivot(table as table, pivotValues as list, attributeColumn as text, valueColumn as text, aggregationFunction as nullable function)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"label":"pivotValues","documentation":"list","signatureLabelOffset":28,"signatureLabelEnd":47},{"label":"attributeColumn","documentation":"text","signatureLabelOffset":49,"signatureLabelEnd":72},{"label":"valueColumn","documentation":"text","signatureLabelOffset":74,"signatureLabelEnd":93},{"label":"aggregationFunction","documentation":"nullable function","signatureLabelOffset":95,"signatureLabelEnd":135}],"documentation":"Given a pair of columns representing attribute-value pairs, rotates the data in the attribute column into a column headings.","SignatureStart":"Table.Pivot(","SignatureEnd":")"}]},{"export":"Table.PositionOf","kind":"Function","summary":"Returns the position or positions of the row within the table.","signatures":[{"label":"Table.PositionOf(table as table, row as record)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"label":"row","documentation":"record","signatureLabelOffset":33,"signatureLabelEnd":46}],"documentation":"Returns the position or positions of the row within the table.","SignatureStart":"Table.PositionOf(","SignatureEnd":")"},{"label":"Table.PositionOf(table as table, row as record, occurrence as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"label":"row","documentation":"record","signatureLabelOffset":33,"signatureLabelEnd":46},{"label":"occurrence","documentation":"any","signatureLabelOffset":48,"signatureLabelEnd":65}],"documentation":"Returns the position or positions of the row within the table.","SignatureStart":"Table.PositionOf(","SignatureEnd":")"},{"label":"Table.PositionOf(table as table, row as record, occurrence as any, equationCriteria as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"label":"row","documentation":"record","signatureLabelOffset":33,"signatureLabelEnd":46},{"label":"occurrence","documentation":"any","signatureLabelOffset":48,"signatureLabelEnd":65},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":67,"signatureLabelEnd":90}],"documentation":"Returns the position or positions of the row within the table.","SignatureStart":"Table.PositionOf(","SignatureEnd":")"}]},{"export":"Table.PositionOfAny","kind":"Function","summary":"Returns the position or positions of any of the specified rows within the table.","signatures":[{"label":"Table.PositionOfAny(table as table, rows as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"rows","documentation":"list","signatureLabelOffset":36,"signatureLabelEnd":48}],"documentation":"Returns the position or positions of any of the specified rows within the table.","SignatureStart":"Table.PositionOfAny(","SignatureEnd":")"},{"label":"Table.PositionOfAny(table as table, rows as list, occurrence as nullable number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"rows","documentation":"list","signatureLabelOffset":36,"signatureLabelEnd":48},{"label":"occurrence","documentation":"nullable number","signatureLabelOffset":50,"signatureLabelEnd":79}],"documentation":"Returns the position or positions of any of the specified rows within the table.","SignatureStart":"Table.PositionOfAny(","SignatureEnd":")"},{"label":"Table.PositionOfAny(table as table, rows as list, occurrence as nullable number, equationCriteria as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"rows","documentation":"list","signatureLabelOffset":36,"signatureLabelEnd":48},{"label":"occurrence","documentation":"nullable number","signatureLabelOffset":50,"signatureLabelEnd":79},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":81,"signatureLabelEnd":104}],"documentation":"Returns the position or positions of any of the specified rows within the table.","SignatureStart":"Table.PositionOfAny(","SignatureEnd":")"}]},{"export":"Table.PrefixColumns","kind":"Function","summary":"Returns a table where the columns have all been prefixed with the given text.","signatures":[{"label":"Table.PrefixColumns(table as table, prefix as text)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"prefix","documentation":"text","signatureLabelOffset":36,"signatureLabelEnd":50}],"documentation":"Returns a table where the columns have all been prefixed with the given text.","SignatureStart":"Table.PrefixColumns(","SignatureEnd":")"}]},{"export":"Table.Profile","kind":"Function","summary":"Returns a profile of the columns of a table.","signatures":[{"label":"Table.Profile(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":14,"signatureLabelEnd":28}],"documentation":"Returns a profile of the columns of a table.","SignatureStart":"Table.Profile(","SignatureEnd":")"},{"label":"Table.Profile(table as table, additionalAggregates as nullable list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":14,"signatureLabelEnd":28},{"label":"additionalAggregates","documentation":"nullable list","signatureLabelOffset":30,"signatureLabelEnd":67}],"documentation":"Returns a profile of the columns of a table.","SignatureStart":"Table.Profile(","SignatureEnd":")"}]},{"export":"Table.PromoteHeaders","kind":"Function","summary":"Promotes the first row of values as the new column headers (i.e. column names).","signatures":[{"label":"Table.PromoteHeaders(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":21,"signatureLabelEnd":35}],"documentation":"Promotes the first row of values as the new column headers (i.e. column names).","SignatureStart":"Table.PromoteHeaders(","SignatureEnd":")"},{"label":"Table.PromoteHeaders(table as table, options as nullable record)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"label":"options","documentation":"nullable record","signatureLabelOffset":37,"signatureLabelEnd":63}],"documentation":"Promotes the first row of values as the new column headers (i.e. column names).","SignatureStart":"Table.PromoteHeaders(","SignatureEnd":")"}]},{"export":"Table.Range","kind":"Function","summary":"Returns the rows beginning at the specified offset.","signatures":[{"label":"Table.Range(table as table, offset as number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"label":"offset","documentation":"number","signatureLabelOffset":28,"signatureLabelEnd":44}],"documentation":"Returns the rows beginning at the specified offset.","SignatureStart":"Table.Range(","SignatureEnd":")"},{"label":"Table.Range(table as table, offset as number, count as nullable number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"label":"offset","documentation":"number","signatureLabelOffset":28,"signatureLabelEnd":44},{"label":"count","documentation":"nullable number","signatureLabelOffset":46,"signatureLabelEnd":70}],"documentation":"Returns the rows beginning at the specified offset.","SignatureStart":"Table.Range(","SignatureEnd":")"}]},{"export":"Table.RemoveColumns","kind":"Function","summary":"Removes the specified columns.","signatures":[{"label":"Table.RemoveColumns(table as table, columns as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"columns","documentation":"any","signatureLabelOffset":36,"signatureLabelEnd":50}],"documentation":"Removes the specified columns.","SignatureStart":"Table.RemoveColumns(","SignatureEnd":")"},{"label":"Table.RemoveColumns(table as table, columns as any, missingField as nullable number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"columns","documentation":"any","signatureLabelOffset":36,"signatureLabelEnd":50},{"label":"missingField","documentation":"nullable number","signatureLabelOffset":52,"signatureLabelEnd":83}],"documentation":"Removes the specified columns.","SignatureStart":"Table.RemoveColumns(","SignatureEnd":")"}]},{"export":"Table.RemoveFirstN","kind":"Function","summary":"Returns a table with the first count rows skipped.","signatures":[{"label":"Table.RemoveFirstN(table as table, countOrCondition as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":19,"signatureLabelEnd":33},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":35,"signatureLabelEnd":58}],"documentation":"Returns a table with the first count rows skipped.","SignatureStart":"Table.RemoveFirstN(","SignatureEnd":")"}]},{"export":"Table.RemoveLastN","kind":"Function","summary":"Returns a table with the last N rows removed.","signatures":[{"label":"Table.RemoveLastN(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32}],"documentation":"Returns a table with the last N rows removed.","SignatureStart":"Table.RemoveLastN(","SignatureEnd":")"},{"label":"Table.RemoveLastN(table as table, countOrCondition as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":34,"signatureLabelEnd":57}],"documentation":"Returns a table with the last N rows removed.","SignatureStart":"Table.RemoveLastN(","SignatureEnd":")"}]},{"export":"Table.RemoveMatchingRows","kind":"Function","summary":"Removes all occurrences of the specified rows from the table.","signatures":[{"label":"Table.RemoveMatchingRows(table as table, rows as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":25,"signatureLabelEnd":39},{"label":"rows","documentation":"list","signatureLabelOffset":41,"signatureLabelEnd":53}],"documentation":"Removes all occurrences of the specified rows from the table.","SignatureStart":"Table.RemoveMatchingRows(","SignatureEnd":")"},{"label":"Table.RemoveMatchingRows(table as table, rows as list, equationCriteria as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":25,"signatureLabelEnd":39},{"label":"rows","documentation":"list","signatureLabelOffset":41,"signatureLabelEnd":53},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":55,"signatureLabelEnd":78}],"documentation":"Removes all occurrences of the specified rows from the table.","SignatureStart":"Table.RemoveMatchingRows(","SignatureEnd":")"}]},{"export":"Table.RemoveRows","kind":"Function","summary":"Removes the specified number of rows.","signatures":[{"label":"Table.RemoveRows(table as table, offset as number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"label":"offset","documentation":"number","signatureLabelOffset":33,"signatureLabelEnd":49}],"documentation":"Removes the specified number of rows.","SignatureStart":"Table.RemoveRows(","SignatureEnd":")"},{"label":"Table.RemoveRows(table as table, offset as number, count as nullable number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"label":"offset","documentation":"number","signatureLabelOffset":33,"signatureLabelEnd":49},{"label":"count","documentation":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":75}],"documentation":"Removes the specified number of rows.","SignatureStart":"Table.RemoveRows(","SignatureEnd":")"}]},{"export":"Table.RemoveRowsWithErrors","kind":"Function","summary":"Returns a table with the rows removed from the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.","signatures":[{"label":"Table.RemoveRowsWithErrors(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":27,"signatureLabelEnd":41}],"documentation":"Returns a table with the rows removed from the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.","SignatureStart":"Table.RemoveRowsWithErrors(","SignatureEnd":")"},{"label":"Table.RemoveRowsWithErrors(table as table, columns as nullable list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"label":"columns","documentation":"nullable list","signatureLabelOffset":43,"signatureLabelEnd":67}],"documentation":"Returns a table with the rows removed from the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.","SignatureStart":"Table.RemoveRowsWithErrors(","SignatureEnd":")"}]},{"export":"Table.RenameColumns","kind":"Function","summary":"Applies rename(s) of the form {old, new}.","signatures":[{"label":"Table.RenameColumns(table as table, renames as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"renames","documentation":"list","signatureLabelOffset":36,"signatureLabelEnd":51}],"documentation":"Applies rename(s) of the form {old, new}.","SignatureStart":"Table.RenameColumns(","SignatureEnd":")"},{"label":"Table.RenameColumns(table as table, renames as list, missingField as nullable number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"renames","documentation":"list","signatureLabelOffset":36,"signatureLabelEnd":51},{"label":"missingField","documentation":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":84}],"documentation":"Applies rename(s) of the form {old, new}.","SignatureStart":"Table.RenameColumns(","SignatureEnd":")"}]},{"export":"Table.ReorderColumns","kind":"Function","summary":"Returns a table with the columns in the specified order.","signatures":[{"label":"Table.ReorderColumns(table as table, columnOrder as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"label":"columnOrder","documentation":"list","signatureLabelOffset":37,"signatureLabelEnd":56}],"documentation":"Returns a table with the columns in the specified order.","SignatureStart":"Table.ReorderColumns(","SignatureEnd":")"},{"label":"Table.ReorderColumns(table as table, columnOrder as list, missingField as nullable number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"label":"columnOrder","documentation":"list","signatureLabelOffset":37,"signatureLabelEnd":56},{"label":"missingField","documentation":"nullable number","signatureLabelOffset":58,"signatureLabelEnd":89}],"documentation":"Returns a table with the columns in the specified order.","SignatureStart":"Table.ReorderColumns(","SignatureEnd":")"}]},{"export":"Table.Repeat","kind":"Function","summary":"Repeats the rows of the tables a specified number of times.","signatures":[{"label":"Table.Repeat(table as table, count as number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":13,"signatureLabelEnd":27},{"label":"count","documentation":"number","signatureLabelOffset":29,"signatureLabelEnd":44}],"documentation":"Repeats the rows of the tables a specified number of times.","SignatureStart":"Table.Repeat(","SignatureEnd":")"}]},{"export":"Table.ReplaceErrorValues","kind":"Function","summary":"Replaces the error values in the specified columns with the corresponding specified value.","signatures":[{"label":"Table.ReplaceErrorValues(table as table, errorReplacement as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":25,"signatureLabelEnd":39},{"label":"errorReplacement","documentation":"list","signatureLabelOffset":41,"signatureLabelEnd":65}],"documentation":"Replaces the error values in the specified columns with the corresponding specified value.","SignatureStart":"Table.ReplaceErrorValues(","SignatureEnd":")"}]},{"export":"Table.ReplaceKeys","kind":"Function","summary":"Table.ReplaceKeys","signatures":[{"label":"Table.ReplaceKeys(table as table, keys as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"keys","documentation":"list","signatureLabelOffset":34,"signatureLabelEnd":46}],"documentation":"Table.ReplaceKeys","SignatureStart":"Table.ReplaceKeys(","SignatureEnd":")"}]},{"export":"Table.ReplaceMatchingRows","kind":"Function","summary":"Replaces all the specified rows with the provided row(s).","signatures":[{"label":"Table.ReplaceMatchingRows(table as table, replacements as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":26,"signatureLabelEnd":40},{"label":"replacements","documentation":"list","signatureLabelOffset":42,"signatureLabelEnd":62}],"documentation":"Replaces all the specified rows with the provided row(s).","SignatureStart":"Table.ReplaceMatchingRows(","SignatureEnd":")"},{"label":"Table.ReplaceMatchingRows(table as table, replacements as list, equationCriteria as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":26,"signatureLabelEnd":40},{"label":"replacements","documentation":"list","signatureLabelOffset":42,"signatureLabelEnd":62},{"label":"equationCriteria","documentation":"any","signatureLabelOffset":64,"signatureLabelEnd":87}],"documentation":"Replaces all the specified rows with the provided row(s).","SignatureStart":"Table.ReplaceMatchingRows(","SignatureEnd":")"}]},{"export":"Table.ReplaceRelationshipIdentity","kind":"Function","summary":"Table.ReplaceRelationshipIdentity","signatures":[{"label":"Table.ReplaceRelationshipIdentity(value as any, identity as text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":34,"signatureLabelEnd":46},{"label":"identity","documentation":"text","signatureLabelOffset":48,"signatureLabelEnd":64}],"documentation":"Table.ReplaceRelationshipIdentity","SignatureStart":"Table.ReplaceRelationshipIdentity(","SignatureEnd":")"}]},{"export":"Table.ReplaceRows","kind":"Function","summary":"Replaces the specified range of rows with the provided row(s).","signatures":[{"label":"Table.ReplaceRows(table as table, offset as number, count as number, rows as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"offset","documentation":"number","signatureLabelOffset":34,"signatureLabelEnd":50},{"label":"count","documentation":"number","signatureLabelOffset":52,"signatureLabelEnd":67},{"label":"rows","documentation":"list","signatureLabelOffset":69,"signatureLabelEnd":81}],"documentation":"Replaces the specified range of rows with the provided row(s).","SignatureStart":"Table.ReplaceRows(","SignatureEnd":")"}]},{"export":"Table.ReplaceValue","kind":"Function","summary":"Replaces one value with another in the specified columns.","signatures":[{"label":"Table.ReplaceValue(table as table, oldValue as any, newValue as any, replacer as function, columnsToSearch as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":19,"signatureLabelEnd":33},{"label":"oldValue","documentation":"any","signatureLabelOffset":35,"signatureLabelEnd":50},{"label":"newValue","documentation":"any","signatureLabelOffset":52,"signatureLabelEnd":67},{"label":"replacer","documentation":"function","signatureLabelOffset":69,"signatureLabelEnd":89},{"label":"columnsToSearch","documentation":"list","signatureLabelOffset":91,"signatureLabelEnd":114}],"documentation":"Replaces one value with another in the specified columns.","SignatureStart":"Table.ReplaceValue(","SignatureEnd":")"}]},{"export":"Table.ReverseRows","kind":"Function","summary":"Returns a table with the rows in reverse order.","signatures":[{"label":"Table.ReverseRows(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32}],"documentation":"Returns a table with the rows in reverse order.","SignatureStart":"Table.ReverseRows(","SignatureEnd":")"}]},{"export":"Table.RowCount","kind":"Function","summary":"Returns the number of rows in the table.","signatures":[{"label":"Table.RowCount(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":15,"signatureLabelEnd":29}],"documentation":"Returns the number of rows in the table.","SignatureStart":"Table.RowCount(","SignatureEnd":")"}]},{"export":"Table.Schema","kind":"Function","summary":"Returns a table containing a description of the columns (i.e. the schema) of the specified table.","signatures":[{"label":"Table.Schema(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":13,"signatureLabelEnd":27}],"documentation":"Returns a table containing a description of the columns (i.e. the schema) of the specified table.","SignatureStart":"Table.Schema(","SignatureEnd":")"}]},{"export":"Table.SelectColumns","kind":"Function","summary":"Returns a table with only the specified columns.","signatures":[{"label":"Table.SelectColumns(table as table, columns as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"columns","documentation":"any","signatureLabelOffset":36,"signatureLabelEnd":50}],"documentation":"Returns a table with only the specified columns.","SignatureStart":"Table.SelectColumns(","SignatureEnd":")"},{"label":"Table.SelectColumns(table as table, columns as any, missingField as nullable number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"columns","documentation":"any","signatureLabelOffset":36,"signatureLabelEnd":50},{"label":"missingField","documentation":"nullable number","signatureLabelOffset":52,"signatureLabelEnd":83}],"documentation":"Returns a table with only the specified columns.","SignatureStart":"Table.SelectColumns(","SignatureEnd":")"}]},{"export":"Table.SelectRows","kind":"Function","summary":"Selects the rows that meet the condition function.","signatures":[{"label":"Table.SelectRows(table as table, condition as function)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"label":"condition","documentation":"function","signatureLabelOffset":33,"signatureLabelEnd":54}],"documentation":"Selects the rows that meet the condition function.","SignatureStart":"Table.SelectRows(","SignatureEnd":")"}]},{"export":"Table.SelectRowsWithErrors","kind":"Function","summary":"Returns a table with only those rows of the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.","signatures":[{"label":"Table.SelectRowsWithErrors(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":27,"signatureLabelEnd":41}],"documentation":"Returns a table with only those rows of the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.","SignatureStart":"Table.SelectRowsWithErrors(","SignatureEnd":")"},{"label":"Table.SelectRowsWithErrors(table as table, columns as nullable list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"label":"columns","documentation":"nullable list","signatureLabelOffset":43,"signatureLabelEnd":67}],"documentation":"Returns a table with only those rows of the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.","SignatureStart":"Table.SelectRowsWithErrors(","SignatureEnd":")"}]},{"export":"Table.SingleRow","kind":"Function","summary":"Returns the single row in the table.","signatures":[{"label":"Table.SingleRow(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":30}],"documentation":"Returns the single row in the table.","SignatureStart":"Table.SingleRow(","SignatureEnd":")"}]},{"export":"Table.Skip","kind":"Function","summary":"Returns a table with the first count rows skipped.","signatures":[{"label":"Table.Skip(table as table, countOrCondition as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":11,"signatureLabelEnd":25},{"label":"countOrCondition","documentation":"any","signatureLabelOffset":27,"signatureLabelEnd":50}],"documentation":"Returns a table with the first count rows skipped.","SignatureStart":"Table.Skip(","SignatureEnd":")"}]},{"export":"Table.Sort","kind":"Function","summary":"Sorts the table using one or more column names and comparison criteria.","signatures":[{"label":"Table.Sort(table as table, comparisonCriteria as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":11,"signatureLabelEnd":25},{"label":"comparisonCriteria","documentation":"any","signatureLabelOffset":27,"signatureLabelEnd":52}],"documentation":"Sorts the table using one or more column names and comparison criteria.","SignatureStart":"Table.Sort(","SignatureEnd":")"}]},{"export":"Table.Split","kind":"Function","summary":"Splits the specified table into a list of tables using the specified page size.","signatures":[{"label":"Table.Split(table as table, pageSize as number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"label":"pageSize","documentation":"number","signatureLabelOffset":28,"signatureLabelEnd":46}],"documentation":"Splits the specified table into a list of tables using the specified page size.","SignatureStart":"Table.Split(","SignatureEnd":")"}]},{"export":"Table.SplitColumn","kind":"Function","summary":"Splits the specified columns into a set of additional columns using the specified splitter function.","signatures":[{"label":"Table.SplitColumn(table as table, sourceColumn as text, splitter as function)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"sourceColumn","documentation":"text","signatureLabelOffset":34,"signatureLabelEnd":54},{"label":"splitter","documentation":"function","signatureLabelOffset":56,"signatureLabelEnd":76}],"documentation":"Splits the specified columns into a set of additional columns using the specified splitter function.","SignatureStart":"Table.SplitColumn(","SignatureEnd":")"},{"label":"Table.SplitColumn(table as table, sourceColumn as text, splitter as function, columnNamesOrNumber as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"sourceColumn","documentation":"text","signatureLabelOffset":34,"signatureLabelEnd":54},{"label":"splitter","documentation":"function","signatureLabelOffset":56,"signatureLabelEnd":76},{"label":"columnNamesOrNumber","documentation":"any","signatureLabelOffset":78,"signatureLabelEnd":104}],"documentation":"Splits the specified columns into a set of additional columns using the specified splitter function.","SignatureStart":"Table.SplitColumn(","SignatureEnd":")"},{"label":"Table.SplitColumn(table as table, sourceColumn as text, splitter as function, columnNamesOrNumber as any, default as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"sourceColumn","documentation":"text","signatureLabelOffset":34,"signatureLabelEnd":54},{"label":"splitter","documentation":"function","signatureLabelOffset":56,"signatureLabelEnd":76},{"label":"columnNamesOrNumber","documentation":"any","signatureLabelOffset":78,"signatureLabelEnd":104},{"label":"default","documentation":"any","signatureLabelOffset":106,"signatureLabelEnd":120}],"documentation":"Splits the specified columns into a set of additional columns using the specified splitter function.","SignatureStart":"Table.SplitColumn(","SignatureEnd":")"},{"label":"Table.SplitColumn(table as table, sourceColumn as text, splitter as function, columnNamesOrNumber as any, default as any, extraColumns as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"sourceColumn","documentation":"text","signatureLabelOffset":34,"signatureLabelEnd":54},{"label":"splitter","documentation":"function","signatureLabelOffset":56,"signatureLabelEnd":76},{"label":"columnNamesOrNumber","documentation":"any","signatureLabelOffset":78,"signatureLabelEnd":104},{"label":"default","documentation":"any","signatureLabelOffset":106,"signatureLabelEnd":120},{"label":"extraColumns","documentation":"any","signatureLabelOffset":122,"signatureLabelEnd":141}],"documentation":"Splits the specified columns into a set of additional columns using the specified splitter function.","SignatureStart":"Table.SplitColumn(","SignatureEnd":")"}]},{"export":"Table.ToColumns","kind":"Function","summary":"Creates a list of nested lists of column values from a table.","signatures":[{"label":"Table.ToColumns(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":30}],"documentation":"Creates a list of nested lists of column values from a table.","SignatureStart":"Table.ToColumns(","SignatureEnd":")"}]},{"export":"Table.ToList","kind":"Function","summary":"Converts a table into a list by applying the specified combining function to each row of values in the table.","signatures":[{"label":"Table.ToList(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":13,"signatureLabelEnd":27}],"documentation":"Converts a table into a list by applying the specified combining function to each row of values in the table.","SignatureStart":"Table.ToList(","SignatureEnd":")"},{"label":"Table.ToList(table as table, combiner as nullable function)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":13,"signatureLabelEnd":27},{"label":"combiner","documentation":"nullable function","signatureLabelOffset":29,"signatureLabelEnd":58}],"documentation":"Converts a table into a list by applying the specified combining function to each row of values in the table.","SignatureStart":"Table.ToList(","SignatureEnd":")"}]},{"export":"Table.ToRecords","kind":"Function","summary":"Converts a table to a list of records.","signatures":[{"label":"Table.ToRecords(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":30}],"documentation":"Converts a table to a list of records.","SignatureStart":"Table.ToRecords(","SignatureEnd":")"}]},{"export":"Table.ToRows","kind":"Function","summary":"Creates a list of nested lists of row values from a table.","signatures":[{"label":"Table.ToRows(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":13,"signatureLabelEnd":27}],"documentation":"Creates a list of nested lists of row values from a table.","SignatureStart":"Table.ToRows(","SignatureEnd":")"}]},{"export":"Table.TransformColumnNames","kind":"Function","summary":"Transforms column names by using the given function.","signatures":[{"label":"Table.TransformColumnNames(table as table, nameGenerator as function)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"label":"nameGenerator","documentation":"function","signatureLabelOffset":43,"signatureLabelEnd":68}],"documentation":"Transforms column names by using the given function.","SignatureStart":"Table.TransformColumnNames(","SignatureEnd":")"},{"label":"Table.TransformColumnNames(table as table, nameGenerator as function, options as nullable record)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"label":"nameGenerator","documentation":"function","signatureLabelOffset":43,"signatureLabelEnd":68},{"label":"options","documentation":"nullable record","signatureLabelOffset":70,"signatureLabelEnd":96}],"documentation":"Transforms column names by using the given function.","SignatureStart":"Table.TransformColumnNames(","SignatureEnd":")"}]},{"export":"Table.TransformColumns","kind":"Function","summary":"Applies transformation(s) of the form { column, transform }.","signatures":[{"label":"Table.TransformColumns(table as table, transformOperations as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":23,"signatureLabelEnd":37},{"label":"transformOperations","documentation":"list","signatureLabelOffset":39,"signatureLabelEnd":66}],"documentation":"Applies transformation(s) of the form { column, transform }.","SignatureStart":"Table.TransformColumns(","SignatureEnd":")"},{"label":"Table.TransformColumns(table as table, transformOperations as list, defaultTransformation as nullable function)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":23,"signatureLabelEnd":37},{"label":"transformOperations","documentation":"list","signatureLabelOffset":39,"signatureLabelEnd":66},{"label":"defaultTransformation","documentation":"nullable function","signatureLabelOffset":68,"signatureLabelEnd":110}],"documentation":"Applies transformation(s) of the form { column, transform }.","SignatureStart":"Table.TransformColumns(","SignatureEnd":")"},{"label":"Table.TransformColumns(table as table, transformOperations as list, defaultTransformation as nullable function, missingField as nullable number)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":23,"signatureLabelEnd":37},{"label":"transformOperations","documentation":"list","signatureLabelOffset":39,"signatureLabelEnd":66},{"label":"defaultTransformation","documentation":"nullable function","signatureLabelOffset":68,"signatureLabelEnd":110},{"label":"missingField","documentation":"nullable number","signatureLabelOffset":112,"signatureLabelEnd":143}],"documentation":"Applies transformation(s) of the form { column, transform }.","SignatureStart":"Table.TransformColumns(","SignatureEnd":")"}]},{"export":"Table.TransformColumnTypes","kind":"Function","summary":"Applies type transformation(s) of the form { column, type } using a specific culture.","signatures":[{"label":"Table.TransformColumnTypes(table as table, typeTransformations as list)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"label":"typeTransformations","documentation":"list","signatureLabelOffset":43,"signatureLabelEnd":70}],"documentation":"Applies type transformation(s) of the form { column, type } using a specific culture.","SignatureStart":"Table.TransformColumnTypes(","SignatureEnd":")"},{"label":"Table.TransformColumnTypes(table as table, typeTransformations as list, culture as nullable text)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"label":"typeTransformations","documentation":"list","signatureLabelOffset":43,"signatureLabelEnd":70},{"label":"culture","documentation":"nullable text","signatureLabelOffset":72,"signatureLabelEnd":96}],"documentation":"Applies type transformation(s) of the form { column, type } using a specific culture.","SignatureStart":"Table.TransformColumnTypes(","SignatureEnd":")"}]},{"export":"Table.TransformRows","kind":"Function","summary":"Transforms the rows of the table using the specified transform function.","signatures":[{"label":"Table.TransformRows(table as table, transform as function)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"transform","documentation":"function","signatureLabelOffset":36,"signatureLabelEnd":57}],"documentation":"Transforms the rows of the table using the specified transform function.","SignatureStart":"Table.TransformRows(","SignatureEnd":")"}]},{"export":"Table.Transpose","kind":"Function","summary":"Makes columns into rows and rows into columns.","signatures":[{"label":"Table.Transpose(table as table)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":30}],"documentation":"Makes columns into rows and rows into columns.","SignatureStart":"Table.Transpose(","SignatureEnd":")"},{"label":"Table.Transpose(table as table, columns as any)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":30},{"label":"columns","documentation":"any","signatureLabelOffset":32,"signatureLabelEnd":46}],"documentation":"Makes columns into rows and rows into columns.","SignatureStart":"Table.Transpose(","SignatureEnd":")"}]},{"export":"Table.Type","kind":"Type","summary":"The type that represents all tables.","signatures":null},{"export":"Table.Unpivot","kind":"Function","summary":"Translates a set of columns in a table into attribute-value pairs.","signatures":[{"label":"Table.Unpivot(table as table, pivotColumns as list, attributeColumn as text, valueColumn as text)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":14,"signatureLabelEnd":28},{"label":"pivotColumns","documentation":"list","signatureLabelOffset":30,"signatureLabelEnd":50},{"label":"attributeColumn","documentation":"text","signatureLabelOffset":52,"signatureLabelEnd":75},{"label":"valueColumn","documentation":"text","signatureLabelOffset":77,"signatureLabelEnd":96}],"documentation":"Translates a set of columns in a table into attribute-value pairs.","SignatureStart":"Table.Unpivot(","SignatureEnd":")"}]},{"export":"Table.UnpivotOtherColumns","kind":"Function","summary":"Translates all columns other than a specified set into attribute-value pairs.","signatures":[{"label":"Table.UnpivotOtherColumns(table as table, pivotColumns as list, attributeColumn as text, valueColumn as text)","parameters":[{"label":"table","documentation":"table","signatureLabelOffset":26,"signatureLabelEnd":40},{"label":"pivotColumns","documentation":"list","signatureLabelOffset":42,"signatureLabelEnd":62},{"label":"attributeColumn","documentation":"text","signatureLabelOffset":64,"signatureLabelEnd":87},{"label":"valueColumn","documentation":"text","signatureLabelOffset":89,"signatureLabelEnd":108}],"documentation":"Translates all columns other than a specified set into attribute-value pairs.","SignatureStart":"Table.UnpivotOtherColumns(","SignatureEnd":")"}]},{"export":"Table.View","kind":"Function","summary":"Creates or extends a table with user-defined handlers for query and action operations.","signatures":[{"label":"Table.View(table as nullable table, handlers as record)","parameters":[{"label":"table","documentation":"nullable table","signatureLabelOffset":11,"signatureLabelEnd":34},{"label":"handlers","documentation":"record","signatureLabelOffset":36,"signatureLabelEnd":54}],"documentation":"Creates or extends a table with user-defined handlers for query and action operations.","SignatureStart":"Table.View(","SignatureEnd":")"}]},{"export":"Table.ViewFunction","kind":"Function","summary":"Creates a function that can be intercepted by a handler defined on a view (via Table.View).","signatures":[{"label":"Table.ViewFunction(function as function)","parameters":[{"label":"function","documentation":"function","signatureLabelOffset":19,"signatureLabelEnd":39}],"documentation":"Creates a function that can be intercepted by a handler defined on a view (via Table.View).","SignatureStart":"Table.ViewFunction(","SignatureEnd":")"}]},{"export":"Tables.GetRelationships","kind":"Function","summary":"Gets the relationships among a set of tables.","signatures":[{"label":"Tables.GetRelationships(tables as table)","parameters":[{"label":"tables","documentation":"table","signatureLabelOffset":24,"signatureLabelEnd":39}],"documentation":"Gets the relationships among a set of tables.","SignatureStart":"Tables.GetRelationships(","SignatureEnd":")"},{"label":"Tables.GetRelationships(tables as table, dataColumn as nullable text)","parameters":[{"label":"tables","documentation":"table","signatureLabelOffset":24,"signatureLabelEnd":39},{"label":"dataColumn","documentation":"nullable text","signatureLabelOffset":41,"signatureLabelEnd":68}],"documentation":"Gets the relationships among a set of tables.","SignatureStart":"Tables.GetRelationships(","SignatureEnd":")"}]},{"export":"Text.AfterDelimiter","kind":"Function","summary":"Text.AfterDelimiter","signatures":[{"label":"Text.AfterDelimiter(text as nullable text, delimiter as text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":20,"signatureLabelEnd":41},{"label":"delimiter","documentation":"text","signatureLabelOffset":43,"signatureLabelEnd":60}],"documentation":"Text.AfterDelimiter","SignatureStart":"Text.AfterDelimiter(","SignatureEnd":")"},{"label":"Text.AfterDelimiter(text as nullable text, delimiter as text, index as any)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":20,"signatureLabelEnd":41},{"label":"delimiter","documentation":"text","signatureLabelOffset":43,"signatureLabelEnd":60},{"label":"index","documentation":"any","signatureLabelOffset":62,"signatureLabelEnd":74}],"documentation":"Text.AfterDelimiter","SignatureStart":"Text.AfterDelimiter(","SignatureEnd":")"}]},{"export":"Text.At","kind":"Function","summary":"Returns the character at the specified position.","signatures":[{"label":"Text.At(text as nullable text, index as number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":8,"signatureLabelEnd":29},{"label":"index","documentation":"number","signatureLabelOffset":31,"signatureLabelEnd":46}],"documentation":"Returns the character at the specified position.","SignatureStart":"Text.At(","SignatureEnd":")"}]},{"export":"Text.BeforeDelimiter","kind":"Function","summary":"Text.BeforeDelimiter","signatures":[{"label":"Text.BeforeDelimiter(text as nullable text, delimiter as text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":21,"signatureLabelEnd":42},{"label":"delimiter","documentation":"text","signatureLabelOffset":44,"signatureLabelEnd":61}],"documentation":"Text.BeforeDelimiter","SignatureStart":"Text.BeforeDelimiter(","SignatureEnd":")"},{"label":"Text.BeforeDelimiter(text as nullable text, delimiter as text, index as any)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":21,"signatureLabelEnd":42},{"label":"delimiter","documentation":"text","signatureLabelOffset":44,"signatureLabelEnd":61},{"label":"index","documentation":"any","signatureLabelOffset":63,"signatureLabelEnd":75}],"documentation":"Text.BeforeDelimiter","SignatureStart":"Text.BeforeDelimiter(","SignatureEnd":")"}]},{"export":"Text.BetweenDelimiters","kind":"Function","summary":"Text.BetweenDelimiters","signatures":[{"label":"Text.BetweenDelimiters(text as nullable text, startDelimiter as text, endDelimiter as text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":23,"signatureLabelEnd":44},{"label":"startDelimiter","documentation":"text","signatureLabelOffset":46,"signatureLabelEnd":68},{"label":"endDelimiter","documentation":"text","signatureLabelOffset":70,"signatureLabelEnd":90}],"documentation":"Text.BetweenDelimiters","SignatureStart":"Text.BetweenDelimiters(","SignatureEnd":")"},{"label":"Text.BetweenDelimiters(text as nullable text, startDelimiter as text, endDelimiter as text, startIndex as any)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":23,"signatureLabelEnd":44},{"label":"startDelimiter","documentation":"text","signatureLabelOffset":46,"signatureLabelEnd":68},{"label":"endDelimiter","documentation":"text","signatureLabelOffset":70,"signatureLabelEnd":90},{"label":"startIndex","documentation":"any","signatureLabelOffset":92,"signatureLabelEnd":109}],"documentation":"Text.BetweenDelimiters","SignatureStart":"Text.BetweenDelimiters(","SignatureEnd":")"},{"label":"Text.BetweenDelimiters(text as nullable text, startDelimiter as text, endDelimiter as text, startIndex as any, endIndex as any)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":23,"signatureLabelEnd":44},{"label":"startDelimiter","documentation":"text","signatureLabelOffset":46,"signatureLabelEnd":68},{"label":"endDelimiter","documentation":"text","signatureLabelOffset":70,"signatureLabelEnd":90},{"label":"startIndex","documentation":"any","signatureLabelOffset":92,"signatureLabelEnd":109},{"label":"endIndex","documentation":"any","signatureLabelOffset":111,"signatureLabelEnd":126}],"documentation":"Text.BetweenDelimiters","SignatureStart":"Text.BetweenDelimiters(","SignatureEnd":")"}]},{"export":"Text.Clean","kind":"Function","summary":"Returns the text value with all non-printable characters removed.","signatures":[{"label":"Text.Clean(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32}],"documentation":"Returns the text value with all non-printable characters removed.","SignatureStart":"Text.Clean(","SignatureEnd":")"}]},{"export":"Text.Combine","kind":"Function","summary":"Concatenates a list of text values into one text value.","signatures":[{"label":"Text.Combine(texts as list)","parameters":[{"label":"texts","documentation":"list","signatureLabelOffset":13,"signatureLabelEnd":26}],"documentation":"Concatenates a list of text values into one text value.","SignatureStart":"Text.Combine(","SignatureEnd":")"},{"label":"Text.Combine(texts as list, separator as nullable text)","parameters":[{"label":"texts","documentation":"list","signatureLabelOffset":13,"signatureLabelEnd":26},{"label":"separator","documentation":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":54}],"documentation":"Concatenates a list of text values into one text value.","SignatureStart":"Text.Combine(","SignatureEnd":")"}]},{"export":"Text.Contains","kind":"Function","summary":"Returns whether the text contains the substring.","signatures":[{"label":"Text.Contains(text as nullable text, substring as text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"label":"substring","documentation":"text","signatureLabelOffset":37,"signatureLabelEnd":54}],"documentation":"Returns whether the text contains the substring.","SignatureStart":"Text.Contains(","SignatureEnd":")"},{"label":"Text.Contains(text as nullable text, substring as text, comparer as nullable function)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"label":"substring","documentation":"text","signatureLabelOffset":37,"signatureLabelEnd":54},{"label":"comparer","documentation":"nullable function","signatureLabelOffset":56,"signatureLabelEnd":85}],"documentation":"Returns whether the text contains the substring.","SignatureStart":"Text.Contains(","SignatureEnd":")"}]},{"export":"Text.End","kind":"Function","summary":"Returns the last characters of the text.","signatures":[{"label":"Text.End(text as nullable text, count as number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":9,"signatureLabelEnd":30},{"label":"count","documentation":"number","signatureLabelOffset":32,"signatureLabelEnd":47}],"documentation":"Returns the last characters of the text.","SignatureStart":"Text.End(","SignatureEnd":")"}]},{"export":"Text.EndsWith","kind":"Function","summary":"Indicates whether the text ends in the specified value.","signatures":[{"label":"Text.EndsWith(text as nullable text, substring as text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"label":"substring","documentation":"text","signatureLabelOffset":37,"signatureLabelEnd":54}],"documentation":"Indicates whether the text ends in the specified value.","SignatureStart":"Text.EndsWith(","SignatureEnd":")"},{"label":"Text.EndsWith(text as nullable text, substring as text, comparer as nullable function)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"label":"substring","documentation":"text","signatureLabelOffset":37,"signatureLabelEnd":54},{"label":"comparer","documentation":"nullable function","signatureLabelOffset":56,"signatureLabelEnd":85}],"documentation":"Indicates whether the text ends in the specified value.","SignatureStart":"Text.EndsWith(","SignatureEnd":")"}]},{"export":"Text.Format","kind":"Function","summary":"Returns formatted text from a format string and arguments.","signatures":[{"label":"Text.Format(formatString as text, arguments as any)","parameters":[{"label":"formatString","documentation":"text","signatureLabelOffset":12,"signatureLabelEnd":32},{"label":"arguments","documentation":"any","signatureLabelOffset":34,"signatureLabelEnd":50}],"documentation":"Returns formatted text from a format string and arguments.","SignatureStart":"Text.Format(","SignatureEnd":")"},{"label":"Text.Format(formatString as text, arguments as any, culture as nullable text)","parameters":[{"label":"formatString","documentation":"text","signatureLabelOffset":12,"signatureLabelEnd":32},{"label":"arguments","documentation":"any","signatureLabelOffset":34,"signatureLabelEnd":50},{"label":"culture","documentation":"nullable text","signatureLabelOffset":52,"signatureLabelEnd":76}],"documentation":"Returns formatted text from a format string and arguments.","SignatureStart":"Text.Format(","SignatureEnd":")"}]},{"export":"Text.From","kind":"Function","summary":"Creates a text value from the given value.","signatures":[{"label":"Text.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":22}],"documentation":"Creates a text value from the given value.","SignatureStart":"Text.From(","SignatureEnd":")"},{"label":"Text.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"culture","documentation":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48}],"documentation":"Creates a text value from the given value.","SignatureStart":"Text.From(","SignatureEnd":")"}]},{"export":"Text.FromBinary","kind":"Function","summary":"Decodes data from a binary form into text.","signatures":[{"label":"Text.FromBinary(binary as nullable binary)","parameters":[{"label":"binary","documentation":"nullable binary","signatureLabelOffset":16,"signatureLabelEnd":41}],"documentation":"Decodes data from a binary form into text.","SignatureStart":"Text.FromBinary(","SignatureEnd":")"},{"label":"Text.FromBinary(binary as nullable binary, encoding as nullable number)","parameters":[{"label":"binary","documentation":"nullable binary","signatureLabelOffset":16,"signatureLabelEnd":41},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":43,"signatureLabelEnd":70}],"documentation":"Decodes data from a binary form into text.","SignatureStart":"Text.FromBinary(","SignatureEnd":")"}]},{"export":"Text.InferNumberType","kind":"Function","summary":"Infers the granular number type (Int64.Type, Double.Type, etc.) of a number encoded in text","signatures":[{"label":"Text.InferNumberType(text as text)","parameters":[{"label":"text","documentation":"text","signatureLabelOffset":21,"signatureLabelEnd":33}],"documentation":"Infers the granular number type (Int64.Type, Double.Type, etc.) of a number encoded in text","SignatureStart":"Text.InferNumberType(","SignatureEnd":")"},{"label":"Text.InferNumberType(text as text, culture as nullable text)","parameters":[{"label":"text","documentation":"text","signatureLabelOffset":21,"signatureLabelEnd":33},{"label":"culture","documentation":"nullable text","signatureLabelOffset":35,"signatureLabelEnd":59}],"documentation":"Infers the granular number type (Int64.Type, Double.Type, etc.) of a number encoded in text","SignatureStart":"Text.InferNumberType(","SignatureEnd":")"}]},{"export":"Text.Insert","kind":"Function","summary":"Inserts one text value into another at a given position.","signatures":[{"label":"Text.Insert(text as nullable text, offset as number, newText as text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"label":"offset","documentation":"number","signatureLabelOffset":35,"signatureLabelEnd":51},{"label":"newText","documentation":"text","signatureLabelOffset":53,"signatureLabelEnd":68}],"documentation":"Inserts one text value into another at a given position.","SignatureStart":"Text.Insert(","SignatureEnd":")"}]},{"export":"Text.Length","kind":"Function","summary":"Returns the number of characters.","signatures":[{"label":"Text.Length(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33}],"documentation":"Returns the number of characters.","SignatureStart":"Text.Length(","SignatureEnd":")"}]},{"export":"Text.Lower","kind":"Function","summary":"Converts all characters to lowercase.","signatures":[{"label":"Text.Lower(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32}],"documentation":"Converts all characters to lowercase.","SignatureStart":"Text.Lower(","SignatureEnd":")"},{"label":"Text.Lower(text as nullable text, culture as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32},{"label":"culture","documentation":"nullable text","signatureLabelOffset":34,"signatureLabelEnd":58}],"documentation":"Converts all characters to lowercase.","SignatureStart":"Text.Lower(","SignatureEnd":")"}]},{"export":"Text.Middle","kind":"Function","summary":"Returns the substring up to a specific length.","signatures":[{"label":"Text.Middle(text as nullable text, start as number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"label":"start","documentation":"number","signatureLabelOffset":35,"signatureLabelEnd":50}],"documentation":"Returns the substring up to a specific length.","SignatureStart":"Text.Middle(","SignatureEnd":")"},{"label":"Text.Middle(text as nullable text, start as number, count as nullable number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"label":"start","documentation":"number","signatureLabelOffset":35,"signatureLabelEnd":50},{"label":"count","documentation":"nullable number","signatureLabelOffset":52,"signatureLabelEnd":76}],"documentation":"Returns the substring up to a specific length.","SignatureStart":"Text.Middle(","SignatureEnd":")"}]},{"export":"Text.NewGuid","kind":"Function","summary":"Returns a new, random globally unique identifier (GUID).","signatures":[{"label":"Text.NewGuid()","parameters":[],"documentation":"Returns a new, random globally unique identifier (GUID).","SignatureStart":"Text.NewGuid(","SignatureEnd":")"}]},{"export":"Text.PadEnd","kind":"Function","summary":"Returns text of a specified length by padding the end of the given text.","signatures":[{"label":"Text.PadEnd(text as nullable text, count as number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"label":"count","documentation":"number","signatureLabelOffset":35,"signatureLabelEnd":50}],"documentation":"Returns text of a specified length by padding the end of the given text.","SignatureStart":"Text.PadEnd(","SignatureEnd":")"},{"label":"Text.PadEnd(text as nullable text, count as number, character as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"label":"count","documentation":"number","signatureLabelOffset":35,"signatureLabelEnd":50},{"label":"character","documentation":"nullable text","signatureLabelOffset":52,"signatureLabelEnd":78}],"documentation":"Returns text of a specified length by padding the end of the given text.","SignatureStart":"Text.PadEnd(","SignatureEnd":")"}]},{"export":"Text.PadStart","kind":"Function","summary":"Returns text of a specified length by padding the start of the given text.","signatures":[{"label":"Text.PadStart(text as nullable text, count as number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"label":"count","documentation":"number","signatureLabelOffset":37,"signatureLabelEnd":52}],"documentation":"Returns text of a specified length by padding the start of the given text.","SignatureStart":"Text.PadStart(","SignatureEnd":")"},{"label":"Text.PadStart(text as nullable text, count as number, character as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"label":"count","documentation":"number","signatureLabelOffset":37,"signatureLabelEnd":52},{"label":"character","documentation":"nullable text","signatureLabelOffset":54,"signatureLabelEnd":80}],"documentation":"Returns text of a specified length by padding the start of the given text.","SignatureStart":"Text.PadStart(","SignatureEnd":")"}]},{"export":"Text.PositionOf","kind":"Function","summary":"Returns the first position of the value (-1 if not found).","signatures":[{"label":"Text.PositionOf(text as text, substring as text)","parameters":[{"label":"text","documentation":"text","signatureLabelOffset":16,"signatureLabelEnd":28},{"label":"substring","documentation":"text","signatureLabelOffset":30,"signatureLabelEnd":47}],"documentation":"Returns the first position of the value (-1 if not found).","SignatureStart":"Text.PositionOf(","SignatureEnd":")"},{"label":"Text.PositionOf(text as text, substring as text, occurrence as nullable number)","parameters":[{"label":"text","documentation":"text","signatureLabelOffset":16,"signatureLabelEnd":28},{"label":"substring","documentation":"text","signatureLabelOffset":30,"signatureLabelEnd":47},{"label":"occurrence","documentation":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":78}],"documentation":"Returns the first position of the value (-1 if not found).","SignatureStart":"Text.PositionOf(","SignatureEnd":")"},{"label":"Text.PositionOf(text as text, substring as text, occurrence as nullable number, comparer as nullable function)","parameters":[{"label":"text","documentation":"text","signatureLabelOffset":16,"signatureLabelEnd":28},{"label":"substring","documentation":"text","signatureLabelOffset":30,"signatureLabelEnd":47},{"label":"occurrence","documentation":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":78},{"label":"comparer","documentation":"nullable function","signatureLabelOffset":80,"signatureLabelEnd":109}],"documentation":"Returns the first position of the value (-1 if not found).","SignatureStart":"Text.PositionOf(","SignatureEnd":")"}]},{"export":"Text.PositionOfAny","kind":"Function","summary":"Returns the first position in the text value of any listed character (-1 if not found).","signatures":[{"label":"Text.PositionOfAny(text as text, characters as list)","parameters":[{"label":"text","documentation":"text","signatureLabelOffset":19,"signatureLabelEnd":31},{"label":"characters","documentation":"list","signatureLabelOffset":33,"signatureLabelEnd":51}],"documentation":"Returns the first position in the text value of any listed character (-1 if not found).","SignatureStart":"Text.PositionOfAny(","SignatureEnd":")"},{"label":"Text.PositionOfAny(text as text, characters as list, occurrence as nullable number)","parameters":[{"label":"text","documentation":"text","signatureLabelOffset":19,"signatureLabelEnd":31},{"label":"characters","documentation":"list","signatureLabelOffset":33,"signatureLabelEnd":51},{"label":"occurrence","documentation":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":82}],"documentation":"Returns the first position in the text value of any listed character (-1 if not found).","SignatureStart":"Text.PositionOfAny(","SignatureEnd":")"}]},{"export":"Text.Proper","kind":"Function","summary":"Capitalizes the first letter of each word.","signatures":[{"label":"Text.Proper(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33}],"documentation":"Capitalizes the first letter of each word.","SignatureStart":"Text.Proper(","SignatureEnd":")"},{"label":"Text.Proper(text as nullable text, culture as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"label":"culture","documentation":"nullable text","signatureLabelOffset":35,"signatureLabelEnd":59}],"documentation":"Capitalizes the first letter of each word.","SignatureStart":"Text.Proper(","SignatureEnd":")"}]},{"export":"Text.Range","kind":"Function","summary":"Returns the substring found at offset.","signatures":[{"label":"Text.Range(text as nullable text, offset as number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32},{"label":"offset","documentation":"number","signatureLabelOffset":34,"signatureLabelEnd":50}],"documentation":"Returns the substring found at offset.","SignatureStart":"Text.Range(","SignatureEnd":")"},{"label":"Text.Range(text as nullable text, offset as number, count as nullable number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32},{"label":"offset","documentation":"number","signatureLabelOffset":34,"signatureLabelEnd":50},{"label":"count","documentation":"nullable number","signatureLabelOffset":52,"signatureLabelEnd":76}],"documentation":"Returns the substring found at offset.","SignatureStart":"Text.Range(","SignatureEnd":")"}]},{"export":"Text.Remove","kind":"Function","summary":"Removes all occurrences of the given character or list of characters from the input text value.","signatures":[{"label":"Text.Remove(text as nullable text, removeChars as any)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"label":"removeChars","documentation":"any","signatureLabelOffset":35,"signatureLabelEnd":53}],"documentation":"Removes all occurrences of the given character or list of characters from the input text value.","SignatureStart":"Text.Remove(","SignatureEnd":")"}]},{"export":"Text.RemoveRange","kind":"Function","summary":"Removes a count of characters starting at the given offset","signatures":[{"label":"Text.RemoveRange(text as nullable text, offset as number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":17,"signatureLabelEnd":38},{"label":"offset","documentation":"number","signatureLabelOffset":40,"signatureLabelEnd":56}],"documentation":"Removes a count of characters starting at the given offset","SignatureStart":"Text.RemoveRange(","SignatureEnd":")"},{"label":"Text.RemoveRange(text as nullable text, offset as number, count as nullable number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":17,"signatureLabelEnd":38},{"label":"offset","documentation":"number","signatureLabelOffset":40,"signatureLabelEnd":56},{"label":"count","documentation":"nullable number","signatureLabelOffset":58,"signatureLabelEnd":82}],"documentation":"Removes a count of characters starting at the given offset","SignatureStart":"Text.RemoveRange(","SignatureEnd":")"}]},{"export":"Text.Repeat","kind":"Function","summary":"Returns a text value composed of the input text repeated a specified number of times.","signatures":[{"label":"Text.Repeat(text as nullable text, count as number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"label":"count","documentation":"number","signatureLabelOffset":35,"signatureLabelEnd":50}],"documentation":"Returns a text value composed of the input text repeated a specified number of times.","SignatureStart":"Text.Repeat(","SignatureEnd":")"}]},{"export":"Text.Replace","kind":"Function","summary":"Replaces all occurrences of the given substring in the text.","signatures":[{"label":"Text.Replace(text as nullable text, old as text, new as text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":13,"signatureLabelEnd":34},{"label":"old","documentation":"text","signatureLabelOffset":36,"signatureLabelEnd":47},{"label":"new","documentation":"text","signatureLabelOffset":49,"signatureLabelEnd":60}],"documentation":"Replaces all occurrences of the given substring in the text.","SignatureStart":"Text.Replace(","SignatureEnd":")"}]},{"export":"Text.ReplaceRange","kind":"Function","summary":"Removes a range of characters and inserts a new value at a specified position.","signatures":[{"label":"Text.ReplaceRange(text as nullable text, offset as number, count as number, newText as text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":18,"signatureLabelEnd":39},{"label":"offset","documentation":"number","signatureLabelOffset":41,"signatureLabelEnd":57},{"label":"count","documentation":"number","signatureLabelOffset":59,"signatureLabelEnd":74},{"label":"newText","documentation":"text","signatureLabelOffset":76,"signatureLabelEnd":91}],"documentation":"Removes a range of characters and inserts a new value at a specified position.","SignatureStart":"Text.ReplaceRange(","SignatureEnd":")"}]},{"export":"Text.Reverse","kind":"Function","summary":"Text.Reverse","signatures":[{"label":"Text.Reverse(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":13,"signatureLabelEnd":34}],"documentation":"Text.Reverse","SignatureStart":"Text.Reverse(","SignatureEnd":")"}]},{"export":"Text.Select","kind":"Function","summary":"Selects all occurrences of the given character or list of characters from the input text value.","signatures":[{"label":"Text.Select(text as nullable text, selectChars as any)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"label":"selectChars","documentation":"any","signatureLabelOffset":35,"signatureLabelEnd":53}],"documentation":"Selects all occurrences of the given character or list of characters from the input text value.","SignatureStart":"Text.Select(","SignatureEnd":")"}]},{"export":"Text.Split","kind":"Function","summary":"Splits text into a list of text values based upon a specified delimiter.","signatures":[{"label":"Text.Split(text as text, separator as text)","parameters":[{"label":"text","documentation":"text","signatureLabelOffset":11,"signatureLabelEnd":23},{"label":"separator","documentation":"text","signatureLabelOffset":25,"signatureLabelEnd":42}],"documentation":"Splits text into a list of text values based upon a specified delimiter.","SignatureStart":"Text.Split(","SignatureEnd":")"}]},{"export":"Text.SplitAny","kind":"Function","summary":"Returns a list of text values, split on any of the characters in the delimiter.","signatures":[{"label":"Text.SplitAny(text as text, separators as text)","parameters":[{"label":"text","documentation":"text","signatureLabelOffset":14,"signatureLabelEnd":26},{"label":"separators","documentation":"text","signatureLabelOffset":28,"signatureLabelEnd":46}],"documentation":"Returns a list of text values, split on any of the characters in the delimiter.","SignatureStart":"Text.SplitAny(","SignatureEnd":")"}]},{"export":"Text.Start","kind":"Function","summary":"Returns the start of the text.","signatures":[{"label":"Text.Start(text as nullable text, count as number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32},{"label":"count","documentation":"number","signatureLabelOffset":34,"signatureLabelEnd":49}],"documentation":"Returns the start of the text.","SignatureStart":"Text.Start(","SignatureEnd":")"}]},{"export":"Text.StartsWith","kind":"Function","summary":"Indicates whether the text starts with a specified value.","signatures":[{"label":"Text.StartsWith(text as nullable text, substring as text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":16,"signatureLabelEnd":37},{"label":"substring","documentation":"text","signatureLabelOffset":39,"signatureLabelEnd":56}],"documentation":"Indicates whether the text starts with a specified value.","SignatureStart":"Text.StartsWith(","SignatureEnd":")"},{"label":"Text.StartsWith(text as nullable text, substring as text, comparer as nullable function)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":16,"signatureLabelEnd":37},{"label":"substring","documentation":"text","signatureLabelOffset":39,"signatureLabelEnd":56},{"label":"comparer","documentation":"nullable function","signatureLabelOffset":58,"signatureLabelEnd":87}],"documentation":"Indicates whether the text starts with a specified value.","SignatureStart":"Text.StartsWith(","SignatureEnd":")"}]},{"export":"Text.ToBinary","kind":"Function","summary":"Encodes text into a binary form.","signatures":[{"label":"Text.ToBinary(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35}],"documentation":"Encodes text into a binary form.","SignatureStart":"Text.ToBinary(","SignatureEnd":")"},{"label":"Text.ToBinary(text as nullable text, encoding as nullable number)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":37,"signatureLabelEnd":64}],"documentation":"Encodes text into a binary form.","SignatureStart":"Text.ToBinary(","SignatureEnd":")"},{"label":"Text.ToBinary(text as nullable text, encoding as nullable number, includeByteOrderMark as nullable logical)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":37,"signatureLabelEnd":64},{"label":"includeByteOrderMark","documentation":"nullable logical","signatureLabelOffset":66,"signatureLabelEnd":106}],"documentation":"Encodes text into a binary form.","SignatureStart":"Text.ToBinary(","SignatureEnd":")"}]},{"export":"Text.ToList","kind":"Function","summary":"Returns a list of character values from the given text value.","signatures":[{"label":"Text.ToList(text as text)","parameters":[{"label":"text","documentation":"text","signatureLabelOffset":12,"signatureLabelEnd":24}],"documentation":"Returns a list of character values from the given text value.","SignatureStart":"Text.ToList(","SignatureEnd":")"}]},{"export":"Text.Trim","kind":"Function","summary":"Removes all leading and trailing whitespace.","signatures":[{"label":"Text.Trim(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":10,"signatureLabelEnd":31}],"documentation":"Removes all leading and trailing whitespace.","SignatureStart":"Text.Trim(","SignatureEnd":")"},{"label":"Text.Trim(text as nullable text, trim as any)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":10,"signatureLabelEnd":31},{"label":"trim","documentation":"any","signatureLabelOffset":33,"signatureLabelEnd":44}],"documentation":"Removes all leading and trailing whitespace.","SignatureStart":"Text.Trim(","SignatureEnd":")"}]},{"export":"Text.TrimEnd","kind":"Function","summary":"Removes all trailing whitespace.","signatures":[{"label":"Text.TrimEnd(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":13,"signatureLabelEnd":34}],"documentation":"Removes all trailing whitespace.","SignatureStart":"Text.TrimEnd(","SignatureEnd":")"},{"label":"Text.TrimEnd(text as nullable text, trim as any)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":13,"signatureLabelEnd":34},{"label":"trim","documentation":"any","signatureLabelOffset":36,"signatureLabelEnd":47}],"documentation":"Removes all trailing whitespace.","SignatureStart":"Text.TrimEnd(","SignatureEnd":")"}]},{"export":"Text.TrimStart","kind":"Function","summary":"Removes all leading whitespace.","signatures":[{"label":"Text.TrimStart(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":15,"signatureLabelEnd":36}],"documentation":"Removes all leading whitespace.","SignatureStart":"Text.TrimStart(","SignatureEnd":")"},{"label":"Text.TrimStart(text as nullable text, trim as any)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":15,"signatureLabelEnd":36},{"label":"trim","documentation":"any","signatureLabelOffset":38,"signatureLabelEnd":49}],"documentation":"Removes all leading whitespace.","SignatureStart":"Text.TrimStart(","SignatureEnd":")"}]},{"export":"Text.Type","kind":"Type","summary":"The type that represents all text values.","signatures":null},{"export":"Text.Upper","kind":"Function","summary":"Converts all characters to uppercase.","signatures":[{"label":"Text.Upper(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32}],"documentation":"Converts all characters to uppercase.","SignatureStart":"Text.Upper(","SignatureEnd":")"},{"label":"Text.Upper(text as nullable text, culture as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32},{"label":"culture","documentation":"nullable text","signatureLabelOffset":34,"signatureLabelEnd":58}],"documentation":"Converts all characters to uppercase.","SignatureStart":"Text.Upper(","SignatureEnd":")"}]},{"export":"TextEncoding.Ascii","kind":"Constant","summary":"Use to choose the ASCII binary form.","signatures":null},{"export":"TextEncoding.BigEndianUnicode","kind":"Constant","summary":"Use to choose the UTF16 big endian binary form.","signatures":null},{"export":"TextEncoding.Type","kind":"Type","summary":"Specifies the text encoding type.","signatures":null},{"export":"TextEncoding.Unicode","kind":"Constant","summary":"Use to choose the UTF16 little endian binary form.","signatures":null},{"export":"TextEncoding.Utf16","kind":"Constant","summary":"Use to choose the UTF16 little endian binary form.","signatures":null},{"export":"TextEncoding.Utf8","kind":"Constant","summary":"Use to choose the UTF8 binary form.","signatures":null},{"export":"TextEncoding.Windows","kind":"Constant","summary":"Use to choose the Windows binary form.","signatures":null},{"export":"Time.EndOfHour","kind":"Function","summary":"Returns the last value of the hour.","signatures":[{"label":"Time.EndOfHour(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":30}],"documentation":"Returns the last value of the hour.","SignatureStart":"Time.EndOfHour(","SignatureEnd":")"}]},{"export":"Time.From","kind":"Function","summary":"Creates a time from the given value.","signatures":[{"label":"Time.From(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":22}],"documentation":"Creates a time from the given value.","SignatureStart":"Time.From(","SignatureEnd":")"},{"label":"Time.From(value as any, culture as nullable text)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"label":"culture","documentation":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48}],"documentation":"Creates a time from the given value.","SignatureStart":"Time.From(","SignatureEnd":")"}]},{"export":"Time.FromText","kind":"Function","summary":"Creates a Time from local and universal Time formats.","signatures":[{"label":"Time.FromText(text as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35}],"documentation":"Creates a Time from local and universal Time formats.","SignatureStart":"Time.FromText(","SignatureEnd":")"},{"label":"Time.FromText(text as nullable text, culture as nullable text)","parameters":[{"label":"text","documentation":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"label":"culture","documentation":"nullable text","signatureLabelOffset":37,"signatureLabelEnd":61}],"documentation":"Creates a Time from local and universal Time formats.","SignatureStart":"Time.FromText(","SignatureEnd":")"}]},{"export":"Time.Hour","kind":"Function","summary":"Returns the hour component.","signatures":[{"label":"Time.Hour(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":25}],"documentation":"Returns the hour component.","SignatureStart":"Time.Hour(","SignatureEnd":")"}]},{"export":"Time.Minute","kind":"Function","summary":"Returns the minute component.","signatures":[{"label":"Time.Minute(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":12,"signatureLabelEnd":27}],"documentation":"Returns the minute component.","SignatureStart":"Time.Minute(","SignatureEnd":")"}]},{"export":"Time.Second","kind":"Function","summary":"Returns the second component.","signatures":[{"label":"Time.Second(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":12,"signatureLabelEnd":27}],"documentation":"Returns the second component.","SignatureStart":"Time.Second(","SignatureEnd":")"}]},{"export":"Time.StartOfHour","kind":"Function","summary":"Returns the first value of the hour.","signatures":[{"label":"Time.StartOfHour(dateTime as any)","parameters":[{"label":"dateTime","documentation":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"documentation":"Returns the first value of the hour.","SignatureStart":"Time.StartOfHour(","SignatureEnd":")"}]},{"export":"Time.ToRecord","kind":"Function","summary":"Returns a record containing the Time value's parts.","signatures":[{"label":"Time.ToRecord(time as time)","parameters":[{"label":"time","documentation":"time","signatureLabelOffset":14,"signatureLabelEnd":26}],"documentation":"Returns a record containing the Time value's parts.","SignatureStart":"Time.ToRecord(","SignatureEnd":")"}]},{"export":"Time.ToText","kind":"Function","summary":"Returns a textual representation of the Time value.","signatures":[{"label":"Time.ToText(time as nullable time)","parameters":[{"label":"time","documentation":"nullable time","signatureLabelOffset":12,"signatureLabelEnd":33}],"documentation":"Returns a textual representation of the Time value.","SignatureStart":"Time.ToText(","SignatureEnd":")"},{"label":"Time.ToText(time as nullable time, format as nullable text)","parameters":[{"label":"time","documentation":"nullable time","signatureLabelOffset":12,"signatureLabelEnd":33},{"label":"format","documentation":"nullable text","signatureLabelOffset":35,"signatureLabelEnd":58}],"documentation":"Returns a textual representation of the Time value.","SignatureStart":"Time.ToText(","SignatureEnd":")"},{"label":"Time.ToText(time as nullable time, format as nullable text, culture as nullable text)","parameters":[{"label":"time","documentation":"nullable time","signatureLabelOffset":12,"signatureLabelEnd":33},{"label":"format","documentation":"nullable text","signatureLabelOffset":35,"signatureLabelEnd":58},{"label":"culture","documentation":"nullable text","signatureLabelOffset":60,"signatureLabelEnd":84}],"documentation":"Returns a textual representation of the Time value.","SignatureStart":"Time.ToText(","SignatureEnd":")"}]},{"export":"Time.Type","kind":"Type","summary":"The type that represents all time values.","signatures":null},{"export":"TraceLevel.Critical","kind":"Constant","summary":"Specifies Critical trace level.","signatures":null},{"export":"TraceLevel.Error","kind":"Constant","summary":"Specifies Error trace level.","signatures":null},{"export":"TraceLevel.Information","kind":"Constant","summary":"Specifies Information trace level.","signatures":null},{"export":"TraceLevel.Type","kind":"Type","summary":"Specifies the trace level.","signatures":null},{"export":"TraceLevel.Verbose","kind":"Constant","summary":"Specifies Verbose trace level.","signatures":null},{"export":"TraceLevel.Warning","kind":"Constant","summary":"Specifies Warning trace level.","signatures":null},{"export":"Type.AddTableKey","kind":"Function","summary":"Adds a key to the given table type.","signatures":[{"label":"Type.AddTableKey(table as type, columns as list, isPrimary as logical)","parameters":[{"label":"table","documentation":"type","signatureLabelOffset":17,"signatureLabelEnd":30},{"label":"columns","documentation":"list","signatureLabelOffset":32,"signatureLabelEnd":47},{"label":"isPrimary","documentation":"logical","signatureLabelOffset":49,"signatureLabelEnd":69}],"documentation":"Adds a key to the given table type.","SignatureStart":"Type.AddTableKey(","SignatureEnd":")"}]},{"export":"Type.ClosedRecord","kind":"Function","summary":"Returns a closed version of the given record type (or the same type, if it is already closed).","signatures":[{"label":"Type.ClosedRecord(type as type)","parameters":[{"label":"type","documentation":"type","signatureLabelOffset":18,"signatureLabelEnd":30}],"documentation":"Returns a closed version of the given record type (or the same type, if it is already closed).","SignatureStart":"Type.ClosedRecord(","SignatureEnd":")"}]},{"export":"Type.Facets","kind":"Function","summary":"Returns the facets of a type.","signatures":[{"label":"Type.Facets(type as type)","parameters":[{"label":"type","documentation":"type","signatureLabelOffset":12,"signatureLabelEnd":24}],"documentation":"Returns the facets of a type.","SignatureStart":"Type.Facets(","SignatureEnd":")"}]},{"export":"Type.ForFunction","kind":"Function","summary":"Returns a type that represents functions with specific parameter and return type constraints.","signatures":[{"label":"Type.ForFunction(signature as record, min as number)","parameters":[{"label":"signature","documentation":"record","signatureLabelOffset":17,"signatureLabelEnd":36},{"label":"min","documentation":"number","signatureLabelOffset":38,"signatureLabelEnd":51}],"documentation":"Returns a type that represents functions with specific parameter and return type constraints.","SignatureStart":"Type.ForFunction(","SignatureEnd":")"}]},{"export":"Type.ForRecord","kind":"Function","summary":"Returns a type that represents records with specific type constraints on fields.","signatures":[{"label":"Type.ForRecord(fields as record, open as logical)","parameters":[{"label":"fields","documentation":"record","signatureLabelOffset":15,"signatureLabelEnd":31},{"label":"open","documentation":"logical","signatureLabelOffset":33,"signatureLabelEnd":48}],"documentation":"Returns a type that represents records with specific type constraints on fields.","SignatureStart":"Type.ForRecord(","SignatureEnd":")"}]},{"export":"Type.FunctionParameters","kind":"Function","summary":"Returns a record with field values set to the name of the parameters of a function type, and their values set to their corresponding types.","signatures":[{"label":"Type.FunctionParameters(type as type)","parameters":[{"label":"type","documentation":"type","signatureLabelOffset":24,"signatureLabelEnd":36}],"documentation":"Returns a record with field values set to the name of the parameters of a function type, and their values set to their corresponding types.","SignatureStart":"Type.FunctionParameters(","SignatureEnd":")"}]},{"export":"Type.FunctionRequiredParameters","kind":"Function","summary":"Returns a number indicating the minimum number of parameters required to invoke the type of function.","signatures":[{"label":"Type.FunctionRequiredParameters(type as type)","parameters":[{"label":"type","documentation":"type","signatureLabelOffset":32,"signatureLabelEnd":44}],"documentation":"Returns a number indicating the minimum number of parameters required to invoke the type of function.","SignatureStart":"Type.FunctionRequiredParameters(","SignatureEnd":")"}]},{"export":"Type.FunctionReturn","kind":"Function","summary":"Returns a type returned by a function type.","signatures":[{"label":"Type.FunctionReturn(type as type)","parameters":[{"label":"type","documentation":"type","signatureLabelOffset":20,"signatureLabelEnd":32}],"documentation":"Returns a type returned by a function type.","SignatureStart":"Type.FunctionReturn(","SignatureEnd":")"}]},{"export":"Type.Is","kind":"Function","summary":"Type.Is","signatures":[{"label":"Type.Is(type1 as type, type2 as type)","parameters":[{"label":"type1","documentation":"type","signatureLabelOffset":8,"signatureLabelEnd":21},{"label":"type2","documentation":"type","signatureLabelOffset":23,"signatureLabelEnd":36}],"documentation":"Type.Is","SignatureStart":"Type.Is(","SignatureEnd":")"}]},{"export":"Type.IsNullable","kind":"Function","summary":"Returns true if a type is a nullable type; otherwise, false.","signatures":[{"label":"Type.IsNullable(type as type)","parameters":[{"label":"type","documentation":"type","signatureLabelOffset":16,"signatureLabelEnd":28}],"documentation":"Returns true if a type is a nullable type; otherwise, false.","SignatureStart":"Type.IsNullable(","SignatureEnd":")"}]},{"export":"Type.IsOpenRecord","kind":"Function","summary":"Returns whether a record type is open.","signatures":[{"label":"Type.IsOpenRecord(type as type)","parameters":[{"label":"type","documentation":"type","signatureLabelOffset":18,"signatureLabelEnd":30}],"documentation":"Returns whether a record type is open.","SignatureStart":"Type.IsOpenRecord(","SignatureEnd":")"}]},{"export":"Type.ListItem","kind":"Function","summary":"Returns an item type from a list type.","signatures":[{"label":"Type.ListItem(type as type)","parameters":[{"label":"type","documentation":"type","signatureLabelOffset":14,"signatureLabelEnd":26}],"documentation":"Returns an item type from a list type.","SignatureStart":"Type.ListItem(","SignatureEnd":")"}]},{"export":"Type.NonNullable","kind":"Function","summary":"Returns the non nullable type from a type.","signatures":[{"label":"Type.NonNullable(type as type)","parameters":[{"label":"type","documentation":"type","signatureLabelOffset":17,"signatureLabelEnd":29}],"documentation":"Returns the non nullable type from a type.","SignatureStart":"Type.NonNullable(","SignatureEnd":")"}]},{"export":"Type.OpenRecord","kind":"Function","summary":"Returns an opened version of the given record type (or the same type, if it is already open).","signatures":[{"label":"Type.OpenRecord(type as type)","parameters":[{"label":"type","documentation":"type","signatureLabelOffset":16,"signatureLabelEnd":28}],"documentation":"Returns an opened version of the given record type (or the same type, if it is already open).","SignatureStart":"Type.OpenRecord(","SignatureEnd":")"}]},{"export":"Type.RecordFields","kind":"Function","summary":"Returns a record describing the fields of a record type with each field of the returned record type having a corresponding name and a value.","signatures":[{"label":"Type.RecordFields(type as type)","parameters":[{"label":"type","documentation":"type","signatureLabelOffset":18,"signatureLabelEnd":30}],"documentation":"Returns a record describing the fields of a record type with each field of the returned record type having a corresponding name and a value.","SignatureStart":"Type.RecordFields(","SignatureEnd":")"}]},{"export":"Type.ReplaceFacets","kind":"Function","summary":"Replaces the facets of a type.","signatures":[{"label":"Type.ReplaceFacets(type as type, facets as record)","parameters":[{"label":"type","documentation":"type","signatureLabelOffset":19,"signatureLabelEnd":31},{"label":"facets","documentation":"record","signatureLabelOffset":33,"signatureLabelEnd":49}],"documentation":"Replaces the facets of a type.","SignatureStart":"Type.ReplaceFacets(","SignatureEnd":")"}]},{"export":"Type.ReplaceTableKeys","kind":"Function","summary":"Returns a new table type with all keys replaced by the specified list of keys.","signatures":[{"label":"Type.ReplaceTableKeys(tableType as type, keys as list)","parameters":[{"label":"tableType","documentation":"type","signatureLabelOffset":22,"signatureLabelEnd":39},{"label":"keys","documentation":"list","signatureLabelOffset":41,"signatureLabelEnd":53}],"documentation":"Returns a new table type with all keys replaced by the specified list of keys.","SignatureStart":"Type.ReplaceTableKeys(","SignatureEnd":")"}]},{"export":"Type.TableColumn","kind":"Function","summary":"Returns the type of a column in a table.","signatures":[{"label":"Type.TableColumn(tableType as type, column as text)","parameters":[{"label":"tableType","documentation":"type","signatureLabelOffset":17,"signatureLabelEnd":34},{"label":"column","documentation":"text","signatureLabelOffset":36,"signatureLabelEnd":50}],"documentation":"Returns the type of a column in a table.","SignatureStart":"Type.TableColumn(","SignatureEnd":")"}]},{"export":"Type.TableKeys","kind":"Function","summary":"Returns the possibly empty list of keys for the given table type.","signatures":[{"label":"Type.TableKeys(tableType as type)","parameters":[{"label":"tableType","documentation":"type","signatureLabelOffset":15,"signatureLabelEnd":32}],"documentation":"Returns the possibly empty list of keys for the given table type.","SignatureStart":"Type.TableKeys(","SignatureEnd":")"}]},{"export":"Type.TableRow","kind":"Function","summary":"Type.TableRow","signatures":[{"label":"Type.TableRow(table as type)","parameters":[{"label":"table","documentation":"type","signatureLabelOffset":14,"signatureLabelEnd":27}],"documentation":"Type.TableRow","SignatureStart":"Type.TableRow(","SignatureEnd":")"}]},{"export":"Type.TableSchema","kind":"Function","summary":"Returns a table containing a description of the columns (i.e. the schema) of the specified table type.","signatures":[{"label":"Type.TableSchema(tableType as type)","parameters":[{"label":"tableType","documentation":"type","signatureLabelOffset":17,"signatureLabelEnd":34}],"documentation":"Returns a table containing a description of the columns (i.e. the schema) of the specified table type.","SignatureStart":"Type.TableSchema(","SignatureEnd":")"}]},{"export":"Type.Type","kind":"Type","summary":"The type that represents all types.","signatures":null},{"export":"Type.Union","kind":"Function","summary":"Returns the union of a list of types.","signatures":[{"label":"Type.Union(types as list)","parameters":[{"label":"types","documentation":"list","signatureLabelOffset":11,"signatureLabelEnd":24}],"documentation":"Returns the union of a list of types.","SignatureStart":"Type.Union(","SignatureEnd":")"}]},{"export":"Uri.BuildQueryString","kind":"Function","summary":"Assemble a record into a URI query string.","signatures":[{"label":"Uri.BuildQueryString(query as record)","parameters":[{"label":"query","documentation":"record","signatureLabelOffset":21,"signatureLabelEnd":36}],"documentation":"Assemble a record into a URI query string.","SignatureStart":"Uri.BuildQueryString(","SignatureEnd":")"}]},{"export":"Uri.Combine","kind":"Function","summary":"Returns an absolute URI that is the combination of the input base URI and relative URI.","signatures":[{"label":"Uri.Combine(baseUri as text, relativeUri as text)","parameters":[{"label":"baseUri","documentation":"text","signatureLabelOffset":12,"signatureLabelEnd":27},{"label":"relativeUri","documentation":"text","signatureLabelOffset":29,"signatureLabelEnd":48}],"documentation":"Returns an absolute URI that is the combination of the input base URI and relative URI.","SignatureStart":"Uri.Combine(","SignatureEnd":")"}]},{"export":"Uri.EscapeDataString","kind":"Function","summary":"Encodes special characters in accordance with RFC 3986.","signatures":[{"label":"Uri.EscapeDataString(data as text)","parameters":[{"label":"data","documentation":"text","signatureLabelOffset":21,"signatureLabelEnd":33}],"documentation":"Encodes special characters in accordance with RFC 3986.","SignatureStart":"Uri.EscapeDataString(","SignatureEnd":")"}]},{"export":"Uri.Parts","kind":"Function","summary":"Returns the parts of the input absolute URI as a record.","signatures":[{"label":"Uri.Parts(absoluteUri as text)","parameters":[{"label":"absoluteUri","documentation":"text","signatureLabelOffset":10,"signatureLabelEnd":29}],"documentation":"Returns the parts of the input absolute URI as a record.","SignatureStart":"Uri.Parts(","SignatureEnd":")"}]},{"export":"Uri.Type","kind":"Type","summary":"The type that represents a text URI.","signatures":null},{"export":"Value.Add","kind":"Function","summary":"Returns the sum of the two values.","signatures":[{"label":"Value.Add(value1 as any, value2 as any)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":23},{"label":"value2","documentation":"any","signatureLabelOffset":25,"signatureLabelEnd":38}],"documentation":"Returns the sum of the two values.","SignatureStart":"Value.Add(","SignatureEnd":")"},{"label":"Value.Add(value1 as any, value2 as any, precision as nullable number)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":10,"signatureLabelEnd":23},{"label":"value2","documentation":"any","signatureLabelOffset":25,"signatureLabelEnd":38},{"label":"precision","documentation":"nullable number","signatureLabelOffset":40,"signatureLabelEnd":68}],"documentation":"Returns the sum of the two values.","SignatureStart":"Value.Add(","SignatureEnd":")"}]},{"export":"Value.As","kind":"Function","summary":"Value.As","signatures":[{"label":"Value.As(value as any, type as type)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":9,"signatureLabelEnd":21},{"label":"type","documentation":"type","signatureLabelOffset":23,"signatureLabelEnd":35}],"documentation":"Value.As","SignatureStart":"Value.As(","SignatureEnd":")"}]},{"export":"Value.Compare","kind":"Function","summary":"Returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second one.","signatures":[{"label":"Value.Compare(value1 as any, value2 as any)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":27},{"label":"value2","documentation":"any","signatureLabelOffset":29,"signatureLabelEnd":42}],"documentation":"Returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second one.","SignatureStart":"Value.Compare(","SignatureEnd":")"},{"label":"Value.Compare(value1 as any, value2 as any, precision as nullable number)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":14,"signatureLabelEnd":27},{"label":"value2","documentation":"any","signatureLabelOffset":29,"signatureLabelEnd":42},{"label":"precision","documentation":"nullable number","signatureLabelOffset":44,"signatureLabelEnd":72}],"documentation":"Returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second one.","SignatureStart":"Value.Compare(","SignatureEnd":")"}]},{"export":"Value.Divide","kind":"Function","summary":"Returns the result of dividing the first value by the second.","signatures":[{"label":"Value.Divide(value1 as any, value2 as any)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"label":"value2","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":41}],"documentation":"Returns the result of dividing the first value by the second.","SignatureStart":"Value.Divide(","SignatureEnd":")"},{"label":"Value.Divide(value1 as any, value2 as any, precision as nullable number)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"label":"value2","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":41},{"label":"precision","documentation":"nullable number","signatureLabelOffset":43,"signatureLabelEnd":71}],"documentation":"Returns the result of dividing the first value by the second.","SignatureStart":"Value.Divide(","SignatureEnd":")"}]},{"export":"Value.Equals","kind":"Function","summary":"Returns whether two values are equal.","signatures":[{"label":"Value.Equals(value1 as any, value2 as any)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"label":"value2","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":41}],"documentation":"Returns whether two values are equal.","SignatureStart":"Value.Equals(","SignatureEnd":")"},{"label":"Value.Equals(value1 as any, value2 as any, precision as nullable number)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"label":"value2","documentation":"any","signatureLabelOffset":28,"signatureLabelEnd":41},{"label":"precision","documentation":"nullable number","signatureLabelOffset":43,"signatureLabelEnd":71}],"documentation":"Returns whether two values are equal.","SignatureStart":"Value.Equals(","SignatureEnd":")"}]},{"export":"Value.Firewall","kind":"Function","summary":"Value.Firewall","signatures":[{"label":"Value.Firewall(key as text)","parameters":[{"label":"key","documentation":"text","signatureLabelOffset":15,"signatureLabelEnd":26}],"documentation":"Value.Firewall","SignatureStart":"Value.Firewall(","SignatureEnd":")"}]},{"export":"Value.FromText","kind":"Function","summary":"Creates a strongly-typed value from a textual representation.","signatures":[{"label":"Value.FromText(text as any)","parameters":[{"label":"text","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":26}],"documentation":"Creates a strongly-typed value from a textual representation.","SignatureStart":"Value.FromText(","SignatureEnd":")"},{"label":"Value.FromText(text as any, culture as nullable text)","parameters":[{"label":"text","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":26},{"label":"culture","documentation":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":52}],"documentation":"Creates a strongly-typed value from a textual representation.","SignatureStart":"Value.FromText(","SignatureEnd":")"}]},{"export":"Value.Is","kind":"Function","summary":"Value.Is","signatures":[{"label":"Value.Is(value as any, type as type)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":9,"signatureLabelEnd":21},{"label":"type","documentation":"type","signatureLabelOffset":23,"signatureLabelEnd":35}],"documentation":"Value.Is","SignatureStart":"Value.Is(","SignatureEnd":")"}]},{"export":"Value.Metadata","kind":"Function","summary":"Returns a record containing the input's metadata.","signatures":[{"label":"Value.Metadata(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":27}],"documentation":"Returns a record containing the input's metadata.","SignatureStart":"Value.Metadata(","SignatureEnd":")"}]},{"export":"Value.Multiply","kind":"Function","summary":"Returns the product of the two values.","signatures":[{"label":"Value.Multiply(value1 as any, value2 as any)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":28},{"label":"value2","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":43}],"documentation":"Returns the product of the two values.","SignatureStart":"Value.Multiply(","SignatureEnd":")"},{"label":"Value.Multiply(value1 as any, value2 as any, precision as nullable number)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":28},{"label":"value2","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":43},{"label":"precision","documentation":"nullable number","signatureLabelOffset":45,"signatureLabelEnd":73}],"documentation":"Returns the product of the two values.","SignatureStart":"Value.Multiply(","SignatureEnd":")"}]},{"export":"Value.NativeQuery","kind":"Function","summary":"Evaluates a query against a target.","signatures":[{"label":"Value.NativeQuery(target as any, query as text)","parameters":[{"label":"target","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":31},{"label":"query","documentation":"text","signatureLabelOffset":33,"signatureLabelEnd":46}],"documentation":"Evaluates a query against a target.","SignatureStart":"Value.NativeQuery(","SignatureEnd":")"},{"label":"Value.NativeQuery(target as any, query as text, parameters as any)","parameters":[{"label":"target","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":31},{"label":"query","documentation":"text","signatureLabelOffset":33,"signatureLabelEnd":46},{"label":"parameters","documentation":"any","signatureLabelOffset":48,"signatureLabelEnd":65}],"documentation":"Evaluates a query against a target.","SignatureStart":"Value.NativeQuery(","SignatureEnd":")"},{"label":"Value.NativeQuery(target as any, query as text, parameters as any, options as nullable record)","parameters":[{"label":"target","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":31},{"label":"query","documentation":"text","signatureLabelOffset":33,"signatureLabelEnd":46},{"label":"parameters","documentation":"any","signatureLabelOffset":48,"signatureLabelEnd":65},{"label":"options","documentation":"nullable record","signatureLabelOffset":67,"signatureLabelEnd":93}],"documentation":"Evaluates a query against a target.","SignatureStart":"Value.NativeQuery(","SignatureEnd":")"}]},{"export":"Value.NullableEquals","kind":"Function","summary":"Returns whether two values are equal.","signatures":[{"label":"Value.NullableEquals(value1 as any, value2 as any)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":21,"signatureLabelEnd":34},{"label":"value2","documentation":"any","signatureLabelOffset":36,"signatureLabelEnd":49}],"documentation":"Returns whether two values are equal.","SignatureStart":"Value.NullableEquals(","SignatureEnd":")"},{"label":"Value.NullableEquals(value1 as any, value2 as any, precision as nullable number)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":21,"signatureLabelEnd":34},{"label":"value2","documentation":"any","signatureLabelOffset":36,"signatureLabelEnd":49},{"label":"precision","documentation":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":79}],"documentation":"Returns whether two values are equal.","SignatureStart":"Value.NullableEquals(","SignatureEnd":")"}]},{"export":"Value.RemoveMetadata","kind":"Function","summary":"Strips the input of metadata.","signatures":[{"label":"Value.RemoveMetadata(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":21,"signatureLabelEnd":33}],"documentation":"Strips the input of metadata.","SignatureStart":"Value.RemoveMetadata(","SignatureEnd":")"},{"label":"Value.RemoveMetadata(value as any, metaValue as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":21,"signatureLabelEnd":33},{"label":"metaValue","documentation":"any","signatureLabelOffset":35,"signatureLabelEnd":51}],"documentation":"Strips the input of metadata.","SignatureStart":"Value.RemoveMetadata(","SignatureEnd":")"}]},{"export":"Value.ReplaceMetadata","kind":"Function","summary":"Replaces the input's metadata information.","signatures":[{"label":"Value.ReplaceMetadata(value as any, metaValue as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":22,"signatureLabelEnd":34},{"label":"metaValue","documentation":"any","signatureLabelOffset":36,"signatureLabelEnd":52}],"documentation":"Replaces the input's metadata information.","SignatureStart":"Value.ReplaceMetadata(","SignatureEnd":")"}]},{"export":"Value.ReplaceType","kind":"Function","summary":"Value.ReplaceType","signatures":[{"label":"Value.ReplaceType(value as any, type as type)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":30},{"label":"type","documentation":"type","signatureLabelOffset":32,"signatureLabelEnd":44}],"documentation":"Value.ReplaceType","SignatureStart":"Value.ReplaceType(","SignatureEnd":")"}]},{"export":"Value.Subtract","kind":"Function","summary":"Returns the difference of the two values.","signatures":[{"label":"Value.Subtract(value1 as any, value2 as any)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":28},{"label":"value2","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":43}],"documentation":"Returns the difference of the two values.","SignatureStart":"Value.Subtract(","SignatureEnd":")"},{"label":"Value.Subtract(value1 as any, value2 as any, precision as nullable number)","parameters":[{"label":"value1","documentation":"any","signatureLabelOffset":15,"signatureLabelEnd":28},{"label":"value2","documentation":"any","signatureLabelOffset":30,"signatureLabelEnd":43},{"label":"precision","documentation":"nullable number","signatureLabelOffset":45,"signatureLabelEnd":73}],"documentation":"Returns the difference of the two values.","SignatureStart":"Value.Subtract(","SignatureEnd":")"}]},{"export":"Value.Type","kind":"Function","summary":"Returns the type of the given value.","signatures":[{"label":"Value.Type(value as any)","parameters":[{"label":"value","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":23}],"documentation":"Returns the type of the given value.","SignatureStart":"Value.Type(","SignatureEnd":")"}]},{"export":"Variable.Value","kind":"Function","summary":"Variable.Value","signatures":[{"label":"Variable.Value(identifier as text)","parameters":[{"label":"identifier","documentation":"text","signatureLabelOffset":15,"signatureLabelEnd":33}],"documentation":"Variable.Value","SignatureStart":"Variable.Value(","SignatureEnd":")"}]},{"export":"Xml.Document","kind":"Function","summary":"Returns the contents of the XML document as a hierarchical table.","signatures":[{"label":"Xml.Document(contents as any)","parameters":[{"label":"contents","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":28}],"documentation":"Returns the contents of the XML document as a hierarchical table.","SignatureStart":"Xml.Document(","SignatureEnd":")"},{"label":"Xml.Document(contents as any, encoding as nullable number)","parameters":[{"label":"contents","documentation":"any","signatureLabelOffset":13,"signatureLabelEnd":28},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":30,"signatureLabelEnd":57}],"documentation":"Returns the contents of the XML document as a hierarchical table.","SignatureStart":"Xml.Document(","SignatureEnd":")"}]},{"export":"Xml.Tables","kind":"Function","summary":"Returns the contents of the XML document as a nested collection of flattened tables.","signatures":[{"label":"Xml.Tables(contents as any)","parameters":[{"label":"contents","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":26}],"documentation":"Returns the contents of the XML document as a nested collection of flattened tables.","SignatureStart":"Xml.Tables(","SignatureEnd":")"},{"label":"Xml.Tables(contents as any, options as nullable record)","parameters":[{"label":"contents","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":26},{"label":"options","documentation":"nullable record","signatureLabelOffset":28,"signatureLabelEnd":54}],"documentation":"Returns the contents of the XML document as a nested collection of flattened tables.","SignatureStart":"Xml.Tables(","SignatureEnd":")"},{"label":"Xml.Tables(contents as any, options as nullable record, encoding as nullable number)","parameters":[{"label":"contents","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":26},{"label":"options","documentation":"nullable record","signatureLabelOffset":28,"signatureLabelEnd":54},{"label":"encoding","documentation":"nullable number","signatureLabelOffset":56,"signatureLabelEnd":83}],"documentation":"Returns the contents of the XML document as a nested collection of flattened tables.","SignatureStart":"Xml.Tables(","SignatureEnd":")"}]}]},{"module":"Access","version":null,"exports":[{"export":"Access.Database","kind":"Function","summary":"Returns a structural representation of an Access database.","signatures":[{"label":"Access.Database(database as binary)","parameters":[{"label":"database","documentation":"binary","signatureLabelOffset":16,"signatureLabelEnd":34}],"documentation":"Returns a structural representation of an Access database.","SignatureStart":"Access.Database(","SignatureEnd":")"},{"label":"Access.Database(database as binary, options as nullable record)","parameters":[{"label":"database","documentation":"binary","signatureLabelOffset":16,"signatureLabelEnd":34},{"label":"options","documentation":"nullable record","signatureLabelOffset":36,"signatureLabelEnd":62}],"documentation":"Returns a structural representation of an Access database.","SignatureStart":"Access.Database(","SignatureEnd":")"}]}]},{"module":"ActiveDirectory","version":null,"exports":[{"export":"ActiveDirectory.Domains","kind":"Function","summary":"Returns a list of Active Directory domains in the same forest as the specified domain or of the current machine's domain if none is specified.","signatures":[{"label":"ActiveDirectory.Domains()","parameters":[],"documentation":"Returns a list of Active Directory domains in the same forest as the specified domain or of the current machine's domain if none is specified.","SignatureStart":"ActiveDirectory.Domains(","SignatureEnd":")"},{"label":"ActiveDirectory.Domains(forestRootDomainName as nullable text)","parameters":[{"label":"forestRootDomainName","documentation":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":61}],"documentation":"Returns a list of Active Directory domains in the same forest as the specified domain or of the current machine's domain if none is specified.","SignatureStart":"ActiveDirectory.Domains(","SignatureEnd":")"}]}]},{"module":"AdobeAnalyticsCube","version":null,"exports":[{"export":"AdobeAnalytics.Cubes","kind":"Function","summary":"Returns the report suites in Adobe Analytics.","signatures":[{"label":"AdobeAnalytics.Cubes()","parameters":[],"documentation":"Returns the report suites in Adobe Analytics.","SignatureStart":"AdobeAnalytics.Cubes(","SignatureEnd":")"},{"label":"AdobeAnalytics.Cubes(options as nullable record)","parameters":[{"label":"options","documentation":"nullable record","signatureLabelOffset":21,"signatureLabelEnd":47}],"documentation":"Returns the report suites in Adobe Analytics.","SignatureStart":"AdobeAnalytics.Cubes(","SignatureEnd":")"}]}]},{"module":"AdoDotNet","version":null,"exports":[{"export":"AdoDotNet.DataSource","kind":"Function","summary":"Returns the schema collection for an ADO.NET data source.","signatures":[{"label":"AdoDotNet.DataSource(providerName as text, connectionString as any)","parameters":[{"label":"providerName","documentation":"text","signatureLabelOffset":21,"signatureLabelEnd":41},{"label":"connectionString","documentation":"any","signatureLabelOffset":43,"signatureLabelEnd":66}],"documentation":"Returns the schema collection for an ADO.NET data source.","SignatureStart":"AdoDotNet.DataSource(","SignatureEnd":")"},{"label":"AdoDotNet.DataSource(providerName as text, connectionString as any, options as nullable record)","parameters":[{"label":"providerName","documentation":"text","signatureLabelOffset":21,"signatureLabelEnd":41},{"label":"connectionString","documentation":"any","signatureLabelOffset":43,"signatureLabelEnd":66},{"label":"options","documentation":"nullable record","signatureLabelOffset":68,"signatureLabelEnd":94}],"documentation":"Returns the schema collection for an ADO.NET data source.","SignatureStart":"AdoDotNet.DataSource(","SignatureEnd":")"}]},{"export":"AdoDotNet.Query","kind":"Function","summary":"Returns the result of running a native query on an ADO.NET data source.","signatures":[{"label":"AdoDotNet.Query(providerName as text, connectionString as any, query as text)","parameters":[{"label":"providerName","documentation":"text","signatureLabelOffset":16,"signatureLabelEnd":36},{"label":"connectionString","documentation":"any","signatureLabelOffset":38,"signatureLabelEnd":61},{"label":"query","documentation":"text","signatureLabelOffset":63,"signatureLabelEnd":76}],"documentation":"Returns the result of running a native query on an ADO.NET data source.","SignatureStart":"AdoDotNet.Query(","SignatureEnd":")"},{"label":"AdoDotNet.Query(providerName as text, connectionString as any, query as text, options as nullable record)","parameters":[{"label":"providerName","documentation":"text","signatureLabelOffset":16,"signatureLabelEnd":36},{"label":"connectionString","documentation":"any","signatureLabelOffset":38,"signatureLabelEnd":61},{"label":"query","documentation":"text","signatureLabelOffset":63,"signatureLabelEnd":76},{"label":"options","documentation":"nullable record","signatureLabelOffset":78,"signatureLabelEnd":104}],"documentation":"Returns the result of running a native query on an ADO.NET data source.","SignatureStart":"AdoDotNet.Query(","SignatureEnd":")"}]}]},{"module":"AnalysisServices","version":null,"exports":[{"export":"AnalysisServices.Database","kind":"Function","summary":"Returns a table of multidimensional cubes or tabular models from the Analysis Services database.","signatures":[{"label":"AnalysisServices.Database(server as text, database as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":26,"signatureLabelEnd":40},{"label":"database","documentation":"text","signatureLabelOffset":42,"signatureLabelEnd":58}],"documentation":"Returns a table of multidimensional cubes or tabular models from the Analysis Services database.","SignatureStart":"AnalysisServices.Database(","SignatureEnd":")"},{"label":"AnalysisServices.Database(server as text, database as text, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":26,"signatureLabelEnd":40},{"label":"database","documentation":"text","signatureLabelOffset":42,"signatureLabelEnd":58},{"label":"options","documentation":"nullable record","signatureLabelOffset":60,"signatureLabelEnd":86}],"documentation":"Returns a table of multidimensional cubes or tabular models from the Analysis Services database.","SignatureStart":"AnalysisServices.Database(","SignatureEnd":")"}]},{"export":"AnalysisServices.Databases","kind":"Function","summary":"Returns the Analysis Services databases on a particular host.","signatures":[{"label":"AnalysisServices.Databases(server as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":27,"signatureLabelEnd":41}],"documentation":"Returns the Analysis Services databases on a particular host.","SignatureStart":"AnalysisServices.Databases(","SignatureEnd":")"},{"label":"AnalysisServices.Databases(server as text, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":27,"signatureLabelEnd":41},{"label":"options","documentation":"nullable record","signatureLabelOffset":43,"signatureLabelEnd":69}],"documentation":"Returns the Analysis Services databases on a particular host.","SignatureStart":"AnalysisServices.Databases(","SignatureEnd":")"}]}]},{"module":"AzureBlob","version":null,"exports":[{"export":"AzureStorage.BlobContents","kind":"Function","summary":"Returns the content of the specified blob from an Azure storage vault.","signatures":[{"label":"AzureStorage.BlobContents(url as text)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":26,"signatureLabelEnd":37}],"documentation":"Returns the content of the specified blob from an Azure storage vault.","SignatureStart":"AzureStorage.BlobContents(","SignatureEnd":")"},{"label":"AzureStorage.BlobContents(url as text, options as nullable record)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":26,"signatureLabelEnd":37},{"label":"options","documentation":"nullable record","signatureLabelOffset":39,"signatureLabelEnd":65}],"documentation":"Returns the content of the specified blob from an Azure storage vault.","SignatureStart":"AzureStorage.BlobContents(","SignatureEnd":")"}]},{"export":"AzureStorage.Blobs","kind":"Function","summary":"Returns a navigational table containing the containers found in the specified account from an Azure storage vault.","signatures":[{"label":"AzureStorage.Blobs(account as text)","parameters":[{"label":"account","documentation":"text","signatureLabelOffset":19,"signatureLabelEnd":34}],"documentation":"Returns a navigational table containing the containers found in the specified account from an Azure storage vault.","SignatureStart":"AzureStorage.Blobs(","SignatureEnd":")"},{"label":"AzureStorage.Blobs(account as text, options as nullable record)","parameters":[{"label":"account","documentation":"text","signatureLabelOffset":19,"signatureLabelEnd":34},{"label":"options","documentation":"nullable record","signatureLabelOffset":36,"signatureLabelEnd":62}],"documentation":"Returns a navigational table containing the containers found in the specified account from an Azure storage vault.","SignatureStart":"AzureStorage.Blobs(","SignatureEnd":")"}]}]},{"module":"AzureDataLakeStorage","version":null,"exports":[{"export":"AzureStorage.DataLakeContents","kind":"Function","summary":"Returns a navigational table containing the documents found in the specified container from Azure Data Lake Storage.","signatures":[{"label":"AzureStorage.DataLakeContents(url as text)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":30,"signatureLabelEnd":41}],"documentation":"Returns a navigational table containing the documents found in the specified container from Azure Data Lake Storage.","SignatureStart":"AzureStorage.DataLakeContents(","SignatureEnd":")"},{"label":"AzureStorage.DataLakeContents(url as text, options as nullable record)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":30,"signatureLabelEnd":41},{"label":"options","documentation":"nullable record","signatureLabelOffset":43,"signatureLabelEnd":69}],"documentation":"Returns a navigational table containing the documents found in the specified container from Azure Data Lake Storage.","SignatureStart":"AzureStorage.DataLakeContents(","SignatureEnd":")"}]}]},{"module":"AzureTable","version":null,"exports":[{"export":"AzureStorage.Tables","kind":"Function","summary":"Returns a navigational table containing the tables found in the specified account from an Azure storage vault.","signatures":[{"label":"AzureStorage.Tables(account as text)","parameters":[{"label":"account","documentation":"text","signatureLabelOffset":20,"signatureLabelEnd":35}],"documentation":"Returns a navigational table containing the tables found in the specified account from an Azure storage vault.","SignatureStart":"AzureStorage.Tables(","SignatureEnd":")"}]}]},{"module":"Informix","version":null,"exports":[{"export":"Informix.Database","kind":"Function","summary":"Returns a table of SQL tables and views available in an Informix database.","signatures":[{"label":"Informix.Database(server as text, database as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"database","documentation":"text","signatureLabelOffset":34,"signatureLabelEnd":50}],"documentation":"Returns a table of SQL tables and views available in an Informix database.","SignatureStart":"Informix.Database(","SignatureEnd":")"},{"label":"Informix.Database(server as text, database as text, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"database","documentation":"text","signatureLabelOffset":34,"signatureLabelEnd":50},{"label":"options","documentation":"nullable record","signatureLabelOffset":52,"signatureLabelEnd":78}],"documentation":"Returns a table of SQL tables and views available in an Informix database.","SignatureStart":"Informix.Database(","SignatureEnd":")"}]}]},{"module":"DB2","version":null,"exports":[{"export":"DB2.Database","kind":"Function","summary":"Returns a table of SQL tables and views available in a Db2 database.","signatures":[{"label":"DB2.Database(server as text, database as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":13,"signatureLabelEnd":27},{"label":"database","documentation":"text","signatureLabelOffset":29,"signatureLabelEnd":45}],"documentation":"Returns a table of SQL tables and views available in a Db2 database.","SignatureStart":"DB2.Database(","SignatureEnd":")"},{"label":"DB2.Database(server as text, database as text, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":13,"signatureLabelEnd":27},{"label":"database","documentation":"text","signatureLabelOffset":29,"signatureLabelEnd":45},{"label":"options","documentation":"nullable record","signatureLabelOffset":47,"signatureLabelEnd":73}],"documentation":"Returns a table of SQL tables and views available in a Db2 database.","SignatureStart":"DB2.Database(","SignatureEnd":")"}]}]},{"module":"Essbase","version":null,"exports":[{"export":"Essbase.Cubes","kind":"Function","summary":"Returns the cubes in an Essbase instance grouped by Essbase server.","signatures":[{"label":"Essbase.Cubes(url as text)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":14,"signatureLabelEnd":25}],"documentation":"Returns the cubes in an Essbase instance grouped by Essbase server.","SignatureStart":"Essbase.Cubes(","SignatureEnd":")"},{"label":"Essbase.Cubes(url as text, options as nullable record)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":14,"signatureLabelEnd":25},{"label":"options","documentation":"nullable record","signatureLabelOffset":27,"signatureLabelEnd":53}],"documentation":"Returns the cubes in an Essbase instance grouped by Essbase server.","SignatureStart":"Essbase.Cubes(","SignatureEnd":")"}]}]},{"module":"ExcelInterop","version":null,"exports":[{"export":"Excel.CurrentWorkbook","kind":"Function","summary":"Returns the tables in the current Excel Workbook.","signatures":[{"label":"Excel.CurrentWorkbook()","parameters":[],"documentation":"Returns the tables in the current Excel Workbook.","SignatureStart":"Excel.CurrentWorkbook(","SignatureEnd":")"}]}]},{"module":"Exchange","version":null,"exports":[{"export":"Exchange.Contents","kind":"Function","summary":"Returns a table of contents from a Microsoft Exchange account.","signatures":[{"label":"Exchange.Contents()","parameters":[],"documentation":"Returns a table of contents from a Microsoft Exchange account.","SignatureStart":"Exchange.Contents(","SignatureEnd":")"},{"label":"Exchange.Contents(mailboxAddress as nullable text)","parameters":[{"label":"mailboxAddress","documentation":"nullable text","signatureLabelOffset":18,"signatureLabelEnd":49}],"documentation":"Returns a table of contents from a Microsoft Exchange account.","SignatureStart":"Exchange.Contents(","SignatureEnd":")"}]}]},{"module":"Facebook","version":null,"exports":[{"export":"Facebook.Graph","kind":"Function","summary":"Returns a record containing content from the Facebook graph.","signatures":[{"label":"Facebook.Graph(url as text)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":15,"signatureLabelEnd":26}],"documentation":"Returns a record containing content from the Facebook graph.","SignatureStart":"Facebook.Graph(","SignatureEnd":")"}]}]},{"module":"File","version":null,"exports":[{"export":"File.Contents","kind":"Function","summary":"Returns the contents of the specified file as binary.","signatures":[{"label":"File.Contents(path as text)","parameters":[{"label":"path","documentation":"text","signatureLabelOffset":14,"signatureLabelEnd":26}],"documentation":"Returns the contents of the specified file as binary.","SignatureStart":"File.Contents(","SignatureEnd":")"}]},{"export":"Folder.Contents","kind":"Function","summary":"Returns a table containing the properties and contents of the files and folders found in the specifed folder.","signatures":[{"label":"Folder.Contents(path as text)","parameters":[{"label":"path","documentation":"text","signatureLabelOffset":16,"signatureLabelEnd":28}],"documentation":"Returns a table containing the properties and contents of the files and folders found in the specifed folder.","SignatureStart":"Folder.Contents(","SignatureEnd":")"}]},{"export":"Folder.Files","kind":"Function","summary":"Returns a table containing the properties and contents of the files found in the specified folder and subfolders.","signatures":[{"label":"Folder.Files(path as text)","parameters":[{"label":"path","documentation":"text","signatureLabelOffset":13,"signatureLabelEnd":25}],"documentation":"Returns a table containing the properties and contents of the files found in the specified folder and subfolders.","SignatureStart":"Folder.Files(","SignatureEnd":")"}]}]},{"module":"GoogleAnalytics","version":null,"exports":[{"export":"GoogleAnalytics.Accounts","kind":"Function","summary":"Returns Google Analytics accounts.","signatures":[{"label":"GoogleAnalytics.Accounts()","parameters":[],"documentation":"Returns Google Analytics accounts.","SignatureStart":"GoogleAnalytics.Accounts(","SignatureEnd":")"}]}]},{"module":"Hdfs","version":null,"exports":[{"export":"Hdfs.Contents","kind":"Function","summary":"Returns a table containing the properties and contents of the files and folders found in the specified folder from a Hadoop file system.","signatures":[{"label":"Hdfs.Contents(url as text)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":14,"signatureLabelEnd":25}],"documentation":"Returns a table containing the properties and contents of the files and folders found in the specified folder from a Hadoop file system.","SignatureStart":"Hdfs.Contents(","SignatureEnd":")"}]},{"export":"Hdfs.Files","kind":"Function","summary":"Returns a table containing the properties and contents of the files found in the specified folder and subfolders from a Hadoop file system.","signatures":[{"label":"Hdfs.Files(url as text)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":11,"signatureLabelEnd":22}],"documentation":"Returns a table containing the properties and contents of the files found in the specified folder and subfolders from a Hadoop file system.","SignatureStart":"Hdfs.Files(","SignatureEnd":")"}]}]},{"module":"HdInsight","version":null,"exports":[{"export":"HdInsight.Containers","kind":"Function","summary":"Returns a navigational table containing the containers found in the specified account from an Azure storage vault.","signatures":[{"label":"HdInsight.Containers(account as text)","parameters":[{"label":"account","documentation":"text","signatureLabelOffset":21,"signatureLabelEnd":36}],"documentation":"Returns a navigational table containing the containers found in the specified account from an Azure storage vault.","SignatureStart":"HdInsight.Containers(","SignatureEnd":")"}]},{"export":"HdInsight.Contents","kind":"Function","summary":"Returns a navigational table containing the containers found in the specified account from an Azure storage vault.","signatures":[{"label":"HdInsight.Contents(account as text)","parameters":[{"label":"account","documentation":"text","signatureLabelOffset":19,"signatureLabelEnd":34}],"documentation":"Returns a navigational table containing the containers found in the specified account from an Azure storage vault.","SignatureStart":"HdInsight.Contents(","SignatureEnd":")"}]},{"export":"HdInsight.Files","kind":"Function","summary":"Returns a table containing the properties and contents of the blobs found in the specified container from an Azure storage vault.","signatures":[{"label":"HdInsight.Files(account as text, containerName as text)","parameters":[{"label":"account","documentation":"text","signatureLabelOffset":16,"signatureLabelEnd":31},{"label":"containerName","documentation":"text","signatureLabelOffset":33,"signatureLabelEnd":54}],"documentation":"Returns a table containing the properties and contents of the blobs found in the specified container from an Azure storage vault.","SignatureStart":"HdInsight.Files(","SignatureEnd":")"}]}]},{"module":"Html","version":null,"exports":[{"export":"Web.Page","kind":"Function","summary":"Returns the contents of the HTML document broken into its constituent structures, as well as a representation of the full document and its text after removing tags.","signatures":[{"label":"Web.Page(html as any)","parameters":[{"label":"html","documentation":"any","signatureLabelOffset":9,"signatureLabelEnd":20}],"documentation":"Returns the contents of the HTML document broken into its constituent structures, as well as a representation of the full document and its text after removing tags.","SignatureStart":"Web.Page(","SignatureEnd":")"}]}]},{"module":"MQ","version":null,"exports":[{"export":"MQ.Queue","kind":"Function","summary":"Returns a table of messages available in the queue via a non-destructive read.","signatures":[{"label":"MQ.Queue(server as text, queuemanager as text, channel as text, queue as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":9,"signatureLabelEnd":23},{"label":"queuemanager","documentation":"text","signatureLabelOffset":25,"signatureLabelEnd":45},{"label":"channel","documentation":"text","signatureLabelOffset":47,"signatureLabelEnd":62},{"label":"queue","documentation":"text","signatureLabelOffset":64,"signatureLabelEnd":77}],"documentation":"Returns a table of messages available in the queue via a non-destructive read.","SignatureStart":"MQ.Queue(","SignatureEnd":")"},{"label":"MQ.Queue(server as text, queuemanager as text, channel as text, queue as text, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":9,"signatureLabelEnd":23},{"label":"queuemanager","documentation":"text","signatureLabelOffset":25,"signatureLabelEnd":45},{"label":"channel","documentation":"text","signatureLabelOffset":47,"signatureLabelEnd":62},{"label":"queue","documentation":"text","signatureLabelOffset":64,"signatureLabelEnd":77},{"label":"options","documentation":"nullable record","signatureLabelOffset":79,"signatureLabelEnd":105}],"documentation":"Returns a table of messages available in the queue via a non-destructive read.","SignatureStart":"MQ.Queue(","SignatureEnd":")"}]}]},{"module":"MySQL","version":null,"exports":[{"export":"MySQL.Database","kind":"Function","summary":"Returns a table of SQL tables, views, and stored scalar functions available in a MySQL database.","signatures":[{"label":"MySQL.Database(server as text, database as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":15,"signatureLabelEnd":29},{"label":"database","documentation":"text","signatureLabelOffset":31,"signatureLabelEnd":47}],"documentation":"Returns a table of SQL tables, views, and stored scalar functions available in a MySQL database.","SignatureStart":"MySQL.Database(","SignatureEnd":")"},{"label":"MySQL.Database(server as text, database as text, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":15,"signatureLabelEnd":29},{"label":"database","documentation":"text","signatureLabelOffset":31,"signatureLabelEnd":47},{"label":"options","documentation":"nullable record","signatureLabelOffset":49,"signatureLabelEnd":75}],"documentation":"Returns a table of SQL tables, views, and stored scalar functions available in a MySQL database.","SignatureStart":"MySQL.Database(","SignatureEnd":")"}]}]},{"module":"OData","version":null,"exports":[{"export":"OData.Feed","kind":"Function","summary":"Returns a table of OData feeds offered by an OData service.","signatures":[{"label":"OData.Feed(serviceUri as text)","parameters":[{"label":"serviceUri","documentation":"text","signatureLabelOffset":11,"signatureLabelEnd":29}],"documentation":"Returns a table of OData feeds offered by an OData service.","SignatureStart":"OData.Feed(","SignatureEnd":")"},{"label":"OData.Feed(serviceUri as text, headers as nullable record)","parameters":[{"label":"serviceUri","documentation":"text","signatureLabelOffset":11,"signatureLabelEnd":29},{"label":"headers","documentation":"nullable record","signatureLabelOffset":31,"signatureLabelEnd":57}],"documentation":"Returns a table of OData feeds offered by an OData service.","SignatureStart":"OData.Feed(","SignatureEnd":")"},{"label":"OData.Feed(serviceUri as text, headers as nullable record, options as any)","parameters":[{"label":"serviceUri","documentation":"text","signatureLabelOffset":11,"signatureLabelEnd":29},{"label":"headers","documentation":"nullable record","signatureLabelOffset":31,"signatureLabelEnd":57},{"label":"options","documentation":"any","signatureLabelOffset":59,"signatureLabelEnd":73}],"documentation":"Returns a table of OData feeds offered by an OData service.","SignatureStart":"OData.Feed(","SignatureEnd":")"}]},{"export":"ODataOmitValues.Nulls","kind":"Constant","summary":"Allows the OData service to omit null values.","signatures":null},{"export":"ODataOmitValues.Type","kind":"Type","summary":"Specifies the kinds of values an OData service can omit.","signatures":null}]},{"module":"Odbc","version":null,"exports":[{"export":"LimitClauseKind.AnsiSql2008","kind":"Constant","summary":"LimitClauseKind.AnsiSql2008","signatures":null},{"export":"LimitClauseKind.Limit","kind":"Constant","summary":"LimitClauseKind.Limit","signatures":null},{"export":"LimitClauseKind.LimitOffset","kind":"Constant","summary":"LimitClauseKind.LimitOffset","signatures":null},{"export":"LimitClauseKind.None","kind":"Constant","summary":"LimitClauseKind.None","signatures":null},{"export":"LimitClauseKind.Top","kind":"Constant","summary":"LimitClauseKind.Top","signatures":null},{"export":"LimitClauseKind.Type","kind":"Type","summary":"LimitClauseKind.Type","signatures":null},{"export":"Odbc.DataSource","kind":"Function","summary":"Returns a table of SQL tables and views from the ODBC data source. ","signatures":[{"label":"Odbc.DataSource(connectionString as any)","parameters":[{"label":"connectionString","documentation":"any","signatureLabelOffset":16,"signatureLabelEnd":39}],"documentation":"Returns a table of SQL tables and views from the ODBC data source. ","SignatureStart":"Odbc.DataSource(","SignatureEnd":")"},{"label":"Odbc.DataSource(connectionString as any, options as nullable record)","parameters":[{"label":"connectionString","documentation":"any","signatureLabelOffset":16,"signatureLabelEnd":39},{"label":"options","documentation":"nullable record","signatureLabelOffset":41,"signatureLabelEnd":67}],"documentation":"Returns a table of SQL tables and views from the ODBC data source. ","SignatureStart":"Odbc.DataSource(","SignatureEnd":")"}]},{"export":"Odbc.InferOptions","kind":"Function","summary":"Returns the result of trying to infer SQL capabilities for an ODBC driver.","signatures":[{"label":"Odbc.InferOptions(connectionString as any)","parameters":[{"label":"connectionString","documentation":"any","signatureLabelOffset":18,"signatureLabelEnd":41}],"documentation":"Returns the result of trying to infer SQL capabilities for an ODBC driver.","SignatureStart":"Odbc.InferOptions(","SignatureEnd":")"}]},{"export":"Odbc.Query","kind":"Function","summary":"Returns the result of running a native query on an ODBC data source.","signatures":[{"label":"Odbc.Query(connectionString as any, query as text)","parameters":[{"label":"connectionString","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":34},{"label":"query","documentation":"text","signatureLabelOffset":36,"signatureLabelEnd":49}],"documentation":"Returns the result of running a native query on an ODBC data source.","SignatureStart":"Odbc.Query(","SignatureEnd":")"},{"label":"Odbc.Query(connectionString as any, query as text, options as nullable record)","parameters":[{"label":"connectionString","documentation":"any","signatureLabelOffset":11,"signatureLabelEnd":34},{"label":"query","documentation":"text","signatureLabelOffset":36,"signatureLabelEnd":49},{"label":"options","documentation":"nullable record","signatureLabelOffset":51,"signatureLabelEnd":77}],"documentation":"Returns the result of running a native query on an ODBC data source.","SignatureStart":"Odbc.Query(","SignatureEnd":")"}]}]},{"module":"OleDb","version":null,"exports":[{"export":"OleDb.DataSource","kind":"Function","summary":"Returns a table of SQL tables and views from the OLE DB data source.","signatures":[{"label":"OleDb.DataSource(connectionString as any)","parameters":[{"label":"connectionString","documentation":"any","signatureLabelOffset":17,"signatureLabelEnd":40}],"documentation":"Returns a table of SQL tables and views from the OLE DB data source.","SignatureStart":"OleDb.DataSource(","SignatureEnd":")"},{"label":"OleDb.DataSource(connectionString as any, options as nullable record)","parameters":[{"label":"connectionString","documentation":"any","signatureLabelOffset":17,"signatureLabelEnd":40},{"label":"options","documentation":"nullable record","signatureLabelOffset":42,"signatureLabelEnd":68}],"documentation":"Returns a table of SQL tables and views from the OLE DB data source.","SignatureStart":"OleDb.DataSource(","SignatureEnd":")"}]},{"export":"OleDb.Query","kind":"Function","summary":"Returns the result of running a native query on an OLE DB data source.","signatures":[{"label":"OleDb.Query(connectionString as any, query as text)","parameters":[{"label":"connectionString","documentation":"any","signatureLabelOffset":12,"signatureLabelEnd":35},{"label":"query","documentation":"text","signatureLabelOffset":37,"signatureLabelEnd":50}],"documentation":"Returns the result of running a native query on an OLE DB data source.","SignatureStart":"OleDb.Query(","SignatureEnd":")"},{"label":"OleDb.Query(connectionString as any, query as text, options as nullable record)","parameters":[{"label":"connectionString","documentation":"any","signatureLabelOffset":12,"signatureLabelEnd":35},{"label":"query","documentation":"text","signatureLabelOffset":37,"signatureLabelEnd":50},{"label":"options","documentation":"nullable record","signatureLabelOffset":52,"signatureLabelEnd":78}],"documentation":"Returns the result of running a native query on an OLE DB data source.","SignatureStart":"OleDb.Query(","SignatureEnd":")"}]}]},{"module":"Oracle","version":null,"exports":[{"export":"Oracle.Database","kind":"Function","summary":"Returns a table of SQL tables and views from the Oracle database.","signatures":[{"label":"Oracle.Database(server as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":16,"signatureLabelEnd":30}],"documentation":"Returns a table of SQL tables and views from the Oracle database.","SignatureStart":"Oracle.Database(","SignatureEnd":")"},{"label":"Oracle.Database(server as text, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":16,"signatureLabelEnd":30},{"label":"options","documentation":"nullable record","signatureLabelOffset":32,"signatureLabelEnd":58}],"documentation":"Returns a table of SQL tables and views from the Oracle database.","SignatureStart":"Oracle.Database(","SignatureEnd":")"}]}]},{"module":"PostgreSQL","version":null,"exports":[{"export":"PostgreSQL.Database","kind":"Function","summary":"Returns a table of SQL tables and views available in a PostgreSQL database.","signatures":[{"label":"PostgreSQL.Database(server as text, database as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"database","documentation":"text","signatureLabelOffset":36,"signatureLabelEnd":52}],"documentation":"Returns a table of SQL tables and views available in a PostgreSQL database.","SignatureStart":"PostgreSQL.Database(","SignatureEnd":")"},{"label":"PostgreSQL.Database(server as text, database as text, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":20,"signatureLabelEnd":34},{"label":"database","documentation":"text","signatureLabelOffset":36,"signatureLabelEnd":52},{"label":"options","documentation":"nullable record","signatureLabelOffset":54,"signatureLabelEnd":80}],"documentation":"Returns a table of SQL tables and views available in a PostgreSQL database.","SignatureStart":"PostgreSQL.Database(","SignatureEnd":")"}]}]},{"module":"Salesforce","version":null,"exports":[{"export":"Salesforce.Data","kind":"Function","summary":"Returns the objects from the Salesforce account.","signatures":[{"label":"Salesforce.Data()","parameters":[],"documentation":"Returns the objects from the Salesforce account.","SignatureStart":"Salesforce.Data(","SignatureEnd":")"},{"label":"Salesforce.Data(loginUrl as any)","parameters":[{"label":"loginUrl","documentation":"any","signatureLabelOffset":16,"signatureLabelEnd":31}],"documentation":"Returns the objects from the Salesforce account.","SignatureStart":"Salesforce.Data(","SignatureEnd":")"},{"label":"Salesforce.Data(loginUrl as any, options as nullable record)","parameters":[{"label":"loginUrl","documentation":"any","signatureLabelOffset":16,"signatureLabelEnd":31},{"label":"options","documentation":"nullable record","signatureLabelOffset":33,"signatureLabelEnd":59}],"documentation":"Returns the objects from the Salesforce account.","SignatureStart":"Salesforce.Data(","SignatureEnd":")"}]},{"export":"Salesforce.Reports","kind":"Function","summary":"Returns the reports from the Salesforce account.","signatures":[{"label":"Salesforce.Reports()","parameters":[],"documentation":"Returns the reports from the Salesforce account.","SignatureStart":"Salesforce.Reports(","SignatureEnd":")"},{"label":"Salesforce.Reports(loginUrl as nullable text)","parameters":[{"label":"loginUrl","documentation":"nullable text","signatureLabelOffset":19,"signatureLabelEnd":44}],"documentation":"Returns the reports from the Salesforce account.","SignatureStart":"Salesforce.Reports(","SignatureEnd":")"},{"label":"Salesforce.Reports(loginUrl as nullable text, options as nullable record)","parameters":[{"label":"loginUrl","documentation":"nullable text","signatureLabelOffset":19,"signatureLabelEnd":44},{"label":"options","documentation":"nullable record","signatureLabelOffset":46,"signatureLabelEnd":72}],"documentation":"Returns the reports from the Salesforce account.","SignatureStart":"Salesforce.Reports(","SignatureEnd":")"}]}]},{"module":"SapBusinessWarehouse","version":null,"exports":[{"export":"SapBusinessWarehouse.Cubes","kind":"Function","summary":"Returns the InfoCubes and queries in an SAP Business Warehouse system grouped by InfoArea.","signatures":[{"label":"SapBusinessWarehouse.Cubes(server as text, systemNumberOrSystemId as text, clientId as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":27,"signatureLabelEnd":41},{"label":"systemNumberOrSystemId","documentation":"text","signatureLabelOffset":43,"signatureLabelEnd":73},{"label":"clientId","documentation":"text","signatureLabelOffset":75,"signatureLabelEnd":91}],"documentation":"Returns the InfoCubes and queries in an SAP Business Warehouse system grouped by InfoArea.","SignatureStart":"SapBusinessWarehouse.Cubes(","SignatureEnd":")"},{"label":"SapBusinessWarehouse.Cubes(server as text, systemNumberOrSystemId as text, clientId as text, optionsOrLogonGroup as any)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":27,"signatureLabelEnd":41},{"label":"systemNumberOrSystemId","documentation":"text","signatureLabelOffset":43,"signatureLabelEnd":73},{"label":"clientId","documentation":"text","signatureLabelOffset":75,"signatureLabelEnd":91},{"label":"optionsOrLogonGroup","documentation":"any","signatureLabelOffset":93,"signatureLabelEnd":119}],"documentation":"Returns the InfoCubes and queries in an SAP Business Warehouse system grouped by InfoArea.","SignatureStart":"SapBusinessWarehouse.Cubes(","SignatureEnd":")"},{"label":"SapBusinessWarehouse.Cubes(server as text, systemNumberOrSystemId as text, clientId as text, optionsOrLogonGroup as any, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":27,"signatureLabelEnd":41},{"label":"systemNumberOrSystemId","documentation":"text","signatureLabelOffset":43,"signatureLabelEnd":73},{"label":"clientId","documentation":"text","signatureLabelOffset":75,"signatureLabelEnd":91},{"label":"optionsOrLogonGroup","documentation":"any","signatureLabelOffset":93,"signatureLabelEnd":119},{"label":"options","documentation":"nullable record","signatureLabelOffset":121,"signatureLabelEnd":147}],"documentation":"Returns the InfoCubes and queries in an SAP Business Warehouse system grouped by InfoArea.","SignatureStart":"SapBusinessWarehouse.Cubes(","SignatureEnd":")"}]},{"export":"SapBusinessWarehouseExecutionMode.BasXml","kind":"Constant","summary":"'bXML flattening mode' option for MDX execution in SAP Business Warehouse.","signatures":null},{"export":"SapBusinessWarehouseExecutionMode.BasXmlGzip","kind":"Constant","summary":"'Gzip compressed bXML flattening mode' option for MDX execution in SAP Business Warehouse. Recommended for low latency or high volume queries.","signatures":null},{"export":"SapBusinessWarehouseExecutionMode.DataStream","kind":"Constant","summary":"'DataStream flattening mode' option for MDX execution in SAP Business Warehouse.","signatures":null},{"export":"SapBusinessWarehouseExecutionMode.Type","kind":"Type","summary":"Valid options for SAP Business Warehouse execution mode option.","signatures":null}]},{"module":"SapHana","version":null,"exports":[{"export":"SapHana.Database","kind":"Function","summary":"Returns the packages in an SAP HANA database.","signatures":[{"label":"SapHana.Database(server as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":17,"signatureLabelEnd":31}],"documentation":"Returns the packages in an SAP HANA database.","SignatureStart":"SapHana.Database(","SignatureEnd":")"},{"label":"SapHana.Database(server as text, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":17,"signatureLabelEnd":31},{"label":"options","documentation":"nullable record","signatureLabelOffset":33,"signatureLabelEnd":59}],"documentation":"Returns the packages in an SAP HANA database.","SignatureStart":"SapHana.Database(","SignatureEnd":")"}]},{"export":"SapHanaDistribution.All","kind":"Constant","summary":"'All' distribution option for SAP HANA.","signatures":null},{"export":"SapHanaDistribution.Connection","kind":"Constant","summary":"'Connection' distribution option for SAP HANA.","signatures":null},{"export":"SapHanaDistribution.Off","kind":"Constant","summary":"'Off' distribution option for SAP HANA.","signatures":null},{"export":"SapHanaDistribution.Statement","kind":"Constant","summary":"'Statement' distribution option for SAP HANA.","signatures":null},{"export":"SapHanaDistribution.Type","kind":"Type","summary":"Valid options for SAP HANA distribution option.","signatures":null},{"export":"SapHanaRangeOperator.Equals","kind":"Constant","summary":"'Equals' range operator for SAP HANA input parameters.","signatures":null},{"export":"SapHanaRangeOperator.GreaterThan","kind":"Constant","summary":"'Greater than' range operator for SAP HANA input parameters.","signatures":null},{"export":"SapHanaRangeOperator.GreaterThanOrEquals","kind":"Constant","summary":"'Greater than or equals' range operator for SAP HANA input parameters.","signatures":null},{"export":"SapHanaRangeOperator.LessThan","kind":"Constant","summary":"'Less than' range operator for SAP HANA input parameters.","signatures":null},{"export":"SapHanaRangeOperator.LessThanOrEquals","kind":"Constant","summary":"'Less than or equals' range operator for SAP HANA input parameters.","signatures":null},{"export":"SapHanaRangeOperator.NotEquals","kind":"Constant","summary":"'Not equals' range operator for SAP HANA input parameters.","signatures":null},{"export":"SapHanaRangeOperator.Type","kind":"Type","summary":"A range operator for SAP HANA range input parameters.","signatures":null}]},{"module":"SharePoint","version":null,"exports":[{"export":"SharePoint.Contents","kind":"Function","summary":"Returns a table containing content from a SharePoint site.","signatures":[{"label":"SharePoint.Contents(url as text)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":20,"signatureLabelEnd":31}],"documentation":"Returns a table containing content from a SharePoint site.","SignatureStart":"SharePoint.Contents(","SignatureEnd":")"},{"label":"SharePoint.Contents(url as text, options as nullable record)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":20,"signatureLabelEnd":31},{"label":"options","documentation":"nullable record","signatureLabelOffset":33,"signatureLabelEnd":59}],"documentation":"Returns a table containing content from a SharePoint site.","SignatureStart":"SharePoint.Contents(","SignatureEnd":")"}]},{"export":"SharePoint.Files","kind":"Function","summary":"Returns a table containing documents from a SharePoint site.","signatures":[{"label":"SharePoint.Files(url as text)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":17,"signatureLabelEnd":28}],"documentation":"Returns a table containing documents from a SharePoint site.","SignatureStart":"SharePoint.Files(","SignatureEnd":")"},{"label":"SharePoint.Files(url as text, options as nullable record)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":17,"signatureLabelEnd":28},{"label":"options","documentation":"nullable record","signatureLabelOffset":30,"signatureLabelEnd":56}],"documentation":"Returns a table containing documents from a SharePoint site.","SignatureStart":"SharePoint.Files(","SignatureEnd":")"}]},{"export":"SharePoint.Tables","kind":"Function","summary":"Returns a table containing content from a SharePoint List.","signatures":[{"label":"SharePoint.Tables(url as text)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":18,"signatureLabelEnd":29}],"documentation":"Returns a table containing content from a SharePoint List.","SignatureStart":"SharePoint.Tables(","SignatureEnd":")"},{"label":"SharePoint.Tables(url as text, options as nullable record)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":18,"signatureLabelEnd":29},{"label":"options","documentation":"nullable record","signatureLabelOffset":31,"signatureLabelEnd":57}],"documentation":"Returns a table containing content from a SharePoint List.","SignatureStart":"SharePoint.Tables(","SignatureEnd":")"}]}]},{"module":"Sql","version":null,"exports":[{"export":"Sql.Database","kind":"Function","summary":"Returns a table of SQL tables, views, and stored functions from the SQL Server database.","signatures":[{"label":"Sql.Database(server as text, database as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":13,"signatureLabelEnd":27},{"label":"database","documentation":"text","signatureLabelOffset":29,"signatureLabelEnd":45}],"documentation":"Returns a table of SQL tables, views, and stored functions from the SQL Server database.","SignatureStart":"Sql.Database(","SignatureEnd":")"},{"label":"Sql.Database(server as text, database as text, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":13,"signatureLabelEnd":27},{"label":"database","documentation":"text","signatureLabelOffset":29,"signatureLabelEnd":45},{"label":"options","documentation":"nullable record","signatureLabelOffset":47,"signatureLabelEnd":73}],"documentation":"Returns a table of SQL tables, views, and stored functions from the SQL Server database.","SignatureStart":"Sql.Database(","SignatureEnd":")"}]},{"export":"Sql.Databases","kind":"Function","summary":"Returns a table of databases on a SQL Server.","signatures":[{"label":"Sql.Databases(server as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":14,"signatureLabelEnd":28}],"documentation":"Returns a table of databases on a SQL Server.","SignatureStart":"Sql.Databases(","SignatureEnd":")"},{"label":"Sql.Databases(server as text, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":14,"signatureLabelEnd":28},{"label":"options","documentation":"nullable record","signatureLabelOffset":30,"signatureLabelEnd":56}],"documentation":"Returns a table of databases on a SQL Server.","SignatureStart":"Sql.Databases(","SignatureEnd":")"}]}]},{"module":"Sybase","version":null,"exports":[{"export":"Sybase.Database","kind":"Function","summary":"Returns a table of SQL tables and views available in a Sybase database.","signatures":[{"label":"Sybase.Database(server as text, database as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":16,"signatureLabelEnd":30},{"label":"database","documentation":"text","signatureLabelOffset":32,"signatureLabelEnd":48}],"documentation":"Returns a table of SQL tables and views available in a Sybase database.","SignatureStart":"Sybase.Database(","SignatureEnd":")"},{"label":"Sybase.Database(server as text, database as text, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":16,"signatureLabelEnd":30},{"label":"database","documentation":"text","signatureLabelOffset":32,"signatureLabelEnd":48},{"label":"options","documentation":"nullable record","signatureLabelOffset":50,"signatureLabelEnd":76}],"documentation":"Returns a table of SQL tables and views available in a Sybase database.","SignatureStart":"Sybase.Database(","SignatureEnd":")"}]}]},{"module":"Teradata","version":null,"exports":[{"export":"Teradata.Database","kind":"Function","summary":"Returns a table of SQL tables and views from the Teradata database.","signatures":[{"label":"Teradata.Database(server as text)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":18,"signatureLabelEnd":32}],"documentation":"Returns a table of SQL tables and views from the Teradata database.","SignatureStart":"Teradata.Database(","SignatureEnd":")"},{"label":"Teradata.Database(server as text, options as nullable record)","parameters":[{"label":"server","documentation":"text","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"options","documentation":"nullable record","signatureLabelOffset":34,"signatureLabelEnd":60}],"documentation":"Returns a table of SQL tables and views from the Teradata database.","SignatureStart":"Teradata.Database(","SignatureEnd":")"}]}]},{"module":"Web","version":null,"exports":[{"export":"Soda.Feed","kind":"Function","summary":"Returns a table from the contents at the specified URL formatted according to the SODA 2.0 API.","signatures":[{"label":"Soda.Feed(url as text)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":10,"signatureLabelEnd":21}],"documentation":"Returns a table from the contents at the specified URL formatted according to the SODA 2.0 API.","SignatureStart":"Soda.Feed(","SignatureEnd":")"}]},{"export":"Web.Contents","kind":"Function","summary":"Returns the contents downloaded from the url as binary.","signatures":[{"label":"Web.Contents(url as text)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":13,"signatureLabelEnd":24}],"documentation":"Returns the contents downloaded from the url as binary.","SignatureStart":"Web.Contents(","SignatureEnd":")"},{"label":"Web.Contents(url as text, options as nullable record)","parameters":[{"label":"url","documentation":"text","signatureLabelOffset":13,"signatureLabelEnd":24},{"label":"options","documentation":"nullable record","signatureLabelOffset":26,"signatureLabelEnd":52}],"documentation":"Returns the contents downloaded from the url as binary.","SignatureStart":"Web.Contents(","SignatureEnd":")"}]},{"export":"WebAction.Request","kind":"Function","summary":"Creates an action that, when executed, will return the results of performing an HTTP request as a binary value.","signatures":[{"label":"WebAction.Request(method as text, url as text)","parameters":[{"label":"method","documentation":"text","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"url","documentation":"text","signatureLabelOffset":34,"signatureLabelEnd":45}],"documentation":"Creates an action that, when executed, will return the results of performing an HTTP request as a binary value.","SignatureStart":"WebAction.Request(","SignatureEnd":")"},{"label":"WebAction.Request(method as text, url as text, options as nullable record)","parameters":[{"label":"method","documentation":"text","signatureLabelOffset":18,"signatureLabelEnd":32},{"label":"url","documentation":"text","signatureLabelOffset":34,"signatureLabelEnd":45},{"label":"options","documentation":"nullable record","signatureLabelOffset":47,"signatureLabelEnd":73}],"documentation":"Creates an action that, when executed, will return the results of performing an HTTP request as a binary value.","SignatureStart":"WebAction.Request(","SignatureEnd":")"}]},{"export":"WebMethod.Delete","kind":"Constant","summary":"Specifies the DELETE method for HTTP.","signatures":null},{"export":"WebMethod.Get","kind":"Constant","summary":"Specifies the GET method for HTTP.","signatures":null},{"export":"WebMethod.Head","kind":"Constant","summary":"Specifies the HEAD method for HTTP.","signatures":null},{"export":"WebMethod.Patch","kind":"Constant","summary":"Specifies the PATCH method for HTTP.","signatures":null},{"export":"WebMethod.Post","kind":"Constant","summary":"Specifies the POST method for HTTP.","signatures":null},{"export":"WebMethod.Put","kind":"Constant","summary":"Specifies the PUT method for HTTP.","signatures":null},{"export":"WebMethod.Type","kind":"Type","summary":"Specifies an HTTP method.","signatures":null}]},{"module":"FuzzyMatching","version":null,"exports":[{"export":"Table.FuzzyJoin","kind":"Function","summary":"Joins the rows from the two tables that fuzzy match based on the given keys.","signatures":[{"label":"Table.FuzzyJoin(table1 as table, key1 as any, table2 as table, key2 as any)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":31},{"label":"key1","documentation":"any","signatureLabelOffset":33,"signatureLabelEnd":44},{"label":"table2","documentation":"table","signatureLabelOffset":46,"signatureLabelEnd":61},{"label":"key2","documentation":"any","signatureLabelOffset":63,"signatureLabelEnd":74}],"documentation":"Joins the rows from the two tables that fuzzy match based on the given keys.","SignatureStart":"Table.FuzzyJoin(","SignatureEnd":")"},{"label":"Table.FuzzyJoin(table1 as table, key1 as any, table2 as table, key2 as any, joinKind as nullable number)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":31},{"label":"key1","documentation":"any","signatureLabelOffset":33,"signatureLabelEnd":44},{"label":"table2","documentation":"table","signatureLabelOffset":46,"signatureLabelEnd":61},{"label":"key2","documentation":"any","signatureLabelOffset":63,"signatureLabelEnd":74},{"label":"joinKind","documentation":"nullable number","signatureLabelOffset":76,"signatureLabelEnd":103}],"documentation":"Joins the rows from the two tables that fuzzy match based on the given keys.","SignatureStart":"Table.FuzzyJoin(","SignatureEnd":")"},{"label":"Table.FuzzyJoin(table1 as table, key1 as any, table2 as table, key2 as any, joinKind as nullable number, joinOptions as nullable record)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":16,"signatureLabelEnd":31},{"label":"key1","documentation":"any","signatureLabelOffset":33,"signatureLabelEnd":44},{"label":"table2","documentation":"table","signatureLabelOffset":46,"signatureLabelEnd":61},{"label":"key2","documentation":"any","signatureLabelOffset":63,"signatureLabelEnd":74},{"label":"joinKind","documentation":"nullable number","signatureLabelOffset":76,"signatureLabelEnd":103},{"label":"joinOptions","documentation":"nullable record","signatureLabelOffset":105,"signatureLabelEnd":135}],"documentation":"Joins the rows from the two tables that fuzzy match based on the given keys.","SignatureStart":"Table.FuzzyJoin(","SignatureEnd":")"}]},{"export":"Table.FuzzyNestedJoin","kind":"Function","summary":"Performs a fuzzy join between tables on supplied columns and produces the join result in a new column.","signatures":[{"label":"Table.FuzzyNestedJoin(table1 as table, key1 as any, table2 as table, key2 as any, newColumnName as text)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":22,"signatureLabelEnd":37},{"label":"key1","documentation":"any","signatureLabelOffset":39,"signatureLabelEnd":50},{"label":"table2","documentation":"table","signatureLabelOffset":52,"signatureLabelEnd":67},{"label":"key2","documentation":"any","signatureLabelOffset":69,"signatureLabelEnd":80},{"label":"newColumnName","documentation":"text","signatureLabelOffset":82,"signatureLabelEnd":103}],"documentation":"Performs a fuzzy join between tables on supplied columns and produces the join result in a new column.","SignatureStart":"Table.FuzzyNestedJoin(","SignatureEnd":")"},{"label":"Table.FuzzyNestedJoin(table1 as table, key1 as any, table2 as table, key2 as any, newColumnName as text, joinKind as nullable number)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":22,"signatureLabelEnd":37},{"label":"key1","documentation":"any","signatureLabelOffset":39,"signatureLabelEnd":50},{"label":"table2","documentation":"table","signatureLabelOffset":52,"signatureLabelEnd":67},{"label":"key2","documentation":"any","signatureLabelOffset":69,"signatureLabelEnd":80},{"label":"newColumnName","documentation":"text","signatureLabelOffset":82,"signatureLabelEnd":103},{"label":"joinKind","documentation":"nullable number","signatureLabelOffset":105,"signatureLabelEnd":132}],"documentation":"Performs a fuzzy join between tables on supplied columns and produces the join result in a new column.","SignatureStart":"Table.FuzzyNestedJoin(","SignatureEnd":")"},{"label":"Table.FuzzyNestedJoin(table1 as table, key1 as any, table2 as table, key2 as any, newColumnName as text, joinKind as nullable number, joinOptions as nullable record)","parameters":[{"label":"table1","documentation":"table","signatureLabelOffset":22,"signatureLabelEnd":37},{"label":"key1","documentation":"any","signatureLabelOffset":39,"signatureLabelEnd":50},{"label":"table2","documentation":"table","signatureLabelOffset":52,"signatureLabelEnd":67},{"label":"key2","documentation":"any","signatureLabelOffset":69,"signatureLabelEnd":80},{"label":"newColumnName","documentation":"text","signatureLabelOffset":82,"signatureLabelEnd":103},{"label":"joinKind","documentation":"nullable number","signatureLabelOffset":105,"signatureLabelEnd":132},{"label":"joinOptions","documentation":"nullable record","signatureLabelOffset":134,"signatureLabelEnd":164}],"documentation":"Performs a fuzzy join between tables on supplied columns and produces the join result in a new column.","SignatureStart":"Table.FuzzyNestedJoin(","SignatureEnd":")"}]}]}]