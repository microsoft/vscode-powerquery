[{"module":"Core","version":null,"exports":[{"export":"AccessControlEntry.ConditionContextType","kind":"Type","primitiveType":"type","summary":"The authorization context against which an access control entry (ACE) condition is evaluated.","signatures":null},{"export":"AccessControlEntry.ConditionToIdentities","kind":"Function","primitiveType":"list","summary":"Returns a list of identities that the condition will accept.","signatures":[{"parameters":[{"documentation":null,"label":"identityProvider","type":"function","signatureLabelOffset":41,"signatureLabelEnd":69},{"documentation":null,"label":"condition","type":"function","signatureLabelOffset":71,"signatureLabelEnd":92}],"label":"AccessControlEntry.ConditionToIdentities(identityProvider as function, condition as function)"}]},{"export":"AccessControlEntry.Type","kind":"Type","primitiveType":"type","summary":"A table of access control entries (ACEs).","signatures":null},{"export":"AccessControlKind.Allow","kind":"Constant","primitiveType":"number","summary":"Access is allowed.","signatures":null},{"export":"AccessControlKind.Deny","kind":"Constant","primitiveType":"number","summary":"Access is denied.","signatures":null},{"export":"AccessControlKind.Type","kind":"Type","primitiveType":"type","summary":"Specifies the kind of access control.","signatures":null},{"export":"Any.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all values.","signatures":null},{"export":"Binary.Buffer","kind":"Function","primitiveType":"nullable binary","summary":"Buffers the binary value in memory.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"nullable binary","signatureLabelOffset":14,"signatureLabelEnd":39}],"label":"Binary.Buffer(binary as nullable binary)"}]},{"export":"Binary.Combine","kind":"Function","primitiveType":"binary","summary":"Combines a list of binaries into a single binary.","signatures":[{"parameters":[{"documentation":null,"label":"binaries","type":"list","signatureLabelOffset":15,"signatureLabelEnd":31}],"label":"Binary.Combine(binaries as list)"}]},{"export":"Binary.Compress","kind":"Function","primitiveType":"nullable binary","summary":"Compresses a binary value using the given compression type.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"nullable binary","signatureLabelOffset":16,"signatureLabelEnd":41},{"documentation":null,"label":"compressionType","type":"number","signatureLabelOffset":43,"signatureLabelEnd":68}],"label":"Binary.Compress(binary as nullable binary, compressionType as number)"}]},{"export":"Binary.Decompress","kind":"Function","primitiveType":"nullable binary","summary":"Decompresses a binary value using the given compression type.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"nullable binary","signatureLabelOffset":18,"signatureLabelEnd":43},{"documentation":null,"label":"compressionType","type":"number","signatureLabelOffset":45,"signatureLabelEnd":70}],"label":"Binary.Decompress(binary as nullable binary, compressionType as number)"}]},{"export":"Binary.From","kind":"Function","primitiveType":"nullable binary","summary":"Creates a binary from the given value","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":12,"signatureLabelEnd":24}],"label":"Binary.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":12,"signatureLabelEnd":24},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":26,"signatureLabelEnd":53}],"label":"Binary.From(value as any, encoding as nullable number)"}]},{"export":"Binary.FromList","kind":"Function","primitiveType":"binary","summary":"Converts a list of numbers into a binary value.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":16,"signatureLabelEnd":28}],"label":"Binary.FromList(list as list)"}]},{"export":"Binary.FromText","kind":"Function","primitiveType":"nullable binary","summary":"Decodes data from a text form into binary.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":16,"signatureLabelEnd":37}],"label":"Binary.FromText(text as nullable text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":16,"signatureLabelEnd":37},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":39,"signatureLabelEnd":66}],"label":"Binary.FromText(text as nullable text, encoding as nullable number)"}]},{"export":"Binary.InferContentType","kind":"Function","primitiveType":"record","summary":"Reads the binary stream and tries to determine the content type and format information of the stream.","signatures":[{"parameters":[{"documentation":null,"label":"source","type":"binary","signatureLabelOffset":24,"signatureLabelEnd":40}],"label":"Binary.InferContentType(source as binary)"}]},{"export":"Binary.Length","kind":"Function","primitiveType":"nullable number","summary":"Returns the number of characters.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"nullable binary","signatureLabelOffset":14,"signatureLabelEnd":39}],"label":"Binary.Length(binary as nullable binary)"}]},{"export":"Binary.ToList","kind":"Function","primitiveType":"list","summary":"Converts a binary value into a list of numbers.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":14,"signatureLabelEnd":30}],"label":"Binary.ToList(binary as binary)"}]},{"export":"Binary.ToText","kind":"Function","primitiveType":"nullable text","summary":"Encodes binary data into a text form.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"nullable binary","signatureLabelOffset":14,"signatureLabelEnd":39}],"label":"Binary.ToText(binary as nullable binary)"},{"parameters":[{"documentation":null,"label":"binary","type":"nullable binary","signatureLabelOffset":14,"signatureLabelEnd":39},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":41,"signatureLabelEnd":68}],"label":"Binary.ToText(binary as nullable binary, encoding as nullable number)"}]},{"export":"Binary.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all binary values.","signatures":null},{"export":"BinaryEncoding.Base64","kind":"Constant","primitiveType":"number","summary":"Constant to use as the encoding type when base-64 encoding is required.","signatures":null},{"export":"BinaryEncoding.Hex","kind":"Constant","primitiveType":"number","summary":"Constant to use as the encoding type when hexadecimal encoding is required.","signatures":null},{"export":"BinaryEncoding.Type","kind":"Type","primitiveType":"type","summary":"Specifies the type of binary encoding.","signatures":null},{"export":"BinaryFormat.7BitEncodedSignedInteger","kind":"Function","primitiveType":"any","summary":"A binary format that reads a 64-bit signed integer that was encoded using a 7-bit variable-length encoding.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":38,"signatureLabelEnd":54}],"label":"BinaryFormat.7BitEncodedSignedInteger(binary as binary)"}]},{"export":"BinaryFormat.7BitEncodedUnsignedInteger","kind":"Function","primitiveType":"any","summary":"A binary format that reads a 64-bit unsigned integer that was encoded using a 7-bit variable-length encoding.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":40,"signatureLabelEnd":56}],"label":"BinaryFormat.7BitEncodedUnsignedInteger(binary as binary)"}]},{"export":"BinaryFormat.Binary","kind":"Function","primitiveType":"function","summary":"Returns a binary format that reads a binary value.","signatures":[{"parameters":[],"label":"BinaryFormat.Binary()"},{"parameters":[{"documentation":null,"label":"length","type":"any","signatureLabelOffset":20,"signatureLabelEnd":33}],"label":"BinaryFormat.Binary(length as any)"}]},{"export":"BinaryFormat.Byte","kind":"Function","primitiveType":"any","summary":"A binary format that reads an 8-bit unsigned integer.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":18,"signatureLabelEnd":34}],"label":"BinaryFormat.Byte(binary as binary)"}]},{"export":"BinaryFormat.ByteOrder","kind":"Function","primitiveType":"function","summary":"Returns a binary format with the byte order specified by a function.","signatures":[{"parameters":[{"documentation":null,"label":"binaryFormat","type":"function","signatureLabelOffset":23,"signatureLabelEnd":47},{"documentation":null,"label":"byteOrder","type":"number","signatureLabelOffset":49,"signatureLabelEnd":68}],"label":"BinaryFormat.ByteOrder(binaryFormat as function, byteOrder as number)"}]},{"export":"BinaryFormat.Choice","kind":"Function","primitiveType":"function","summary":"Returns a binary format that chooses the next binary format based on a value that has already been read.","signatures":[{"parameters":[{"documentation":null,"label":"binaryFormat","type":"function","signatureLabelOffset":20,"signatureLabelEnd":44},{"documentation":null,"label":"chooseFunction","type":"function","signatureLabelOffset":46,"signatureLabelEnd":72}],"label":"BinaryFormat.Choice(binaryFormat as function, chooseFunction as function)"},{"parameters":[{"documentation":null,"label":"binaryFormat","type":"function","signatureLabelOffset":20,"signatureLabelEnd":44},{"documentation":null,"label":"chooseFunction","type":"function","signatureLabelOffset":46,"signatureLabelEnd":72},{"documentation":null,"label":"type","type":"nullable type","signatureLabelOffset":74,"signatureLabelEnd":95}],"label":"BinaryFormat.Choice(binaryFormat as function, chooseFunction as function, type as nullable type)"},{"parameters":[{"documentation":null,"label":"binaryFormat","type":"function","signatureLabelOffset":20,"signatureLabelEnd":44},{"documentation":null,"label":"chooseFunction","type":"function","signatureLabelOffset":46,"signatureLabelEnd":72},{"documentation":null,"label":"type","type":"nullable type","signatureLabelOffset":74,"signatureLabelEnd":95},{"documentation":null,"label":"combineFunction","type":"nullable function","signatureLabelOffset":97,"signatureLabelEnd":133}],"label":"BinaryFormat.Choice(binaryFormat as function, chooseFunction as function, type as nullable type, combineFunction as nullable function)"}]},{"export":"BinaryFormat.Decimal","kind":"Function","primitiveType":"any","summary":"A binary format that reads a .NET 16-byte decimal value.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":21,"signatureLabelEnd":37}],"label":"BinaryFormat.Decimal(binary as binary)"}]},{"export":"BinaryFormat.Double","kind":"Function","primitiveType":"any","summary":"A binary format that reads an 8-byte IEEE double-precision floating point value.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":20,"signatureLabelEnd":36}],"label":"BinaryFormat.Double(binary as binary)"}]},{"export":"BinaryFormat.Group","kind":"Function","primitiveType":"function","summary":"Returns a binary format that reads a group of items.","signatures":[{"parameters":[{"documentation":null,"label":"binaryFormat","type":"function","signatureLabelOffset":19,"signatureLabelEnd":43},{"documentation":null,"label":"group","type":"list","signatureLabelOffset":45,"signatureLabelEnd":58}],"label":"BinaryFormat.Group(binaryFormat as function, group as list)"},{"parameters":[{"documentation":null,"label":"binaryFormat","type":"function","signatureLabelOffset":19,"signatureLabelEnd":43},{"documentation":null,"label":"group","type":"list","signatureLabelOffset":45,"signatureLabelEnd":58},{"documentation":null,"label":"extra","type":"nullable function","signatureLabelOffset":60,"signatureLabelEnd":86}],"label":"BinaryFormat.Group(binaryFormat as function, group as list, extra as nullable function)"},{"parameters":[{"documentation":null,"label":"binaryFormat","type":"function","signatureLabelOffset":19,"signatureLabelEnd":43},{"documentation":null,"label":"group","type":"list","signatureLabelOffset":45,"signatureLabelEnd":58},{"documentation":null,"label":"extra","type":"nullable function","signatureLabelOffset":60,"signatureLabelEnd":86},{"documentation":null,"label":"lastKey","type":"any","signatureLabelOffset":88,"signatureLabelEnd":102}],"label":"BinaryFormat.Group(binaryFormat as function, group as list, extra as nullable function, lastKey as any)"}]},{"export":"BinaryFormat.Length","kind":"Function","primitiveType":"function","summary":"Returns a binary format that limits the amount of data that can be read.","signatures":[{"parameters":[{"documentation":null,"label":"binaryFormat","type":"function","signatureLabelOffset":20,"signatureLabelEnd":44},{"documentation":null,"label":"length","type":"any","signatureLabelOffset":46,"signatureLabelEnd":59}],"label":"BinaryFormat.Length(binaryFormat as function, length as any)"}]},{"export":"BinaryFormat.List","kind":"Function","primitiveType":"function","summary":"Returns a binary format that reads a sequence of items and returns a list.","signatures":[{"parameters":[{"documentation":null,"label":"binaryFormat","type":"function","signatureLabelOffset":18,"signatureLabelEnd":42}],"label":"BinaryFormat.List(binaryFormat as function)"},{"parameters":[{"documentation":null,"label":"binaryFormat","type":"function","signatureLabelOffset":18,"signatureLabelEnd":42},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":44,"signatureLabelEnd":67}],"label":"BinaryFormat.List(binaryFormat as function, countOrCondition as any)"}]},{"export":"BinaryFormat.Null","kind":"Function","primitiveType":"any","summary":"A binary format that reads zero bytes and returns null.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":18,"signatureLabelEnd":34}],"label":"BinaryFormat.Null(binary as binary)"}]},{"export":"BinaryFormat.Record","kind":"Function","primitiveType":"function","summary":"Returns a binary format that reads a record.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":20,"signatureLabelEnd":36}],"label":"BinaryFormat.Record(record as record)"}]},{"export":"BinaryFormat.SignedInteger16","kind":"Function","primitiveType":"any","summary":"A binary format that reads a 16-bit signed integer.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":29,"signatureLabelEnd":45}],"label":"BinaryFormat.SignedInteger16(binary as binary)"}]},{"export":"BinaryFormat.SignedInteger32","kind":"Function","primitiveType":"any","summary":"A binary format that reads a 32-bit signed integer.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":29,"signatureLabelEnd":45}],"label":"BinaryFormat.SignedInteger32(binary as binary)"}]},{"export":"BinaryFormat.SignedInteger64","kind":"Function","primitiveType":"any","summary":"A binary format that reads a 64-bit signed integer.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":29,"signatureLabelEnd":45}],"label":"BinaryFormat.SignedInteger64(binary as binary)"}]},{"export":"BinaryFormat.Single","kind":"Function","primitiveType":"any","summary":"A binary format that reads a 4-byte IEEE single-precision floating point value.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":20,"signatureLabelEnd":36}],"label":"BinaryFormat.Single(binary as binary)"}]},{"export":"BinaryFormat.Text","kind":"Function","primitiveType":"function","summary":"Returns a binary format that reads a text value.","signatures":[{"parameters":[{"documentation":null,"label":"length","type":"any","signatureLabelOffset":18,"signatureLabelEnd":31}],"label":"BinaryFormat.Text(length as any)"},{"parameters":[{"documentation":null,"label":"length","type":"any","signatureLabelOffset":18,"signatureLabelEnd":31},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":33,"signatureLabelEnd":60}],"label":"BinaryFormat.Text(length as any, encoding as nullable number)"}]},{"export":"BinaryFormat.Transform","kind":"Function","primitiveType":"function","summary":"Returns a binary format that will transform the values read by another binary format.","signatures":[{"parameters":[{"documentation":null,"label":"binaryFormat","type":"function","signatureLabelOffset":23,"signatureLabelEnd":47},{"documentation":null,"label":"function","type":"function","signatureLabelOffset":49,"signatureLabelEnd":69}],"label":"BinaryFormat.Transform(binaryFormat as function, function as function)"}]},{"export":"BinaryFormat.UnsignedInteger16","kind":"Function","primitiveType":"any","summary":"A binary format that reads a 16-bit unsigned integer.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":31,"signatureLabelEnd":47}],"label":"BinaryFormat.UnsignedInteger16(binary as binary)"}]},{"export":"BinaryFormat.UnsignedInteger32","kind":"Function","primitiveType":"any","summary":"A binary format that reads a 32-bit unsigned integer.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":31,"signatureLabelEnd":47}],"label":"BinaryFormat.UnsignedInteger32(binary as binary)"}]},{"export":"BinaryFormat.UnsignedInteger64","kind":"Function","primitiveType":"any","summary":"A binary format that reads a 64-bit unsigned integer.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":31,"signatureLabelEnd":47}],"label":"BinaryFormat.UnsignedInteger64(binary as binary)"}]},{"export":"BinaryOccurrence.Optional","kind":"Constant","primitiveType":"number","summary":"The item is expected to appear zero or one time in the input.","signatures":null},{"export":"BinaryOccurrence.Repeating","kind":"Constant","primitiveType":"number","summary":"The item is expected to appear zero or more times in the input.","signatures":null},{"export":"BinaryOccurrence.Required","kind":"Constant","primitiveType":"number","summary":"The item is expected to appear once in the input.","signatures":null},{"export":"BinaryOccurrence.Type","kind":"Type","primitiveType":"type","summary":"Specifies how many times the item is expected to appear in the group.","signatures":null},{"export":"Byte.From","kind":"Function","primitiveType":"nullable number","summary":"Creates a 8-bit integer from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":10,"signatureLabelEnd":22}],"label":"Byte.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48}],"label":"Byte.From(value as any, culture as nullable text)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48},{"documentation":null,"label":"roundingMode","type":"nullable number","signatureLabelOffset":50,"signatureLabelEnd":81}],"label":"Byte.From(value as any, culture as nullable text, roundingMode as nullable number)"}]},{"export":"Byte.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all bytes.","signatures":null},{"export":"ByteOrder.BigEndian","kind":"Constant","primitiveType":"number","summary":"A possible value for the <code>byteOrder</code> parameter in <code>BinaryFormat.ByteOrder</code>.  The most signficant byte appears first in Big Endian byte order.","signatures":null},{"export":"ByteOrder.LittleEndian","kind":"Constant","primitiveType":"number","summary":"A possible value for the <code>byteOrder</code> parameter in <code>BinaryFormat.ByteOrder</code>.  The least signficant byte appears first in Little Endian byte order.","signatures":null},{"export":"ByteOrder.Type","kind":"Type","primitiveType":"type","summary":"Specifies the byte order.","signatures":null},{"export":"Character.FromNumber","kind":"Function","primitiveType":"nullable text","summary":"Converts the number to its character value.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":21,"signatureLabelEnd":46}],"label":"Character.FromNumber(number as nullable number)"}]},{"export":"Character.ToNumber","kind":"Function","primitiveType":"nullable number","summary":"Converts a character to its number value.","signatures":[{"parameters":[{"documentation":null,"label":"character","type":"nullable text","signatureLabelOffset":19,"signatureLabelEnd":45}],"label":"Character.ToNumber(character as nullable text)"}]},{"export":"Character.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all characters.","signatures":null},{"export":"Combiner.CombineTextByDelimiter","kind":"Function","primitiveType":"function","summary":"Returns a function that combines a list of text into a single text using the specified delimiter.","signatures":[{"parameters":[{"documentation":null,"label":"delimiter","type":"text","signatureLabelOffset":32,"signatureLabelEnd":49}],"label":"Combiner.CombineTextByDelimiter(delimiter as text)"},{"parameters":[{"documentation":null,"label":"delimiter","type":"text","signatureLabelOffset":32,"signatureLabelEnd":49},{"documentation":null,"label":"quoteStyle","type":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":80}],"label":"Combiner.CombineTextByDelimiter(delimiter as text, quoteStyle as nullable number)"}]},{"export":"Combiner.CombineTextByEachDelimiter","kind":"Function","primitiveType":"function","summary":"Returns a function that combines a list of text into a single text using each specified delimiter in sequence.","signatures":[{"parameters":[{"documentation":null,"label":"delimiters","type":"list","signatureLabelOffset":36,"signatureLabelEnd":54}],"label":"Combiner.CombineTextByEachDelimiter(delimiters as list)"},{"parameters":[{"documentation":null,"label":"delimiters","type":"list","signatureLabelOffset":36,"signatureLabelEnd":54},{"documentation":null,"label":"quoteStyle","type":"nullable number","signatureLabelOffset":56,"signatureLabelEnd":85}],"label":"Combiner.CombineTextByEachDelimiter(delimiters as list, quoteStyle as nullable number)"}]},{"export":"Combiner.CombineTextByLengths","kind":"Function","primitiveType":"function","summary":"Returns a function that combines a list of text into a single text using the specified lengths.","signatures":[{"parameters":[{"documentation":null,"label":"lengths","type":"list","signatureLabelOffset":30,"signatureLabelEnd":45}],"label":"Combiner.CombineTextByLengths(lengths as list)"},{"parameters":[{"documentation":null,"label":"lengths","type":"list","signatureLabelOffset":30,"signatureLabelEnd":45},{"documentation":null,"label":"template","type":"nullable text","signatureLabelOffset":47,"signatureLabelEnd":72}],"label":"Combiner.CombineTextByLengths(lengths as list, template as nullable text)"}]},{"export":"Combiner.CombineTextByPositions","kind":"Function","primitiveType":"function","summary":"Returns a function that combines a list of text into a single text using the specified positions.","signatures":[{"parameters":[{"documentation":null,"label":"positions","type":"list","signatureLabelOffset":32,"signatureLabelEnd":49}],"label":"Combiner.CombineTextByPositions(positions as list)"},{"parameters":[{"documentation":null,"label":"positions","type":"list","signatureLabelOffset":32,"signatureLabelEnd":49},{"documentation":null,"label":"template","type":"nullable text","signatureLabelOffset":51,"signatureLabelEnd":76}],"label":"Combiner.CombineTextByPositions(positions as list, template as nullable text)"}]},{"export":"Combiner.CombineTextByRanges","kind":"Function","primitiveType":"function","summary":"Returns a function that combines a list of text into a single text using the specified positions and lengths.","signatures":[{"parameters":[{"documentation":null,"label":"ranges","type":"list","signatureLabelOffset":29,"signatureLabelEnd":43}],"label":"Combiner.CombineTextByRanges(ranges as list)"},{"parameters":[{"documentation":null,"label":"ranges","type":"list","signatureLabelOffset":29,"signatureLabelEnd":43},{"documentation":null,"label":"template","type":"nullable text","signatureLabelOffset":45,"signatureLabelEnd":70}],"label":"Combiner.CombineTextByRanges(ranges as list, template as nullable text)"}]},{"export":"Comparer.Equals","kind":"Function","primitiveType":"logical","summary":"Returns a logical value based on the equality check over the two given values.","signatures":[{"parameters":[{"documentation":null,"label":"comparer","type":"function","signatureLabelOffset":16,"signatureLabelEnd":36},{"documentation":null,"label":"x","type":"any","signatureLabelOffset":38,"signatureLabelEnd":46},{"documentation":null,"label":"y","type":"any","signatureLabelOffset":48,"signatureLabelEnd":56}],"label":"Comparer.Equals(comparer as function, x as any, y as any)"}]},{"export":"Comparer.FromCulture","kind":"Function","primitiveType":"function","summary":"Returns a comparer function given the culture and a logical value for case sensitivity for the comparison.","signatures":[{"parameters":[{"documentation":null,"label":"culture","type":"text","signatureLabelOffset":21,"signatureLabelEnd":36}],"label":"Comparer.FromCulture(culture as text)"},{"parameters":[{"documentation":null,"label":"culture","type":"text","signatureLabelOffset":21,"signatureLabelEnd":36},{"documentation":null,"label":"ignoreCase","type":"nullable logical","signatureLabelOffset":38,"signatureLabelEnd":68}],"label":"Comparer.FromCulture(culture as text, ignoreCase as nullable logical)"}]},{"export":"Comparer.Ordinal","kind":"Function","primitiveType":"number","summary":"Returns a comparer function which uses Ordinal rules to compare values.","signatures":[{"parameters":[{"documentation":null,"label":"x","type":"any","signatureLabelOffset":17,"signatureLabelEnd":25},{"documentation":null,"label":"y","type":"any","signatureLabelOffset":27,"signatureLabelEnd":35}],"label":"Comparer.Ordinal(x as any, y as any)"}]},{"export":"Comparer.OrdinalIgnoreCase","kind":"Function","primitiveType":"number","summary":"Returns a case-insensitive comparer function which uses Ordinal rules to compare values.","signatures":[{"parameters":[{"documentation":null,"label":"x","type":"any","signatureLabelOffset":27,"signatureLabelEnd":35},{"documentation":null,"label":"y","type":"any","signatureLabelOffset":37,"signatureLabelEnd":45}],"label":"Comparer.OrdinalIgnoreCase(x as any, y as any)"}]},{"export":"Compression.Deflate","kind":"Constant","primitiveType":"number","summary":"The compressed data is in the 'Deflate' format.","signatures":null},{"export":"Compression.GZip","kind":"Constant","primitiveType":"number","summary":"The compressed data is in the 'GZip' format.","signatures":null},{"export":"Compression.Type","kind":"Type","primitiveType":"type","summary":"Specifies the type of compression.","signatures":null},{"export":"Csv.Document","kind":"Function","primitiveType":"table","summary":"Returns the contents of the CSV document as a table.","signatures":[{"parameters":[{"documentation":null,"label":"source","type":"any","signatureLabelOffset":13,"signatureLabelEnd":26}],"label":"Csv.Document(source as any)"},{"parameters":[{"documentation":null,"label":"source","type":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":28,"signatureLabelEnd":42}],"label":"Csv.Document(source as any, columns as any)"},{"parameters":[{"documentation":null,"label":"source","type":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":28,"signatureLabelEnd":42},{"documentation":null,"label":"delimiter","type":"any","signatureLabelOffset":44,"signatureLabelEnd":60}],"label":"Csv.Document(source as any, columns as any, delimiter as any)"},{"parameters":[{"documentation":null,"label":"source","type":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":28,"signatureLabelEnd":42},{"documentation":null,"label":"delimiter","type":"any","signatureLabelOffset":44,"signatureLabelEnd":60},{"documentation":null,"label":"extraValues","type":"nullable number","signatureLabelOffset":62,"signatureLabelEnd":92}],"label":"Csv.Document(source as any, columns as any, delimiter as any, extraValues as nullable number)"},{"parameters":[{"documentation":null,"label":"source","type":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":28,"signatureLabelEnd":42},{"documentation":null,"label":"delimiter","type":"any","signatureLabelOffset":44,"signatureLabelEnd":60},{"documentation":null,"label":"extraValues","type":"nullable number","signatureLabelOffset":62,"signatureLabelEnd":92},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":94,"signatureLabelEnd":121}],"label":"Csv.Document(source as any, columns as any, delimiter as any, extraValues as nullable number, encoding as nullable number)"}]},{"export":"CsvStyle.QuoteAfterDelimiter","kind":"Constant","primitiveType":"number","summary":"Quotes in a field are only significant immediately following the delimiter.","signatures":null},{"export":"CsvStyle.QuoteAlways","kind":"Constant","primitiveType":"number","summary":"Quotes in a field are always significant regardless of where they appear.","signatures":null},{"export":"CsvStyle.Type","kind":"Type","primitiveType":"type","summary":"Specifies the significance of quotes in Csv documents.","signatures":null},{"export":"Cube.AddAndExpandDimensionColumn","kind":"Function","primitiveType":"table","summary":"Merges the specified dimension table into the cube’s filter context and changes the dimensional granularity of the filter context by expanding the specified set of dimension attributes.","signatures":[{"parameters":[{"documentation":null,"label":"cube","type":"table","signatureLabelOffset":33,"signatureLabelEnd":46},{"documentation":null,"label":"dimensionSelector","type":"any","signatureLabelOffset":48,"signatureLabelEnd":72},{"documentation":null,"label":"attributeNames","type":"list","signatureLabelOffset":74,"signatureLabelEnd":96}],"label":"Cube.AddAndExpandDimensionColumn(cube as table, dimensionSelector as any, attributeNames as list)"},{"parameters":[{"documentation":null,"label":"cube","type":"table","signatureLabelOffset":33,"signatureLabelEnd":46},{"documentation":null,"label":"dimensionSelector","type":"any","signatureLabelOffset":48,"signatureLabelEnd":72},{"documentation":null,"label":"attributeNames","type":"list","signatureLabelOffset":74,"signatureLabelEnd":96},{"documentation":null,"label":"newColumnNames","type":"any","signatureLabelOffset":98,"signatureLabelEnd":119}],"label":"Cube.AddAndExpandDimensionColumn(cube as table, dimensionSelector as any, attributeNames as list, newColumnNames as any)"}]},{"export":"Cube.AddMeasureColumn","kind":"Function","primitiveType":"table","summary":"Adds a column to the cube that contains the results of the measure applied in the row context of each row.","signatures":[{"parameters":[{"documentation":null,"label":"cube","type":"table","signatureLabelOffset":22,"signatureLabelEnd":35},{"documentation":null,"label":"column","type":"text","signatureLabelOffset":37,"signatureLabelEnd":51},{"documentation":null,"label":"measureSelector","type":"any","signatureLabelOffset":53,"signatureLabelEnd":75}],"label":"Cube.AddMeasureColumn(cube as table, column as text, measureSelector as any)"}]},{"export":"Cube.ApplyParameter","kind":"Function","primitiveType":"table","summary":"Returns a cube after applying a parameter to it.","signatures":[{"parameters":[{"documentation":null,"label":"cube","type":"table","signatureLabelOffset":20,"signatureLabelEnd":33},{"documentation":null,"label":"parameter","type":"any","signatureLabelOffset":35,"signatureLabelEnd":51}],"label":"Cube.ApplyParameter(cube as table, parameter as any)"},{"parameters":[{"documentation":null,"label":"cube","type":"table","signatureLabelOffset":20,"signatureLabelEnd":33},{"documentation":null,"label":"parameter","type":"any","signatureLabelOffset":35,"signatureLabelEnd":51},{"documentation":null,"label":"arguments","type":"nullable list","signatureLabelOffset":53,"signatureLabelEnd":79}],"label":"Cube.ApplyParameter(cube as table, parameter as any, arguments as nullable list)"}]},{"export":"Cube.AttributeMemberId","kind":"Function","primitiveType":"any","summary":"Returns the unique member identifier from members property value.","signatures":[{"parameters":[{"documentation":null,"label":"attribute","type":"any","signatureLabelOffset":23,"signatureLabelEnd":39}],"label":"Cube.AttributeMemberId(attribute as any)"}]},{"export":"Cube.AttributeMemberProperty","kind":"Function","primitiveType":"any","summary":"Returns a property of a dimension attribute.","signatures":[{"parameters":[{"documentation":null,"label":"attribute","type":"any","signatureLabelOffset":29,"signatureLabelEnd":45},{"documentation":null,"label":"propertyName","type":"text","signatureLabelOffset":47,"signatureLabelEnd":67}],"label":"Cube.AttributeMemberProperty(attribute as any, propertyName as text)"}]},{"export":"Cube.CollapseAndRemoveColumns","kind":"Function","primitiveType":"table","summary":"Changes the dimensional granularity of the filter context for the cube by collapsing the attributes mapped to the specified columns.","signatures":[{"parameters":[{"documentation":null,"label":"cube","type":"table","signatureLabelOffset":30,"signatureLabelEnd":43},{"documentation":null,"label":"columnNames","type":"list","signatureLabelOffset":45,"signatureLabelEnd":64}],"label":"Cube.CollapseAndRemoveColumns(cube as table, columnNames as list)"}]},{"export":"Cube.Dimensions","kind":"Function","primitiveType":"table","summary":"Returns a table containing the set of available dimensions.","signatures":[{"parameters":[{"documentation":null,"label":"cube","type":"table","signatureLabelOffset":16,"signatureLabelEnd":29}],"label":"Cube.Dimensions(cube as table)"}]},{"export":"Cube.DisplayFolders","kind":"Function","primitiveType":"table","summary":"Returns a nested tree of tables representing the display folder hierarchy of the objects (e.g. dimensions and measures).","signatures":[{"parameters":[{"documentation":null,"label":"cube","type":"table","signatureLabelOffset":20,"signatureLabelEnd":33}],"label":"Cube.DisplayFolders(cube as table)"}]},{"export":"Cube.MeasureProperties","kind":"Function","primitiveType":"table","summary":"Returns a table containing the set of available measure properties that are expanded in the cube.","signatures":[{"parameters":[{"documentation":null,"label":"cube","type":"table","signatureLabelOffset":23,"signatureLabelEnd":36}],"label":"Cube.MeasureProperties(cube as table)"}]},{"export":"Cube.MeasureProperty","kind":"Function","primitiveType":"any","summary":"Returns a property of a measure (cell property).","signatures":[{"parameters":[{"documentation":null,"label":"measure","type":"any","signatureLabelOffset":21,"signatureLabelEnd":35},{"documentation":null,"label":"propertyName","type":"text","signatureLabelOffset":37,"signatureLabelEnd":57}],"label":"Cube.MeasureProperty(measure as any, propertyName as text)"}]},{"export":"Cube.Measures","kind":"Function","primitiveType":"table","summary":"Returns a table containing the set of available measures.","signatures":[{"parameters":[{"documentation":null,"label":"cube","type":"any","signatureLabelOffset":14,"signatureLabelEnd":25}],"label":"Cube.Measures(cube as any)"}]},{"export":"Cube.Parameters","kind":"Function","primitiveType":"table","summary":"Returns a table containing the set of parameters that can be applied to the cube.","signatures":[{"parameters":[{"documentation":null,"label":"cube","type":"table","signatureLabelOffset":16,"signatureLabelEnd":29}],"label":"Cube.Parameters(cube as table)"}]},{"export":"Cube.Properties","kind":"Function","primitiveType":"table","summary":"Returns a table containing the set of available properties for dimensions that are expanded in the cube.","signatures":[{"parameters":[{"documentation":null,"label":"cube","type":"table","signatureLabelOffset":16,"signatureLabelEnd":29}],"label":"Cube.Properties(cube as table)"}]},{"export":"Cube.PropertyKey","kind":"Function","primitiveType":"any","summary":"Returns the key of a property.","signatures":[{"parameters":[{"documentation":null,"label":"property","type":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"label":"Cube.PropertyKey(property as any)"}]},{"export":"Cube.ReplaceDimensions","kind":"Function","primitiveType":"table","summary":"Cube.ReplaceDimensions","signatures":[{"parameters":[{"documentation":null,"label":"cube","type":"table","signatureLabelOffset":23,"signatureLabelEnd":36},{"documentation":null,"label":"dimensions","type":"any","signatureLabelOffset":38,"signatureLabelEnd":55}],"label":"Cube.ReplaceDimensions(cube as table, dimensions as any)"}]},{"export":"Cube.Transform","kind":"Function","primitiveType":"table","summary":"Applies a list of cube functions.","signatures":[{"parameters":[{"documentation":null,"label":"cube","type":"table","signatureLabelOffset":15,"signatureLabelEnd":28},{"documentation":null,"label":"transforms","type":"list","signatureLabelOffset":30,"signatureLabelEnd":48}],"label":"Cube.Transform(cube as table, transforms as list)"}]},{"export":"Culture.Current","kind":"Constant","primitiveType":"text","summary":"Returns the name of the current culture for the application.","signatures":null},{"export":"Currency.From","kind":"Function","primitiveType":"nullable number","summary":"Returns a currency value from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":14,"signatureLabelEnd":26}],"label":"Currency.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":14,"signatureLabelEnd":26},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":52}],"label":"Currency.From(value as any, culture as nullable text)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":14,"signatureLabelEnd":26},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":52},{"documentation":null,"label":"roundingMode","type":"nullable number","signatureLabelOffset":54,"signatureLabelEnd":85}],"label":"Currency.From(value as any, culture as nullable text, roundingMode as nullable number)"}]},{"export":"Currency.Type","kind":"Type","primitiveType":"type","summary":"The type that represents currency value.","signatures":null},{"export":"Date.AddDays","kind":"Function","primitiveType":"any","summary":"Adds the specified days to the date.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":13,"signatureLabelEnd":28},{"documentation":null,"label":"numberOfDays","type":"number","signatureLabelOffset":30,"signatureLabelEnd":52}],"label":"Date.AddDays(dateTime as any, numberOfDays as number)"}]},{"export":"Date.AddMonths","kind":"Function","primitiveType":"any","summary":"Adds the specified months to the date.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":15,"signatureLabelEnd":30},{"documentation":null,"label":"numberOfMonths","type":"number","signatureLabelOffset":32,"signatureLabelEnd":56}],"label":"Date.AddMonths(dateTime as any, numberOfMonths as number)"}]},{"export":"Date.AddQuarters","kind":"Function","primitiveType":"any","summary":"Adds the specified quarters to the date.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":17,"signatureLabelEnd":32},{"documentation":null,"label":"numberOfQuarters","type":"number","signatureLabelOffset":34,"signatureLabelEnd":60}],"label":"Date.AddQuarters(dateTime as any, numberOfQuarters as number)"}]},{"export":"Date.AddWeeks","kind":"Function","primitiveType":"any","summary":"Adds the specified weeks to the date.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":14,"signatureLabelEnd":29},{"documentation":null,"label":"numberOfWeeks","type":"number","signatureLabelOffset":31,"signatureLabelEnd":54}],"label":"Date.AddWeeks(dateTime as any, numberOfWeeks as number)"}]},{"export":"Date.AddYears","kind":"Function","primitiveType":"any","summary":"Adds the specified years to the date.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":14,"signatureLabelEnd":29},{"documentation":null,"label":"numberOfYears","type":"number","signatureLabelOffset":31,"signatureLabelEnd":54}],"label":"Date.AddYears(dateTime as any, numberOfYears as number)"}]},{"export":"Date.Day","kind":"Function","primitiveType":"nullable number","summary":"Returns the day component.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":9,"signatureLabelEnd":24}],"label":"Date.Day(dateTime as any)"}]},{"export":"Date.DayOfWeek","kind":"Function","primitiveType":"nullable number","summary":"Returns a number (from 0 to 6) indicating the day of the week of the provided value.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":15,"signatureLabelEnd":30}],"label":"Date.DayOfWeek(dateTime as any)"},{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":15,"signatureLabelEnd":30},{"documentation":null,"label":"firstDayOfWeek","type":"nullable number","signatureLabelOffset":32,"signatureLabelEnd":65}],"label":"Date.DayOfWeek(dateTime as any, firstDayOfWeek as nullable number)"}]},{"export":"Date.DayOfWeekName","kind":"Function","primitiveType":"nullable text","summary":"Returns the day of the week name.","signatures":[{"parameters":[{"documentation":null,"label":"date","type":"any","signatureLabelOffset":19,"signatureLabelEnd":30}],"label":"Date.DayOfWeekName(date as any)"},{"parameters":[{"documentation":null,"label":"date","type":"any","signatureLabelOffset":19,"signatureLabelEnd":30},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":32,"signatureLabelEnd":56}],"label":"Date.DayOfWeekName(date as any, culture as nullable text)"}]},{"export":"Date.DayOfYear","kind":"Function","primitiveType":"nullable number","summary":"Returns a number from 1 to 366 representing the day of the year.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":15,"signatureLabelEnd":30}],"label":"Date.DayOfYear(dateTime as any)"}]},{"export":"Date.DaysInMonth","kind":"Function","primitiveType":"nullable number","summary":"Returns a number from 28 to 31 indicating the number of days in the month.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"label":"Date.DaysInMonth(dateTime as any)"}]},{"export":"Date.EndOfDay","kind":"Function","primitiveType":"any","summary":"Returns the last value of the day.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":14,"signatureLabelEnd":29}],"label":"Date.EndOfDay(dateTime as any)"}]},{"export":"Date.EndOfMonth","kind":"Function","primitiveType":"any","summary":"Returns the last day of the month.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":16,"signatureLabelEnd":31}],"label":"Date.EndOfMonth(dateTime as any)"}]},{"export":"Date.EndOfQuarter","kind":"Function","primitiveType":"any","summary":"Returns the last value of the quarter.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":18,"signatureLabelEnd":33}],"label":"Date.EndOfQuarter(dateTime as any)"}]},{"export":"Date.EndOfWeek","kind":"Function","primitiveType":"any","summary":"Returns the last day of the week.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":15,"signatureLabelEnd":30}],"label":"Date.EndOfWeek(dateTime as any)"},{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":15,"signatureLabelEnd":30},{"documentation":null,"label":"firstDayOfWeek","type":"nullable number","signatureLabelOffset":32,"signatureLabelEnd":65}],"label":"Date.EndOfWeek(dateTime as any, firstDayOfWeek as nullable number)"}]},{"export":"Date.EndOfYear","kind":"Function","primitiveType":"any","summary":"Returns the last datetime value of the year.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":15,"signatureLabelEnd":30}],"label":"Date.EndOfYear(dateTime as any)"}]},{"export":"Date.From","kind":"Function","primitiveType":"nullable date","summary":"Creates a date from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":10,"signatureLabelEnd":22}],"label":"Date.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48}],"label":"Date.From(value as any, culture as nullable text)"}]},{"export":"Date.FromText","kind":"Function","primitiveType":"nullable date","summary":"Creates a Date from local and universal Date formats.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35}],"label":"Date.FromText(text as nullable text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":37,"signatureLabelEnd":61}],"label":"Date.FromText(text as nullable text, culture as nullable text)"}]},{"export":"Date.IsInCurrentDay","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the current day, as determined by the current date and time on the system.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":20,"signatureLabelEnd":35}],"label":"Date.IsInCurrentDay(dateTime as any)"}]},{"export":"Date.IsInCurrentMonth","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the current month, as determined by the current date and time on the system.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":22,"signatureLabelEnd":37}],"label":"Date.IsInCurrentMonth(dateTime as any)"}]},{"export":"Date.IsInCurrentQuarter","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the current quarter, as determined by the current date and time on the system.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":24,"signatureLabelEnd":39}],"label":"Date.IsInCurrentQuarter(dateTime as any)"}]},{"export":"Date.IsInCurrentWeek","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the current week, as determined by the current date and time on the system.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":21,"signatureLabelEnd":36}],"label":"Date.IsInCurrentWeek(dateTime as any)"}]},{"export":"Date.IsInCurrentYear","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the current year, as determined by the current date and time on the system.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":21,"signatureLabelEnd":36}],"label":"Date.IsInCurrentYear(dateTime as any)"}]},{"export":"Date.IsInNextDay","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the next day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"label":"Date.IsInNextDay(dateTime as any)"}]},{"export":"Date.IsInNextMonth","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the next month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":19,"signatureLabelEnd":34}],"label":"Date.IsInNextMonth(dateTime as any)"}]},{"export":"Date.IsInNextNDays","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the next number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":19,"signatureLabelEnd":34},{"documentation":null,"label":"days","type":"number","signatureLabelOffset":36,"signatureLabelEnd":50}],"label":"Date.IsInNextNDays(dateTime as any, days as number)"}]},{"export":"Date.IsInNextNMonths","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the next number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":21,"signatureLabelEnd":36},{"documentation":null,"label":"months","type":"number","signatureLabelOffset":38,"signatureLabelEnd":54}],"label":"Date.IsInNextNMonths(dateTime as any, months as number)"}]},{"export":"Date.IsInNextNQuarters","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the next number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":23,"signatureLabelEnd":38},{"documentation":null,"label":"quarters","type":"number","signatureLabelOffset":40,"signatureLabelEnd":58}],"label":"Date.IsInNextNQuarters(dateTime as any, quarters as number)"}]},{"export":"Date.IsInNextNWeeks","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the next number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":20,"signatureLabelEnd":35},{"documentation":null,"label":"weeks","type":"number","signatureLabelOffset":37,"signatureLabelEnd":52}],"label":"Date.IsInNextNWeeks(dateTime as any, weeks as number)"}]},{"export":"Date.IsInNextNYears","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the next number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":20,"signatureLabelEnd":35},{"documentation":null,"label":"years","type":"number","signatureLabelOffset":37,"signatureLabelEnd":52}],"label":"Date.IsInNextNYears(dateTime as any, years as number)"}]},{"export":"Date.IsInNextQuarter","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the next quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":21,"signatureLabelEnd":36}],"label":"Date.IsInNextQuarter(dateTime as any)"}]},{"export":"Date.IsInNextWeek","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the next week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":18,"signatureLabelEnd":33}],"label":"Date.IsInNextWeek(dateTime as any)"}]},{"export":"Date.IsInNextYear","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the next year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":18,"signatureLabelEnd":33}],"label":"Date.IsInNextYear(dateTime as any)"}]},{"export":"Date.IsInPreviousDay","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the previous day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":21,"signatureLabelEnd":36}],"label":"Date.IsInPreviousDay(dateTime as any)"}]},{"export":"Date.IsInPreviousMonth","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the previous month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":23,"signatureLabelEnd":38}],"label":"Date.IsInPreviousMonth(dateTime as any)"}]},{"export":"Date.IsInPreviousNDays","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the previous number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":23,"signatureLabelEnd":38},{"documentation":null,"label":"days","type":"number","signatureLabelOffset":40,"signatureLabelEnd":54}],"label":"Date.IsInPreviousNDays(dateTime as any, days as number)"}]},{"export":"Date.IsInPreviousNMonths","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the previous number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":25,"signatureLabelEnd":40},{"documentation":null,"label":"months","type":"number","signatureLabelOffset":42,"signatureLabelEnd":58}],"label":"Date.IsInPreviousNMonths(dateTime as any, months as number)"}]},{"export":"Date.IsInPreviousNQuarters","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the previous number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":27,"signatureLabelEnd":42},{"documentation":null,"label":"quarters","type":"number","signatureLabelOffset":44,"signatureLabelEnd":62}],"label":"Date.IsInPreviousNQuarters(dateTime as any, quarters as number)"}]},{"export":"Date.IsInPreviousNWeeks","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the previous number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":24,"signatureLabelEnd":39},{"documentation":null,"label":"weeks","type":"number","signatureLabelOffset":41,"signatureLabelEnd":56}],"label":"Date.IsInPreviousNWeeks(dateTime as any, weeks as number)"}]},{"export":"Date.IsInPreviousNYears","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the previous number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":24,"signatureLabelEnd":39},{"documentation":null,"label":"years","type":"number","signatureLabelOffset":41,"signatureLabelEnd":56}],"label":"Date.IsInPreviousNYears(dateTime as any, years as number)"}]},{"export":"Date.IsInPreviousQuarter","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the previous quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":25,"signatureLabelEnd":40}],"label":"Date.IsInPreviousQuarter(dateTime as any)"}]},{"export":"Date.IsInPreviousWeek","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the previous week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":22,"signatureLabelEnd":37}],"label":"Date.IsInPreviousWeek(dateTime as any)"}]},{"export":"Date.IsInPreviousYear","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the previous year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":22,"signatureLabelEnd":37}],"label":"Date.IsInPreviousYear(dateTime as any)"}]},{"export":"Date.IsInYearToDate","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date occurs during the current year and is on or before the current day, as determined by the current date and time on the system.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":20,"signatureLabelEnd":35}],"label":"Date.IsInYearToDate(dateTime as any)"}]},{"export":"Date.IsLeapYear","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this date falls in a leap year.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":16,"signatureLabelEnd":31}],"label":"Date.IsLeapYear(dateTime as any)"}]},{"export":"Date.Month","kind":"Function","primitiveType":"nullable number","summary":"Returns the month component.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":11,"signatureLabelEnd":26}],"label":"Date.Month(dateTime as any)"}]},{"export":"Date.MonthName","kind":"Function","primitiveType":"nullable text","summary":"Returns the name of the month component.","signatures":[{"parameters":[{"documentation":null,"label":"date","type":"any","signatureLabelOffset":15,"signatureLabelEnd":26}],"label":"Date.MonthName(date as any)"},{"parameters":[{"documentation":null,"label":"date","type":"any","signatureLabelOffset":15,"signatureLabelEnd":26},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":52}],"label":"Date.MonthName(date as any, culture as nullable text)"}]},{"export":"Date.QuarterOfYear","kind":"Function","primitiveType":"nullable number","summary":"Returns a number indicating which quarter of the year the date falls in.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":19,"signatureLabelEnd":34}],"label":"Date.QuarterOfYear(dateTime as any)"}]},{"export":"Date.StartOfDay","kind":"Function","primitiveType":"any","summary":"Returns the first value of the day.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":16,"signatureLabelEnd":31}],"label":"Date.StartOfDay(dateTime as any)"}]},{"export":"Date.StartOfMonth","kind":"Function","primitiveType":"any","summary":"Returns the first value of the month.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":18,"signatureLabelEnd":33}],"label":"Date.StartOfMonth(dateTime as any)"}]},{"export":"Date.StartOfQuarter","kind":"Function","primitiveType":"any","summary":"Returns the first value of the quarter.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":20,"signatureLabelEnd":35}],"label":"Date.StartOfQuarter(dateTime as any)"}]},{"export":"Date.StartOfWeek","kind":"Function","primitiveType":"any","summary":"Returns the first value of the week.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"label":"Date.StartOfWeek(dateTime as any)"},{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":17,"signatureLabelEnd":32},{"documentation":null,"label":"firstDayOfWeek","type":"nullable number","signatureLabelOffset":34,"signatureLabelEnd":67}],"label":"Date.StartOfWeek(dateTime as any, firstDayOfWeek as nullable number)"}]},{"export":"Date.StartOfYear","kind":"Function","primitiveType":"any","summary":"Returns the first value of the year.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"label":"Date.StartOfYear(dateTime as any)"}]},{"export":"Date.ToRecord","kind":"Function","primitiveType":"record","summary":"Returns a record containing parts of the date value.","signatures":[{"parameters":[{"documentation":null,"label":"date","type":"date","signatureLabelOffset":14,"signatureLabelEnd":26}],"label":"Date.ToRecord(date as date)"}]},{"export":"Date.ToText","kind":"Function","primitiveType":"nullable text","summary":"Returns a textual representation of the Date value.","signatures":[{"parameters":[{"documentation":null,"label":"date","type":"nullable date","signatureLabelOffset":12,"signatureLabelEnd":33}],"label":"Date.ToText(date as nullable date)"},{"parameters":[{"documentation":null,"label":"date","type":"nullable date","signatureLabelOffset":12,"signatureLabelEnd":33},{"documentation":null,"label":"format","type":"nullable text","signatureLabelOffset":35,"signatureLabelEnd":58}],"label":"Date.ToText(date as nullable date, format as nullable text)"},{"parameters":[{"documentation":null,"label":"date","type":"nullable date","signatureLabelOffset":12,"signatureLabelEnd":33},{"documentation":null,"label":"format","type":"nullable text","signatureLabelOffset":35,"signatureLabelEnd":58},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":60,"signatureLabelEnd":84}],"label":"Date.ToText(date as nullable date, format as nullable text, culture as nullable text)"}]},{"export":"Date.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all date values.","signatures":null},{"export":"Date.WeekOfMonth","kind":"Function","primitiveType":"nullable number","summary":"Returns a number from 1 to 5 indicating which week of the month this date falls in.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"label":"Date.WeekOfMonth(dateTime as any)"},{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":17,"signatureLabelEnd":32},{"documentation":null,"label":"firstDayOfWeek","type":"nullable number","signatureLabelOffset":34,"signatureLabelEnd":67}],"label":"Date.WeekOfMonth(dateTime as any, firstDayOfWeek as nullable number)"}]},{"export":"Date.WeekOfYear","kind":"Function","primitiveType":"nullable number","summary":"Returns a number from 1 to 54 indicating which week of the year this date falls in.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":16,"signatureLabelEnd":31}],"label":"Date.WeekOfYear(dateTime as any)"},{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":16,"signatureLabelEnd":31},{"documentation":null,"label":"firstDayOfWeek","type":"nullable number","signatureLabelOffset":33,"signatureLabelEnd":66}],"label":"Date.WeekOfYear(dateTime as any, firstDayOfWeek as nullable number)"}]},{"export":"Date.Year","kind":"Function","primitiveType":"nullable number","summary":"Returns the year component.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":10,"signatureLabelEnd":25}],"label":"Date.Year(dateTime as any)"}]},{"export":"DateTime.AddZone","kind":"Function","primitiveType":"nullable datetimezone","summary":"Sets timezone information on the datetime value.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"nullable datetime","signatureLabelOffset":17,"signatureLabelEnd":46},{"documentation":null,"label":"timezoneHours","type":"number","signatureLabelOffset":48,"signatureLabelEnd":71}],"label":"DateTime.AddZone(dateTime as nullable datetime, timezoneHours as number)"},{"parameters":[{"documentation":null,"label":"dateTime","type":"nullable datetime","signatureLabelOffset":17,"signatureLabelEnd":46},{"documentation":null,"label":"timezoneHours","type":"number","signatureLabelOffset":48,"signatureLabelEnd":71},{"documentation":null,"label":"timezoneMinutes","type":"nullable number","signatureLabelOffset":73,"signatureLabelEnd":107}],"label":"DateTime.AddZone(dateTime as nullable datetime, timezoneHours as number, timezoneMinutes as nullable number)"}]},{"export":"DateTime.Date","kind":"Function","primitiveType":"nullable date","summary":"Returns the date component of the given date, datetime, or datetimezone value.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":14,"signatureLabelEnd":29}],"label":"DateTime.Date(dateTime as any)"}]},{"export":"DateTime.FixedLocalNow","kind":"Function","primitiveType":"datetime","summary":"Returns the current date and time in the local timezone. This value is fixed and will not change with successive calls.","signatures":[{"parameters":[],"label":"DateTime.FixedLocalNow()"}]},{"export":"DateTime.From","kind":"Function","primitiveType":"nullable datetime","summary":"Creates a datetime from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":14,"signatureLabelEnd":26}],"label":"DateTime.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":14,"signatureLabelEnd":26},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":52}],"label":"DateTime.From(value as any, culture as nullable text)"}]},{"export":"DateTime.FromFileTime","kind":"Function","primitiveType":"nullable datetime","summary":"Creates a datetime from a 64 bits long number.","signatures":[{"parameters":[{"documentation":null,"label":"fileTime","type":"nullable number","signatureLabelOffset":22,"signatureLabelEnd":49}],"label":"DateTime.FromFileTime(fileTime as nullable number)"}]},{"export":"DateTime.FromText","kind":"Function","primitiveType":"nullable datetime","summary":"Creates a datetime from local and universal datetime formats.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":18,"signatureLabelEnd":39}],"label":"DateTime.FromText(text as nullable text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":18,"signatureLabelEnd":39},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":41,"signatureLabelEnd":65}],"label":"DateTime.FromText(text as nullable text, culture as nullable text)"}]},{"export":"DateTime.IsInCurrentHour","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the current hour, as determined by the current date and time on the system.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":25,"signatureLabelEnd":40}],"label":"DateTime.IsInCurrentHour(dateTime as any)"}]},{"export":"DateTime.IsInCurrentMinute","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the current minute, as determined by the current date and time on the system.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":27,"signatureLabelEnd":42}],"label":"DateTime.IsInCurrentMinute(dateTime as any)"}]},{"export":"DateTime.IsInCurrentSecond","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the current second, as determined by the current date and time on the system.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":27,"signatureLabelEnd":42}],"label":"DateTime.IsInCurrentSecond(dateTime as any)"}]},{"export":"DateTime.IsInNextHour","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the next hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":22,"signatureLabelEnd":37}],"label":"DateTime.IsInNextHour(dateTime as any)"}]},{"export":"DateTime.IsInNextMinute","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the next minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":24,"signatureLabelEnd":39}],"label":"DateTime.IsInNextMinute(dateTime as any)"}]},{"export":"DateTime.IsInNextNHours","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the next number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":24,"signatureLabelEnd":39},{"documentation":null,"label":"hours","type":"number","signatureLabelOffset":41,"signatureLabelEnd":56}],"label":"DateTime.IsInNextNHours(dateTime as any, hours as number)"}]},{"export":"DateTime.IsInNextNMinutes","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the next number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":26,"signatureLabelEnd":41},{"documentation":null,"label":"minutes","type":"number","signatureLabelOffset":43,"signatureLabelEnd":60}],"label":"DateTime.IsInNextNMinutes(dateTime as any, minutes as number)"}]},{"export":"DateTime.IsInNextNSeconds","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the next number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":26,"signatureLabelEnd":41},{"documentation":null,"label":"seconds","type":"number","signatureLabelOffset":43,"signatureLabelEnd":60}],"label":"DateTime.IsInNextNSeconds(dateTime as any, seconds as number)"}]},{"export":"DateTime.IsInNextSecond","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the next second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":24,"signatureLabelEnd":39}],"label":"DateTime.IsInNextSecond(dateTime as any)"}]},{"export":"DateTime.IsInPreviousHour","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the previous hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":26,"signatureLabelEnd":41}],"label":"DateTime.IsInPreviousHour(dateTime as any)"}]},{"export":"DateTime.IsInPreviousMinute","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the previous minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":28,"signatureLabelEnd":43}],"label":"DateTime.IsInPreviousMinute(dateTime as any)"}]},{"export":"DateTime.IsInPreviousNHours","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the previous number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":28,"signatureLabelEnd":43},{"documentation":null,"label":"hours","type":"number","signatureLabelOffset":45,"signatureLabelEnd":60}],"label":"DateTime.IsInPreviousNHours(dateTime as any, hours as number)"}]},{"export":"DateTime.IsInPreviousNMinutes","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the previous number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":30,"signatureLabelEnd":45},{"documentation":null,"label":"minutes","type":"number","signatureLabelOffset":47,"signatureLabelEnd":64}],"label":"DateTime.IsInPreviousNMinutes(dateTime as any, minutes as number)"}]},{"export":"DateTime.IsInPreviousNSeconds","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the previous number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":30,"signatureLabelEnd":45},{"documentation":null,"label":"seconds","type":"number","signatureLabelOffset":47,"signatureLabelEnd":64}],"label":"DateTime.IsInPreviousNSeconds(dateTime as any, seconds as number)"}]},{"export":"DateTime.IsInPreviousSecond","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether this datetime occurs during the previous second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":28,"signatureLabelEnd":43}],"label":"DateTime.IsInPreviousSecond(dateTime as any)"}]},{"export":"DateTime.LocalNow","kind":"Function","primitiveType":"datetime","summary":"Returns the current date and time in the local timezone.","signatures":[{"parameters":[],"label":"DateTime.LocalNow()"}]},{"export":"DateTime.Time","kind":"Function","primitiveType":"nullable time","summary":"Returns the time part of the given datetime value.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":14,"signatureLabelEnd":29}],"label":"DateTime.Time(dateTime as any)"}]},{"export":"DateTime.ToRecord","kind":"Function","primitiveType":"record","summary":"Returns a record containing the datetime value's parts.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"datetime","signatureLabelOffset":18,"signatureLabelEnd":38}],"label":"DateTime.ToRecord(dateTime as datetime)"}]},{"export":"DateTime.ToText","kind":"Function","primitiveType":"nullable text","summary":"Returns a textual representation of the datetime value.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"nullable datetime","signatureLabelOffset":16,"signatureLabelEnd":45}],"label":"DateTime.ToText(dateTime as nullable datetime)"},{"parameters":[{"documentation":null,"label":"dateTime","type":"nullable datetime","signatureLabelOffset":16,"signatureLabelEnd":45},{"documentation":null,"label":"format","type":"nullable text","signatureLabelOffset":47,"signatureLabelEnd":70}],"label":"DateTime.ToText(dateTime as nullable datetime, format as nullable text)"},{"parameters":[{"documentation":null,"label":"dateTime","type":"nullable datetime","signatureLabelOffset":16,"signatureLabelEnd":45},{"documentation":null,"label":"format","type":"nullable text","signatureLabelOffset":47,"signatureLabelEnd":70},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":72,"signatureLabelEnd":96}],"label":"DateTime.ToText(dateTime as nullable datetime, format as nullable text, culture as nullable text)"}]},{"export":"DateTime.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all date and time values without an associated timezone.","signatures":null},{"export":"DateTimeZone.FixedLocalNow","kind":"Function","primitiveType":"datetimezone","summary":"Returns the current date & time in the local timezone. This value is fixed and will not change with successive calls.","signatures":[{"parameters":[],"label":"DateTimeZone.FixedLocalNow()"}]},{"export":"DateTimeZone.FixedUtcNow","kind":"Function","primitiveType":"datetimezone","summary":"Returns the current date and time in UTC (the GMT timezone). This value is fixed and will not change with successive calls.","signatures":[{"parameters":[],"label":"DateTimeZone.FixedUtcNow()"}]},{"export":"DateTimeZone.From","kind":"Function","primitiveType":"nullable datetimezone","summary":"Creates a datetimezone from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":18,"signatureLabelEnd":30}],"label":"DateTimeZone.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":18,"signatureLabelEnd":30},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":32,"signatureLabelEnd":56}],"label":"DateTimeZone.From(value as any, culture as nullable text)"}]},{"export":"DateTimeZone.FromFileTime","kind":"Function","primitiveType":"nullable datetimezone","summary":"Creates a datetimezone from a 64 bits long number.","signatures":[{"parameters":[{"documentation":null,"label":"fileTime","type":"nullable number","signatureLabelOffset":26,"signatureLabelEnd":53}],"label":"DateTimeZone.FromFileTime(fileTime as nullable number)"}]},{"export":"DateTimeZone.FromText","kind":"Function","primitiveType":"nullable datetimezone","summary":"Creates a datetimezone from local and universal datetime formats.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":22,"signatureLabelEnd":43}],"label":"DateTimeZone.FromText(text as nullable text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":22,"signatureLabelEnd":43},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":45,"signatureLabelEnd":69}],"label":"DateTimeZone.FromText(text as nullable text, culture as nullable text)"}]},{"export":"DateTimeZone.LocalNow","kind":"Function","primitiveType":"datetimezone","summary":"Returns the current date & time in the local timezone.","signatures":[{"parameters":[],"label":"DateTimeZone.LocalNow()"}]},{"export":"DateTimeZone.RemoveZone","kind":"Function","primitiveType":"nullable datetime","summary":"Removes timezone information from the given datetimezone value.","signatures":[{"parameters":[{"documentation":null,"label":"dateTimeZone","type":"nullable datetimezone","signatureLabelOffset":24,"signatureLabelEnd":61}],"label":"DateTimeZone.RemoveZone(dateTimeZone as nullable datetimezone)"}]},{"export":"DateTimeZone.SwitchZone","kind":"Function","primitiveType":"nullable datetimezone","summary":"Changes the timezone of the value.","signatures":[{"parameters":[{"documentation":null,"label":"dateTimeZone","type":"nullable datetimezone","signatureLabelOffset":24,"signatureLabelEnd":61},{"documentation":null,"label":"timezoneHours","type":"number","signatureLabelOffset":63,"signatureLabelEnd":86}],"label":"DateTimeZone.SwitchZone(dateTimeZone as nullable datetimezone, timezoneHours as number)"},{"parameters":[{"documentation":null,"label":"dateTimeZone","type":"nullable datetimezone","signatureLabelOffset":24,"signatureLabelEnd":61},{"documentation":null,"label":"timezoneHours","type":"number","signatureLabelOffset":63,"signatureLabelEnd":86},{"documentation":null,"label":"timezoneMinutes","type":"nullable number","signatureLabelOffset":88,"signatureLabelEnd":122}],"label":"DateTimeZone.SwitchZone(dateTimeZone as nullable datetimezone, timezoneHours as number, timezoneMinutes as nullable number)"}]},{"export":"DateTimeZone.ToLocal","kind":"Function","primitiveType":"nullable datetimezone","summary":"Converts the timezone component to the local timezone.","signatures":[{"parameters":[{"documentation":null,"label":"dateTimeZone","type":"nullable datetimezone","signatureLabelOffset":21,"signatureLabelEnd":58}],"label":"DateTimeZone.ToLocal(dateTimeZone as nullable datetimezone)"}]},{"export":"DateTimeZone.ToRecord","kind":"Function","primitiveType":"record","summary":"Returns a record containing the datetimezone value's parts.","signatures":[{"parameters":[{"documentation":null,"label":"dateTimeZone","type":"datetimezone","signatureLabelOffset":22,"signatureLabelEnd":50}],"label":"DateTimeZone.ToRecord(dateTimeZone as datetimezone)"}]},{"export":"DateTimeZone.ToText","kind":"Function","primitiveType":"nullable text","summary":"Returns a textual representation of the datetimezone value.","signatures":[{"parameters":[{"documentation":null,"label":"dateTimeZone","type":"nullable datetimezone","signatureLabelOffset":20,"signatureLabelEnd":57}],"label":"DateTimeZone.ToText(dateTimeZone as nullable datetimezone)"},{"parameters":[{"documentation":null,"label":"dateTimeZone","type":"nullable datetimezone","signatureLabelOffset":20,"signatureLabelEnd":57},{"documentation":null,"label":"format","type":"nullable text","signatureLabelOffset":59,"signatureLabelEnd":82}],"label":"DateTimeZone.ToText(dateTimeZone as nullable datetimezone, format as nullable text)"},{"parameters":[{"documentation":null,"label":"dateTimeZone","type":"nullable datetimezone","signatureLabelOffset":20,"signatureLabelEnd":57},{"documentation":null,"label":"format","type":"nullable text","signatureLabelOffset":59,"signatureLabelEnd":82},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":84,"signatureLabelEnd":108}],"label":"DateTimeZone.ToText(dateTimeZone as nullable datetimezone, format as nullable text, culture as nullable text)"}]},{"export":"DateTimeZone.ToUtc","kind":"Function","primitiveType":"nullable datetimezone","summary":"Converts the timezone component to UTC timezone.","signatures":[{"parameters":[{"documentation":null,"label":"dateTimeZone","type":"nullable datetimezone","signatureLabelOffset":19,"signatureLabelEnd":56}],"label":"DateTimeZone.ToUtc(dateTimeZone as nullable datetimezone)"}]},{"export":"DateTimeZone.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all date and time values relative to a timezone.","signatures":null},{"export":"DateTimeZone.UtcNow","kind":"Function","primitiveType":"datetimezone","summary":"Returns the current date and time in UTC (the GMT timezone).","signatures":[{"parameters":[],"label":"DateTimeZone.UtcNow()"}]},{"export":"DateTimeZone.ZoneHours","kind":"Function","primitiveType":"nullable number","summary":"Changes the timezone of the value.","signatures":[{"parameters":[{"documentation":null,"label":"dateTimeZone","type":"nullable datetimezone","signatureLabelOffset":23,"signatureLabelEnd":60}],"label":"DateTimeZone.ZoneHours(dateTimeZone as nullable datetimezone)"}]},{"export":"DateTimeZone.ZoneMinutes","kind":"Function","primitiveType":"nullable number","summary":"Changes the timezone of the value.","signatures":[{"parameters":[{"documentation":null,"label":"dateTimeZone","type":"nullable datetimezone","signatureLabelOffset":25,"signatureLabelEnd":62}],"label":"DateTimeZone.ZoneMinutes(dateTimeZone as nullable datetimezone)"}]},{"export":"Day.Friday","kind":"Constant","primitiveType":"number","summary":"Represents Friday.","signatures":null},{"export":"Day.Monday","kind":"Constant","primitiveType":"number","summary":"Represents Monday.","signatures":null},{"export":"Day.Saturday","kind":"Constant","primitiveType":"number","summary":"Represents Saturday.","signatures":null},{"export":"Day.Sunday","kind":"Constant","primitiveType":"number","summary":"Represents Sunday.","signatures":null},{"export":"Day.Thursday","kind":"Constant","primitiveType":"number","summary":"Represents Thursday.","signatures":null},{"export":"Day.Tuesday","kind":"Constant","primitiveType":"number","summary":"Represents Tuesday.","signatures":null},{"export":"Day.Type","kind":"Type","primitiveType":"type","summary":"Specifies a day of week.","signatures":null},{"export":"Day.Wednesday","kind":"Constant","primitiveType":"number","summary":"Represents Wednesday.","signatures":null},{"export":"Decimal.From","kind":"Function","primitiveType":"nullable number","summary":"Creates a Decimal from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":13,"signatureLabelEnd":25}],"label":"Decimal.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":13,"signatureLabelEnd":25},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":27,"signatureLabelEnd":51}],"label":"Decimal.From(value as any, culture as nullable text)"}]},{"export":"Decimal.Type","kind":"Type","primitiveType":"type","summary":"The type that represents fixed-point decimal number.","signatures":null},{"export":"Diagnostics.ActivityId","kind":"Function","primitiveType":"nullable text","summary":"Returns an opaque identifier for the currently-running evaluation.","signatures":[{"parameters":[],"label":"Diagnostics.ActivityId()"}]},{"export":"Diagnostics.Trace","kind":"Function","primitiveType":"any","summary":"Writes a trace entry, if tracing is enabled, and returns the value.","signatures":[{"parameters":[{"documentation":null,"label":"traceLevel","type":"number","signatureLabelOffset":18,"signatureLabelEnd":38},{"documentation":null,"label":"message","type":"anynonnull","signatureLabelOffset":40,"signatureLabelEnd":61},{"documentation":null,"label":"value","type":"any","signatureLabelOffset":63,"signatureLabelEnd":75}],"label":"Diagnostics.Trace(traceLevel as number, message as anynonnull, value as any)"},{"parameters":[{"documentation":null,"label":"traceLevel","type":"number","signatureLabelOffset":18,"signatureLabelEnd":38},{"documentation":null,"label":"message","type":"anynonnull","signatureLabelOffset":40,"signatureLabelEnd":61},{"documentation":null,"label":"value","type":"any","signatureLabelOffset":63,"signatureLabelEnd":75},{"documentation":null,"label":"delayed","type":"nullable logical","signatureLabelOffset":77,"signatureLabelEnd":104}],"label":"Diagnostics.Trace(traceLevel as number, message as anynonnull, value as any, delayed as nullable logical)"}]},{"export":"DirectQueryCapabilities.From","kind":"Function","primitiveType":"table","summary":"DirectQueryCapabilities.From","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":29,"signatureLabelEnd":41}],"label":"DirectQueryCapabilities.From(value as any)"}]},{"export":"Double.From","kind":"Function","primitiveType":"nullable number","summary":"Creates a Double from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":12,"signatureLabelEnd":24}],"label":"Double.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":12,"signatureLabelEnd":24},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":26,"signatureLabelEnd":50}],"label":"Double.From(value as any, culture as nullable text)"}]},{"export":"Double.Type","kind":"Type","primitiveType":"type","summary":"The type that represents double precision floating point number.","signatures":null},{"export":"Duration.Days","kind":"Function","primitiveType":"nullable number","summary":"Returns the days part of this duration.","signatures":[{"parameters":[{"documentation":null,"label":"duration","type":"nullable duration","signatureLabelOffset":14,"signatureLabelEnd":43}],"label":"Duration.Days(duration as nullable duration)"}]},{"export":"Duration.From","kind":"Function","primitiveType":"nullable duration","summary":"Creates a duration from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":14,"signatureLabelEnd":26}],"label":"Duration.From(value as any)"}]},{"export":"Duration.FromText","kind":"Function","primitiveType":"nullable duration","summary":"Returns a duration value from textual elapsed time forms (d.h:m:s).","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":18,"signatureLabelEnd":39}],"label":"Duration.FromText(text as nullable text)"}]},{"export":"Duration.Hours","kind":"Function","primitiveType":"nullable number","summary":"Returns the hours part of this duration.","signatures":[{"parameters":[{"documentation":null,"label":"duration","type":"nullable duration","signatureLabelOffset":15,"signatureLabelEnd":44}],"label":"Duration.Hours(duration as nullable duration)"}]},{"export":"Duration.Minutes","kind":"Function","primitiveType":"nullable number","summary":"Returns the minutes part of this duration.","signatures":[{"parameters":[{"documentation":null,"label":"duration","type":"nullable duration","signatureLabelOffset":17,"signatureLabelEnd":46}],"label":"Duration.Minutes(duration as nullable duration)"}]},{"export":"Duration.Seconds","kind":"Function","primitiveType":"nullable number","summary":"Returns the seconds part of this duration.","signatures":[{"parameters":[{"documentation":null,"label":"duration","type":"nullable duration","signatureLabelOffset":17,"signatureLabelEnd":46}],"label":"Duration.Seconds(duration as nullable duration)"}]},{"export":"Duration.ToRecord","kind":"Function","primitiveType":"record","summary":"Returns a record containing the parts of the duration.","signatures":[{"parameters":[{"documentation":null,"label":"duration","type":"duration","signatureLabelOffset":18,"signatureLabelEnd":38}],"label":"Duration.ToRecord(duration as duration)"}]},{"export":"Duration.TotalDays","kind":"Function","primitiveType":"nullable number","summary":"Returns the total days this duration spans.","signatures":[{"parameters":[{"documentation":null,"label":"duration","type":"nullable duration","signatureLabelOffset":19,"signatureLabelEnd":48}],"label":"Duration.TotalDays(duration as nullable duration)"}]},{"export":"Duration.TotalHours","kind":"Function","primitiveType":"nullable number","summary":"Returns the total hours this duration spans.","signatures":[{"parameters":[{"documentation":null,"label":"duration","type":"nullable duration","signatureLabelOffset":20,"signatureLabelEnd":49}],"label":"Duration.TotalHours(duration as nullable duration)"}]},{"export":"Duration.TotalMinutes","kind":"Function","primitiveType":"nullable number","summary":"Returns the total minutes this duration spans.","signatures":[{"parameters":[{"documentation":null,"label":"duration","type":"nullable duration","signatureLabelOffset":22,"signatureLabelEnd":51}],"label":"Duration.TotalMinutes(duration as nullable duration)"}]},{"export":"Duration.TotalSeconds","kind":"Function","primitiveType":"nullable number","summary":"Returns the total seconds this duration spans.","signatures":[{"parameters":[{"documentation":null,"label":"duration","type":"nullable duration","signatureLabelOffset":22,"signatureLabelEnd":51}],"label":"Duration.TotalSeconds(duration as nullable duration)"}]},{"export":"Duration.ToText","kind":"Function","primitiveType":"nullable text","summary":"Returns the text of the form \"d.h:m:s\".","signatures":[{"parameters":[{"documentation":null,"label":"duration","type":"nullable duration","signatureLabelOffset":16,"signatureLabelEnd":45}],"label":"Duration.ToText(duration as nullable duration)"},{"parameters":[{"documentation":null,"label":"duration","type":"nullable duration","signatureLabelOffset":16,"signatureLabelEnd":45},{"documentation":null,"label":"format","type":"nullable text","signatureLabelOffset":47,"signatureLabelEnd":70}],"label":"Duration.ToText(duration as nullable duration, format as nullable text)"}]},{"export":"Duration.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all duration values","signatures":null},{"export":"Embedded.Value","kind":"Function","primitiveType":"any","summary":"Accesses a value by name in an embedded mashup.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":15,"signatureLabelEnd":27},{"documentation":null,"label":"path","type":"text","signatureLabelOffset":29,"signatureLabelEnd":41}],"label":"Embedded.Value(value as any, path as text)"}]},{"export":"Error.Record","kind":"Function","primitiveType":"record","summary":"Returns an error record from the provided text values for reason, message and detail.","signatures":[{"parameters":[{"documentation":null,"label":"reason","type":"text","signatureLabelOffset":13,"signatureLabelEnd":27}],"label":"Error.Record(reason as text)"},{"parameters":[{"documentation":null,"label":"reason","type":"text","signatureLabelOffset":13,"signatureLabelEnd":27},{"documentation":null,"label":"message","type":"nullable text","signatureLabelOffset":29,"signatureLabelEnd":53}],"label":"Error.Record(reason as text, message as nullable text)"},{"parameters":[{"documentation":null,"label":"reason","type":"text","signatureLabelOffset":13,"signatureLabelEnd":27},{"documentation":null,"label":"message","type":"nullable text","signatureLabelOffset":29,"signatureLabelEnd":53},{"documentation":null,"label":"detail","type":"any","signatureLabelOffset":55,"signatureLabelEnd":68}],"label":"Error.Record(reason as text, message as nullable text, detail as any)"}]},{"export":"Excel.Workbook","kind":"Function","primitiveType":"table","summary":"Returns a record of Sheets from the Excel workbook.","signatures":[{"parameters":[{"documentation":null,"label":"workbook","type":"binary","signatureLabelOffset":15,"signatureLabelEnd":33}],"label":"Excel.Workbook(workbook as binary)"},{"parameters":[{"documentation":null,"label":"workbook","type":"binary","signatureLabelOffset":15,"signatureLabelEnd":33},{"documentation":null,"label":"useHeaders","type":"nullable logical","signatureLabelOffset":35,"signatureLabelEnd":65}],"label":"Excel.Workbook(workbook as binary, useHeaders as nullable logical)"},{"parameters":[{"documentation":null,"label":"workbook","type":"binary","signatureLabelOffset":15,"signatureLabelEnd":33},{"documentation":null,"label":"useHeaders","type":"nullable logical","signatureLabelOffset":35,"signatureLabelEnd":65},{"documentation":null,"label":"delayTypes","type":"nullable logical","signatureLabelOffset":67,"signatureLabelEnd":97}],"label":"Excel.Workbook(workbook as binary, useHeaders as nullable logical, delayTypes as nullable logical)"}]},{"export":"Expression.Constant","kind":"Function","primitiveType":"text","summary":"Returns the M source code representation of a constant value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":20,"signatureLabelEnd":32}],"label":"Expression.Constant(value as any)"}]},{"export":"Expression.Evaluate","kind":"Function","primitiveType":"any","summary":"Returns the result of evaluating an M expression.","signatures":[{"parameters":[{"documentation":null,"label":"document","type":"text","signatureLabelOffset":20,"signatureLabelEnd":36}],"label":"Expression.Evaluate(document as text)"},{"parameters":[{"documentation":null,"label":"document","type":"text","signatureLabelOffset":20,"signatureLabelEnd":36},{"documentation":null,"label":"environment","type":"nullable record","signatureLabelOffset":38,"signatureLabelEnd":68}],"label":"Expression.Evaluate(document as text, environment as nullable record)"}]},{"export":"Expression.Identifier","kind":"Function","primitiveType":"text","summary":"Returns the M source code representation of an identifier.","signatures":[{"parameters":[{"documentation":null,"label":"name","type":"text","signatureLabelOffset":22,"signatureLabelEnd":34}],"label":"Expression.Identifier(name as text)"}]},{"export":"ExtraValues.Error","kind":"Constant","primitiveType":"number","summary":"If the splitter function returns more columns than the table expects, an error should be raised.","signatures":null},{"export":"ExtraValues.Ignore","kind":"Constant","primitiveType":"number","summary":"If the splitter function returns more columns than the table expects, they should be ignored.","signatures":null},{"export":"ExtraValues.List","kind":"Constant","primitiveType":"number","summary":"If the splitter function returns more columns than the table expects, they should be collected into a list.","signatures":null},{"export":"ExtraValues.Type","kind":"Type","primitiveType":"type","summary":"Specifies the expected action for extra values in a row that contains columns more than expected.","signatures":null},{"export":"Function.From","kind":"Function","primitiveType":"function","summary":"Creates a function with a specific parameter signature on top of a function that takes a single list argument","signatures":[{"parameters":[{"documentation":null,"label":"functionType","type":"type","signatureLabelOffset":14,"signatureLabelEnd":34},{"documentation":null,"label":"function","type":"function","signatureLabelOffset":36,"signatureLabelEnd":56}],"label":"Function.From(functionType as type, function as function)"}]},{"export":"Function.Invoke","kind":"Function","primitiveType":"any","summary":"Invokes the given function","signatures":[{"parameters":[{"documentation":null,"label":"function","type":"function","signatureLabelOffset":16,"signatureLabelEnd":36},{"documentation":null,"label":"args","type":"list","signatureLabelOffset":38,"signatureLabelEnd":50}],"label":"Function.Invoke(function as function, args as list)"}]},{"export":"Function.InvokeAfter","kind":"Function","primitiveType":"any","summary":"Invokes the given function after the specified duration has passed.","signatures":[{"parameters":[{"documentation":null,"label":"function","type":"function","signatureLabelOffset":21,"signatureLabelEnd":41},{"documentation":null,"label":"delay","type":"duration","signatureLabelOffset":43,"signatureLabelEnd":60}],"label":"Function.InvokeAfter(function as function, delay as duration)"}]},{"export":"Function.IsDataSource","kind":"Function","primitiveType":"logical","summary":"Returns whether or not a particular function is considered a data source.","signatures":[{"parameters":[{"documentation":null,"label":"function","type":"function","signatureLabelOffset":22,"signatureLabelEnd":42}],"label":"Function.IsDataSource(function as function)"}]},{"export":"Function.ScalarVector","kind":"Function","primitiveType":"function","summary":"Creates a scalar function on top of a vector function, batching multiple invocations.","signatures":[{"parameters":[{"documentation":null,"label":"scalarFunctionType","type":"type","signatureLabelOffset":22,"signatureLabelEnd":48},{"documentation":null,"label":"vectorFunction","type":"function","signatureLabelOffset":50,"signatureLabelEnd":76}],"label":"Function.ScalarVector(scalarFunctionType as type, vectorFunction as function)"}]},{"export":"Function.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all functions.","signatures":null},{"export":"GroupKind.Global","kind":"Constant","primitiveType":"number","summary":"GroupKind.Global","signatures":null},{"export":"GroupKind.Local","kind":"Constant","primitiveType":"number","summary":"GroupKind.Local","signatures":null},{"export":"GroupKind.Type","kind":"Type","primitiveType":"type","summary":"Specifies the kind of grouping.","signatures":null},{"export":"Guid.From","kind":"Function","primitiveType":"nullable text","summary":"Returns a guid value from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"nullable text","signatureLabelOffset":10,"signatureLabelEnd":32}],"label":"Guid.From(value as nullable text)"}]},{"export":"Guid.Type","kind":"Type","primitiveType":"type","summary":"The type that represents a Guid value.","signatures":null},{"export":"Identity.From","kind":"Function","primitiveType":"record","summary":"Creates an identity.","signatures":[{"parameters":[{"documentation":null,"label":"identityProvider","type":"function","signatureLabelOffset":14,"signatureLabelEnd":42},{"documentation":null,"label":"value","type":"any","signatureLabelOffset":44,"signatureLabelEnd":56}],"label":"Identity.From(identityProvider as function, value as any)"}]},{"export":"Identity.IsMemberOf","kind":"Function","primitiveType":"logical","summary":"Determines whether an identity is a member of an identity collection.","signatures":[{"parameters":[{"documentation":null,"label":"identity","type":"record","signatureLabelOffset":20,"signatureLabelEnd":38},{"documentation":null,"label":"collection","type":"record","signatureLabelOffset":40,"signatureLabelEnd":60}],"label":"Identity.IsMemberOf(identity as record, collection as record)"}]},{"export":"Identity.Type","kind":"Type","primitiveType":"type","summary":"An identity represents a user, group, device, or other identifiable thing.","signatures":null},{"export":"IdentityProvider.Default","kind":"Function","primitiveType":"any","summary":"The default identity provider for the current host.","signatures":[{"parameters":[],"label":"IdentityProvider.Default()"}]},{"export":"IdentityProvider.Type","kind":"Type","primitiveType":"type","summary":"Defines a scope in which identities are created and compared.","signatures":null},{"export":"Int16.From","kind":"Function","primitiveType":"nullable number","summary":"Creates a 16-bit integer from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":11,"signatureLabelEnd":23}],"label":"Int16.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":11,"signatureLabelEnd":23},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":25,"signatureLabelEnd":49}],"label":"Int16.From(value as any, culture as nullable text)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":11,"signatureLabelEnd":23},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":25,"signatureLabelEnd":49},{"documentation":null,"label":"roundingMode","type":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":82}],"label":"Int16.From(value as any, culture as nullable text, roundingMode as nullable number)"}]},{"export":"Int16.Type","kind":"Type","primitiveType":"type","summary":"The type that represents signed 16 bit integer.","signatures":null},{"export":"Int32.From","kind":"Function","primitiveType":"nullable number","summary":"Creates a 32-bit integer from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":11,"signatureLabelEnd":23}],"label":"Int32.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":11,"signatureLabelEnd":23},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":25,"signatureLabelEnd":49}],"label":"Int32.From(value as any, culture as nullable text)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":11,"signatureLabelEnd":23},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":25,"signatureLabelEnd":49},{"documentation":null,"label":"roundingMode","type":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":82}],"label":"Int32.From(value as any, culture as nullable text, roundingMode as nullable number)"}]},{"export":"Int32.Type","kind":"Type","primitiveType":"type","summary":"The type that represents signed 32 bit integer.","signatures":null},{"export":"Int64.From","kind":"Function","primitiveType":"nullable number","summary":"Creates a 64-bit integer from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":11,"signatureLabelEnd":23}],"label":"Int64.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":11,"signatureLabelEnd":23},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":25,"signatureLabelEnd":49}],"label":"Int64.From(value as any, culture as nullable text)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":11,"signatureLabelEnd":23},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":25,"signatureLabelEnd":49},{"documentation":null,"label":"roundingMode","type":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":82}],"label":"Int64.From(value as any, culture as nullable text, roundingMode as nullable number)"}]},{"export":"Int64.Type","kind":"Type","primitiveType":"type","summary":"The type that represents signed 64 bit integer.","signatures":null},{"export":"Int8.From","kind":"Function","primitiveType":"nullable number","summary":"Creates a signed 8-bit integer from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":10,"signatureLabelEnd":22}],"label":"Int8.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48}],"label":"Int8.From(value as any, culture as nullable text)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48},{"documentation":null,"label":"roundingMode","type":"nullable number","signatureLabelOffset":50,"signatureLabelEnd":81}],"label":"Int8.From(value as any, culture as nullable text, roundingMode as nullable number)"}]},{"export":"Int8.Type","kind":"Type","primitiveType":"type","summary":"The type that represents signed 8 bit integer.","signatures":null},{"export":"ItemExpression.From","kind":"Function","primitiveType":"record","summary":"Returns the AST for the body of a function.","signatures":[{"parameters":[{"documentation":null,"label":"function","type":"function","signatureLabelOffset":20,"signatureLabelEnd":40}],"label":"ItemExpression.From(function as function)"}]},{"export":"ItemExpression.Item","kind":"Constant","primitiveType":"record","summary":"An AST node representing the item in an item expression.","signatures":null},{"export":"JoinAlgorithm.Dynamic","kind":"Constant","primitiveType":"number","summary":"JoinAlgorithm.Dynamic","signatures":null},{"export":"JoinAlgorithm.LeftHash","kind":"Constant","primitiveType":"number","summary":"JoinAlgorithm.LeftHash","signatures":null},{"export":"JoinAlgorithm.LeftIndex","kind":"Constant","primitiveType":"number","summary":"JoinAlgorithm.LeftIndex","signatures":null},{"export":"JoinAlgorithm.PairwiseHash","kind":"Constant","primitiveType":"number","summary":"JoinAlgorithm.PairwiseHash","signatures":null},{"export":"JoinAlgorithm.RightHash","kind":"Constant","primitiveType":"number","summary":"JoinAlgorithm.RightHash","signatures":null},{"export":"JoinAlgorithm.RightIndex","kind":"Constant","primitiveType":"number","summary":"JoinAlgorithm.RightIndex","signatures":null},{"export":"JoinAlgorithm.SortMerge","kind":"Constant","primitiveType":"number","summary":"JoinAlgorithm.SortMerge","signatures":null},{"export":"JoinAlgorithm.Type","kind":"Type","primitiveType":"type","summary":"Specifies the join algorithm to be used in the join operation.","signatures":null},{"export":"JoinKind.FullOuter","kind":"Constant","primitiveType":"number","summary":"A possible value for the optional <code>JoinKind</code> parameter in <code>Table.Join</code>.\r\n    A full outer join ensures that all rows of both tables appear in the result. Rows that did not have a match in the other table are joined with a default row containing null values for all of its columns.","signatures":null},{"export":"JoinKind.Inner","kind":"Constant","primitiveType":"number","summary":"A possible value for the optional <code>JoinKind</code> parameter in <code>Table.Join</code>.\r\n    The table resulting from an inner join contains a row for each pair of rows from the specified tables that were determined to match based on the specified key columns.","signatures":null},{"export":"JoinKind.LeftAnti","kind":"Constant","primitiveType":"number","summary":"A possible value for the optional <code>JoinKind</code> parameter in <code>Table.Join</code>.\r\n    A left anti join returns that all rows from the first table which do not have a match in the second table.","signatures":null},{"export":"JoinKind.LeftOuter","kind":"Constant","primitiveType":"number","summary":"A possible value for the optional <code>JoinKind</code> parameter in <code>Table.Join</code>.\r\n    A left outer join ensures that all rows of the first table appear in the result.","signatures":null},{"export":"JoinKind.RightAnti","kind":"Constant","primitiveType":"number","summary":"A possible value for the optional <code>JoinKind</code> parameter in <code>Table.Join</code>.\r\n    A right anti join returns that all rows from the second table which do not have a match in the first table.","signatures":null},{"export":"JoinKind.RightOuter","kind":"Constant","primitiveType":"number","summary":"A possible value for the optional <code>JoinKind</code> parameter in <code>Table.Join</code>.\r\n    A right outer join ensures that all rows of the second table appear in the result.","signatures":null},{"export":"JoinKind.Type","kind":"Type","primitiveType":"type","summary":"Specifies the kind of join operation.","signatures":null},{"export":"JoinSide.Left","kind":"Constant","primitiveType":"number","summary":"Specifies the left table of a join.","signatures":null},{"export":"JoinSide.Right","kind":"Constant","primitiveType":"number","summary":"Specifies the right table of a join.","signatures":null},{"export":"JoinSide.Type","kind":"Type","primitiveType":"type","summary":"Specifies the left or right table of a join.","signatures":null},{"export":"Json.Document","kind":"Function","primitiveType":"any","summary":"Returns the content of the JSON document.","signatures":[{"parameters":[{"documentation":null,"label":"jsonText","type":"any","signatureLabelOffset":14,"signatureLabelEnd":29}],"label":"Json.Document(jsonText as any)"},{"parameters":[{"documentation":null,"label":"jsonText","type":"any","signatureLabelOffset":14,"signatureLabelEnd":29},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":31,"signatureLabelEnd":58}],"label":"Json.Document(jsonText as any, encoding as nullable number)"}]},{"export":"Json.FromValue","kind":"Function","primitiveType":"binary","summary":"Produces a JSON representation of a given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":15,"signatureLabelEnd":27}],"label":"Json.FromValue(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":15,"signatureLabelEnd":27},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":29,"signatureLabelEnd":56}],"label":"Json.FromValue(value as any, encoding as nullable number)"}]},{"export":"Lines.FromBinary","kind":"Function","primitiveType":"list","summary":"Converts a binary value to a list of text values split at lines breaks.  If a quote style is specified, then line breaks may appear within quotes.  If includeLineSeparators is true, then the line break characters are included in the text.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":17,"signatureLabelEnd":33}],"label":"Lines.FromBinary(binary as binary)"},{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":17,"signatureLabelEnd":33},{"documentation":null,"label":"quoteStyle","type":"nullable number","signatureLabelOffset":35,"signatureLabelEnd":64}],"label":"Lines.FromBinary(binary as binary, quoteStyle as nullable number)"},{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":17,"signatureLabelEnd":33},{"documentation":null,"label":"quoteStyle","type":"nullable number","signatureLabelOffset":35,"signatureLabelEnd":64},{"documentation":null,"label":"includeLineSeparators","type":"nullable logical","signatureLabelOffset":66,"signatureLabelEnd":107}],"label":"Lines.FromBinary(binary as binary, quoteStyle as nullable number, includeLineSeparators as nullable logical)"},{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":17,"signatureLabelEnd":33},{"documentation":null,"label":"quoteStyle","type":"nullable number","signatureLabelOffset":35,"signatureLabelEnd":64},{"documentation":null,"label":"includeLineSeparators","type":"nullable logical","signatureLabelOffset":66,"signatureLabelEnd":107},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":109,"signatureLabelEnd":136}],"label":"Lines.FromBinary(binary as binary, quoteStyle as nullable number, includeLineSeparators as nullable logical, encoding as nullable number)"}]},{"export":"Lines.FromText","kind":"Function","primitiveType":"list","summary":"Converts a text value to a list of text values split at lines breaks. If includeLineSeparators is true, then the line break characters are included in the text.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"text","signatureLabelOffset":15,"signatureLabelEnd":27}],"label":"Lines.FromText(text as text)"},{"parameters":[{"documentation":null,"label":"text","type":"text","signatureLabelOffset":15,"signatureLabelEnd":27},{"documentation":null,"label":"quoteStyle","type":"nullable number","signatureLabelOffset":29,"signatureLabelEnd":58}],"label":"Lines.FromText(text as text, quoteStyle as nullable number)"},{"parameters":[{"documentation":null,"label":"text","type":"text","signatureLabelOffset":15,"signatureLabelEnd":27},{"documentation":null,"label":"quoteStyle","type":"nullable number","signatureLabelOffset":29,"signatureLabelEnd":58},{"documentation":null,"label":"includeLineSeparators","type":"nullable logical","signatureLabelOffset":60,"signatureLabelEnd":101}],"label":"Lines.FromText(text as text, quoteStyle as nullable number, includeLineSeparators as nullable logical)"}]},{"export":"Lines.ToBinary","kind":"Function","primitiveType":"binary","summary":"Converts a list of text into a binary value using the specified encoding and lineSeparator.The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.","signatures":[{"parameters":[{"documentation":null,"label":"lines","type":"list","signatureLabelOffset":15,"signatureLabelEnd":28}],"label":"Lines.ToBinary(lines as list)"},{"parameters":[{"documentation":null,"label":"lines","type":"list","signatureLabelOffset":15,"signatureLabelEnd":28},{"documentation":null,"label":"lineSeparator","type":"nullable text","signatureLabelOffset":30,"signatureLabelEnd":60}],"label":"Lines.ToBinary(lines as list, lineSeparator as nullable text)"},{"parameters":[{"documentation":null,"label":"lines","type":"list","signatureLabelOffset":15,"signatureLabelEnd":28},{"documentation":null,"label":"lineSeparator","type":"nullable text","signatureLabelOffset":30,"signatureLabelEnd":60},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":62,"signatureLabelEnd":89}],"label":"Lines.ToBinary(lines as list, lineSeparator as nullable text, encoding as nullable number)"},{"parameters":[{"documentation":null,"label":"lines","type":"list","signatureLabelOffset":15,"signatureLabelEnd":28},{"documentation":null,"label":"lineSeparator","type":"nullable text","signatureLabelOffset":30,"signatureLabelEnd":60},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":62,"signatureLabelEnd":89},{"documentation":null,"label":"includeByteOrderMark","type":"nullable logical","signatureLabelOffset":91,"signatureLabelEnd":131}],"label":"Lines.ToBinary(lines as list, lineSeparator as nullable text, encoding as nullable number, includeByteOrderMark as nullable logical)"}]},{"export":"Lines.ToText","kind":"Function","primitiveType":"text","summary":"Converts a list of text into a single text.  The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.","signatures":[{"parameters":[{"documentation":null,"label":"lines","type":"list","signatureLabelOffset":13,"signatureLabelEnd":26}],"label":"Lines.ToText(lines as list)"},{"parameters":[{"documentation":null,"label":"lines","type":"list","signatureLabelOffset":13,"signatureLabelEnd":26},{"documentation":null,"label":"lineSeparator","type":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":58}],"label":"Lines.ToText(lines as list, lineSeparator as nullable text)"}]},{"export":"List.Accumulate","kind":"Function","primitiveType":"any","summary":"Accumulates a summary value from the items in the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"seed","type":"any","signatureLabelOffset":30,"signatureLabelEnd":41},{"documentation":null,"label":"accumulator","type":"function","signatureLabelOffset":43,"signatureLabelEnd":66}],"label":"List.Accumulate(list as list, seed as any, accumulator as function)"}]},{"export":"List.AllTrue","kind":"Function","primitiveType":"logical","summary":"Returns true if all expressions are true.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":13,"signatureLabelEnd":25}],"label":"List.AllTrue(list as list)"}]},{"export":"List.Alternate","kind":"Function","primitiveType":"list","summary":"Returns a list comprised of all the odd numbered offset elements in a list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":29,"signatureLabelEnd":44}],"label":"List.Alternate(list as list, count as number)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":29,"signatureLabelEnd":44},{"documentation":null,"label":"repeatInterval","type":"nullable number","signatureLabelOffset":46,"signatureLabelEnd":79}],"label":"List.Alternate(list as list, count as number, repeatInterval as nullable number)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":29,"signatureLabelEnd":44},{"documentation":null,"label":"repeatInterval","type":"nullable number","signatureLabelOffset":46,"signatureLabelEnd":79},{"documentation":null,"label":"offset","type":"nullable number","signatureLabelOffset":81,"signatureLabelEnd":106}],"label":"List.Alternate(list as list, count as number, repeatInterval as nullable number, offset as nullable number)"}]},{"export":"List.AnyTrue","kind":"Function","primitiveType":"logical","summary":"Returns true if any expression is true.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":13,"signatureLabelEnd":25}],"label":"List.AnyTrue(list as list)"}]},{"export":"List.Average","kind":"Function","primitiveType":"any","summary":"Returns the average of the values. Works with number, date, datetime, datetimezone and duration values.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":13,"signatureLabelEnd":25}],"label":"List.Average(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":13,"signatureLabelEnd":25},{"documentation":null,"label":"precision","type":"nullable number","signatureLabelOffset":27,"signatureLabelEnd":55}],"label":"List.Average(list as list, precision as nullable number)"}]},{"export":"List.Buffer","kind":"Function","primitiveType":"list","summary":"Buffers a list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":12,"signatureLabelEnd":24}],"label":"List.Buffer(list as list)"}]},{"export":"List.Combine","kind":"Function","primitiveType":"list","summary":"Returns a single list by combining multiple lists.","signatures":[{"parameters":[{"documentation":null,"label":"lists","type":"list","signatureLabelOffset":13,"signatureLabelEnd":26}],"label":"List.Combine(lists as list)"}]},{"export":"List.Contains","kind":"Function","primitiveType":"logical","summary":"Indicates whether the list contains the value.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":14,"signatureLabelEnd":26},{"documentation":null,"label":"value","type":"any","signatureLabelOffset":28,"signatureLabelEnd":40}],"label":"List.Contains(list as list, value as any)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":14,"signatureLabelEnd":26},{"documentation":null,"label":"value","type":"any","signatureLabelOffset":28,"signatureLabelEnd":40},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":42,"signatureLabelEnd":65}],"label":"List.Contains(list as list, value as any, equationCriteria as any)"}]},{"export":"List.ContainsAll","kind":"Function","primitiveType":"logical","summary":"Indicates where a list includes all the values in another list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"documentation":null,"label":"values","type":"list","signatureLabelOffset":31,"signatureLabelEnd":45}],"label":"List.ContainsAll(list as list, values as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"documentation":null,"label":"values","type":"list","signatureLabelOffset":31,"signatureLabelEnd":45},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":47,"signatureLabelEnd":70}],"label":"List.ContainsAll(list as list, values as list, equationCriteria as any)"}]},{"export":"List.ContainsAny","kind":"Function","primitiveType":"logical","summary":"Indicates where a list includes any of the values in another list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"documentation":null,"label":"values","type":"list","signatureLabelOffset":31,"signatureLabelEnd":45}],"label":"List.ContainsAny(list as list, values as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"documentation":null,"label":"values","type":"list","signatureLabelOffset":31,"signatureLabelEnd":45},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":47,"signatureLabelEnd":70}],"label":"List.ContainsAny(list as list, values as list, equationCriteria as any)"}]},{"export":"List.Count","kind":"Function","primitiveType":"number","summary":"Returns the number of items in the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":11,"signatureLabelEnd":23}],"label":"List.Count(list as list)"}]},{"export":"List.Covariance","kind":"Function","primitiveType":"nullable number","summary":"Returns the covariance between the two lists of numbers.","signatures":[{"parameters":[{"documentation":null,"label":"numberList1","type":"list","signatureLabelOffset":16,"signatureLabelEnd":35},{"documentation":null,"label":"numberList2","type":"list","signatureLabelOffset":37,"signatureLabelEnd":56}],"label":"List.Covariance(numberList1 as list, numberList2 as list)"}]},{"export":"List.Dates","kind":"Function","primitiveType":"list","summary":"Generates a list of date values given an initial value, count, and incremental duration value.","signatures":[{"parameters":[{"documentation":null,"label":"start","type":"date","signatureLabelOffset":11,"signatureLabelEnd":24},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":26,"signatureLabelEnd":41},{"documentation":null,"label":"step","type":"duration","signatureLabelOffset":43,"signatureLabelEnd":59}],"label":"List.Dates(start as date, count as number, step as duration)"}]},{"export":"List.DateTimes","kind":"Function","primitiveType":"list","summary":"Generates a list of datetime values given an initial value, count, and incremental duration value.","signatures":[{"parameters":[{"documentation":null,"label":"start","type":"datetime","signatureLabelOffset":15,"signatureLabelEnd":32},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":34,"signatureLabelEnd":49},{"documentation":null,"label":"step","type":"duration","signatureLabelOffset":51,"signatureLabelEnd":67}],"label":"List.DateTimes(start as datetime, count as number, step as duration)"}]},{"export":"List.DateTimeZones","kind":"Function","primitiveType":"list","summary":"Generates a list of datetimezone values given an initial value, count, and incremental duration value.","signatures":[{"parameters":[{"documentation":null,"label":"start","type":"datetimezone","signatureLabelOffset":19,"signatureLabelEnd":40},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":42,"signatureLabelEnd":57},{"documentation":null,"label":"step","type":"duration","signatureLabelOffset":59,"signatureLabelEnd":75}],"label":"List.DateTimeZones(start as datetimezone, count as number, step as duration)"}]},{"export":"List.Difference","kind":"Function","primitiveType":"list","summary":"Returns the difference of the two given lists.","signatures":[{"parameters":[{"documentation":null,"label":"list1","type":"list","signatureLabelOffset":16,"signatureLabelEnd":29},{"documentation":null,"label":"list2","type":"list","signatureLabelOffset":31,"signatureLabelEnd":44}],"label":"List.Difference(list1 as list, list2 as list)"},{"parameters":[{"documentation":null,"label":"list1","type":"list","signatureLabelOffset":16,"signatureLabelEnd":29},{"documentation":null,"label":"list2","type":"list","signatureLabelOffset":31,"signatureLabelEnd":44},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":46,"signatureLabelEnd":69}],"label":"List.Difference(list1 as list, list2 as list, equationCriteria as any)"}]},{"export":"List.Distinct","kind":"Function","primitiveType":"list","summary":"Returns a list of values with duplicates removed.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":14,"signatureLabelEnd":26}],"label":"List.Distinct(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":14,"signatureLabelEnd":26},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":28,"signatureLabelEnd":51}],"label":"List.Distinct(list as list, equationCriteria as any)"}]},{"export":"List.Durations","kind":"Function","primitiveType":"list","summary":"Generates a list of duration values given an initial value, count, and incremental duration value.","signatures":[{"parameters":[{"documentation":null,"label":"start","type":"duration","signatureLabelOffset":15,"signatureLabelEnd":32},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":34,"signatureLabelEnd":49},{"documentation":null,"label":"step","type":"duration","signatureLabelOffset":51,"signatureLabelEnd":67}],"label":"List.Durations(start as duration, count as number, step as duration)"}]},{"export":"List.FindText","kind":"Function","primitiveType":"list","summary":"Returns a list of values (including record fields) that contain the specified text.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":14,"signatureLabelEnd":26},{"documentation":null,"label":"text","type":"text","signatureLabelOffset":28,"signatureLabelEnd":40}],"label":"List.FindText(list as list, text as text)"}]},{"export":"List.First","kind":"Function","primitiveType":"any","summary":"Returns the first value of the list or the specified default if empty.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":11,"signatureLabelEnd":23}],"label":"List.First(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":11,"signatureLabelEnd":23},{"documentation":null,"label":"defaultValue","type":"any","signatureLabelOffset":25,"signatureLabelEnd":44}],"label":"List.First(list as list, defaultValue as any)"}]},{"export":"List.FirstN","kind":"Function","primitiveType":"any","summary":"Returns the first set of items in the list by specifying how many items to return or a qualifying condition.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":12,"signatureLabelEnd":24},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":26,"signatureLabelEnd":49}],"label":"List.FirstN(list as list, countOrCondition as any)"}]},{"export":"List.Generate","kind":"Function","primitiveType":"list","summary":"Generates a list given an initial value function, a condition function, a next function, and an optional transformation function on the values.","signatures":[{"parameters":[{"documentation":null,"label":"initial","type":"function","signatureLabelOffset":14,"signatureLabelEnd":33},{"documentation":null,"label":"condition","type":"function","signatureLabelOffset":35,"signatureLabelEnd":56},{"documentation":null,"label":"next","type":"function","signatureLabelOffset":58,"signatureLabelEnd":74}],"label":"List.Generate(initial as function, condition as function, next as function)"},{"parameters":[{"documentation":null,"label":"initial","type":"function","signatureLabelOffset":14,"signatureLabelEnd":33},{"documentation":null,"label":"condition","type":"function","signatureLabelOffset":35,"signatureLabelEnd":56},{"documentation":null,"label":"next","type":"function","signatureLabelOffset":58,"signatureLabelEnd":74},{"documentation":null,"label":"selector","type":"nullable function","signatureLabelOffset":76,"signatureLabelEnd":105}],"label":"List.Generate(initial as function, condition as function, next as function, selector as nullable function)"}]},{"export":"List.InsertRange","kind":"Function","primitiveType":"list","summary":"Inserts values into a list at the given index.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"documentation":null,"label":"index","type":"number","signatureLabelOffset":31,"signatureLabelEnd":46},{"documentation":null,"label":"values","type":"list","signatureLabelOffset":48,"signatureLabelEnd":62}],"label":"List.InsertRange(list as list, index as number, values as list)"}]},{"export":"List.Intersect","kind":"Function","primitiveType":"list","summary":"Returns the intersection of the list values found in the input.","signatures":[{"parameters":[{"documentation":null,"label":"lists","type":"list","signatureLabelOffset":15,"signatureLabelEnd":28}],"label":"List.Intersect(lists as list)"},{"parameters":[{"documentation":null,"label":"lists","type":"list","signatureLabelOffset":15,"signatureLabelEnd":28},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":30,"signatureLabelEnd":53}],"label":"List.Intersect(lists as list, equationCriteria as any)"}]},{"export":"List.IsDistinct","kind":"Function","primitiveType":"logical","summary":"Indicates whether there are duplicates in the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":16,"signatureLabelEnd":28}],"label":"List.IsDistinct(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":30,"signatureLabelEnd":53}],"label":"List.IsDistinct(list as list, equationCriteria as any)"}]},{"export":"List.IsEmpty","kind":"Function","primitiveType":"logical","summary":"Returns true if the list is empty.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":13,"signatureLabelEnd":25}],"label":"List.IsEmpty(list as list)"}]},{"export":"List.Last","kind":"Function","primitiveType":"any","summary":"Returns the last value of the list or the specified default if empty.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22}],"label":"List.Last(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"defaultValue","type":"any","signatureLabelOffset":24,"signatureLabelEnd":43}],"label":"List.Last(list as list, defaultValue as any)"}]},{"export":"List.LastN","kind":"Function","primitiveType":"any","summary":"Returns the last value in the list.  Can optionally specify how many values to return or a qualifying condition.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":11,"signatureLabelEnd":23}],"label":"List.LastN(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":11,"signatureLabelEnd":23},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":25,"signatureLabelEnd":48}],"label":"List.LastN(list as list, countOrCondition as any)"}]},{"export":"List.MatchesAll","kind":"Function","primitiveType":"logical","summary":"Returns true if the condition function is satisfied by all values in the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"condition","type":"function","signatureLabelOffset":30,"signatureLabelEnd":51}],"label":"List.MatchesAll(list as list, condition as function)"}]},{"export":"List.MatchesAny","kind":"Function","primitiveType":"logical","summary":"Returns true if the condition function is satisfied by any value.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"condition","type":"function","signatureLabelOffset":30,"signatureLabelEnd":51}],"label":"List.MatchesAny(list as list, condition as function)"}]},{"export":"List.Max","kind":"Function","primitiveType":"any","summary":"Returns the maximum value or the default value for an empty list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":9,"signatureLabelEnd":21}],"label":"List.Max(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":23,"signatureLabelEnd":37}],"label":"List.Max(list as list, default as any)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":23,"signatureLabelEnd":37},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":39,"signatureLabelEnd":64}],"label":"List.Max(list as list, default as any, comparisonCriteria as any)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":23,"signatureLabelEnd":37},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":39,"signatureLabelEnd":64},{"documentation":null,"label":"includeNulls","type":"nullable logical","signatureLabelOffset":66,"signatureLabelEnd":98}],"label":"List.Max(list as list, default as any, comparisonCriteria as any, includeNulls as nullable logical)"}]},{"export":"List.MaxN","kind":"Function","primitiveType":"list","summary":"Returns the maximum value(s) in the list. The number of values to return or filtering condition must be specified.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":24,"signatureLabelEnd":47}],"label":"List.MaxN(list as list, countOrCondition as any)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":24,"signatureLabelEnd":47},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":49,"signatureLabelEnd":74}],"label":"List.MaxN(list as list, countOrCondition as any, comparisonCriteria as any)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":24,"signatureLabelEnd":47},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":49,"signatureLabelEnd":74},{"documentation":null,"label":"includeNulls","type":"nullable logical","signatureLabelOffset":76,"signatureLabelEnd":108}],"label":"List.MaxN(list as list, countOrCondition as any, comparisonCriteria as any, includeNulls as nullable logical)"}]},{"export":"List.Median","kind":"Function","primitiveType":"any","summary":"Returns the median value in the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":12,"signatureLabelEnd":24}],"label":"List.Median(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":12,"signatureLabelEnd":24},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":26,"signatureLabelEnd":51}],"label":"List.Median(list as list, comparisonCriteria as any)"}]},{"export":"List.Min","kind":"Function","primitiveType":"any","summary":"Returns the minimum value or the default value for an empty list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":9,"signatureLabelEnd":21}],"label":"List.Min(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":23,"signatureLabelEnd":37}],"label":"List.Min(list as list, default as any)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":23,"signatureLabelEnd":37},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":39,"signatureLabelEnd":64}],"label":"List.Min(list as list, default as any, comparisonCriteria as any)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":23,"signatureLabelEnd":37},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":39,"signatureLabelEnd":64},{"documentation":null,"label":"includeNulls","type":"nullable logical","signatureLabelOffset":66,"signatureLabelEnd":98}],"label":"List.Min(list as list, default as any, comparisonCriteria as any, includeNulls as nullable logical)"}]},{"export":"List.MinN","kind":"Function","primitiveType":"list","summary":"Returns the minimum value(s) in the list. The number of values to return or filtering condition may be specified.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":24,"signatureLabelEnd":47}],"label":"List.MinN(list as list, countOrCondition as any)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":24,"signatureLabelEnd":47},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":49,"signatureLabelEnd":74}],"label":"List.MinN(list as list, countOrCondition as any, comparisonCriteria as any)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":24,"signatureLabelEnd":47},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":49,"signatureLabelEnd":74},{"documentation":null,"label":"includeNulls","type":"nullable logical","signatureLabelOffset":76,"signatureLabelEnd":108}],"label":"List.MinN(list as list, countOrCondition as any, comparisonCriteria as any, includeNulls as nullable logical)"}]},{"export":"List.Mode","kind":"Function","primitiveType":"any","summary":"Returns the most frequent value in the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22}],"label":"List.Mode(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":24,"signatureLabelEnd":47}],"label":"List.Mode(list as list, equationCriteria as any)"}]},{"export":"List.Modes","kind":"Function","primitiveType":"list","summary":"Returns a list of the most frequent values in the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":11,"signatureLabelEnd":23}],"label":"List.Modes(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":11,"signatureLabelEnd":23},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":25,"signatureLabelEnd":48}],"label":"List.Modes(list as list, equationCriteria as any)"}]},{"export":"List.NonNullCount","kind":"Function","primitiveType":"number","summary":"Returns the number of non-null items in the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":18,"signatureLabelEnd":30}],"label":"List.NonNullCount(list as list)"}]},{"export":"List.Numbers","kind":"Function","primitiveType":"list","summary":"Returns a list of numbers given an initial value, count, and optional increment value.","signatures":[{"parameters":[{"documentation":null,"label":"start","type":"number","signatureLabelOffset":13,"signatureLabelEnd":28},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":30,"signatureLabelEnd":45}],"label":"List.Numbers(start as number, count as number)"},{"parameters":[{"documentation":null,"label":"start","type":"number","signatureLabelOffset":13,"signatureLabelEnd":28},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":30,"signatureLabelEnd":45},{"documentation":null,"label":"increment","type":"nullable number","signatureLabelOffset":47,"signatureLabelEnd":75}],"label":"List.Numbers(start as number, count as number, increment as nullable number)"}]},{"export":"List.PositionOf","kind":"Function","primitiveType":"any","summary":"Returns the offset(s) of a value in a list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"value","type":"any","signatureLabelOffset":30,"signatureLabelEnd":42}],"label":"List.PositionOf(list as list, value as any)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"value","type":"any","signatureLabelOffset":30,"signatureLabelEnd":42},{"documentation":null,"label":"occurrence","type":"nullable number","signatureLabelOffset":44,"signatureLabelEnd":73}],"label":"List.PositionOf(list as list, value as any, occurrence as nullable number)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"value","type":"any","signatureLabelOffset":30,"signatureLabelEnd":42},{"documentation":null,"label":"occurrence","type":"nullable number","signatureLabelOffset":44,"signatureLabelEnd":73},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":75,"signatureLabelEnd":98}],"label":"List.PositionOf(list as list, value as any, occurrence as nullable number, equationCriteria as any)"}]},{"export":"List.PositionOfAny","kind":"Function","primitiveType":"any","summary":"Returns the first offset of a value in a list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":19,"signatureLabelEnd":31},{"documentation":null,"label":"values","type":"list","signatureLabelOffset":33,"signatureLabelEnd":47}],"label":"List.PositionOfAny(list as list, values as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":19,"signatureLabelEnd":31},{"documentation":null,"label":"values","type":"list","signatureLabelOffset":33,"signatureLabelEnd":47},{"documentation":null,"label":"occurrence","type":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":78}],"label":"List.PositionOfAny(list as list, values as list, occurrence as nullable number)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":19,"signatureLabelEnd":31},{"documentation":null,"label":"values","type":"list","signatureLabelOffset":33,"signatureLabelEnd":47},{"documentation":null,"label":"occurrence","type":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":78},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":80,"signatureLabelEnd":103}],"label":"List.PositionOfAny(list as list, values as list, occurrence as nullable number, equationCriteria as any)"}]},{"export":"List.Positions","kind":"Function","primitiveType":"list","summary":"Returns a list of offsets for the input.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":15,"signatureLabelEnd":27}],"label":"List.Positions(list as list)"}]},{"export":"List.Product","kind":"Function","primitiveType":"nullable number","summary":"Returns the product of the numbers in the list.","signatures":[{"parameters":[{"documentation":null,"label":"numbersList","type":"list","signatureLabelOffset":13,"signatureLabelEnd":32}],"label":"List.Product(numbersList as list)"},{"parameters":[{"documentation":null,"label":"numbersList","type":"list","signatureLabelOffset":13,"signatureLabelEnd":32},{"documentation":null,"label":"precision","type":"nullable number","signatureLabelOffset":34,"signatureLabelEnd":62}],"label":"List.Product(numbersList as list, precision as nullable number)"}]},{"export":"List.Random","kind":"Function","primitiveType":"list","summary":"Returns a list of random numbers.","signatures":[{"parameters":[{"documentation":null,"label":"count","type":"number","signatureLabelOffset":12,"signatureLabelEnd":27}],"label":"List.Random(count as number)"},{"parameters":[{"documentation":null,"label":"count","type":"number","signatureLabelOffset":12,"signatureLabelEnd":27},{"documentation":null,"label":"seed","type":"nullable number","signatureLabelOffset":29,"signatureLabelEnd":52}],"label":"List.Random(count as number, seed as nullable number)"}]},{"export":"List.Range","kind":"Function","primitiveType":"list","summary":"Returns a subset of the list beginning at an offset.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":11,"signatureLabelEnd":23},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":25,"signatureLabelEnd":41}],"label":"List.Range(list as list, offset as number)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":11,"signatureLabelEnd":23},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":25,"signatureLabelEnd":41},{"documentation":null,"label":"count","type":"nullable number","signatureLabelOffset":43,"signatureLabelEnd":67}],"label":"List.Range(list as list, offset as number, count as nullable number)"}]},{"export":"List.RemoveFirstN","kind":"Function","primitiveType":"list","summary":"Returns a list that skips the specified number of elements at the beginning of the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":18,"signatureLabelEnd":30}],"label":"List.RemoveFirstN(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":18,"signatureLabelEnd":30},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":32,"signatureLabelEnd":55}],"label":"List.RemoveFirstN(list as list, countOrCondition as any)"}]},{"export":"List.RemoveItems","kind":"Function","primitiveType":"list","summary":"Removes items from list1 that are present in list.","signatures":[{"parameters":[{"documentation":null,"label":"list1","type":"list","signatureLabelOffset":17,"signatureLabelEnd":30},{"documentation":null,"label":"list2","type":"list","signatureLabelOffset":32,"signatureLabelEnd":45}],"label":"List.RemoveItems(list1 as list, list2 as list)"}]},{"export":"List.RemoveLastN","kind":"Function","primitiveType":"list","summary":"Returns a list that removes the specified number of elements from the end of the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":17,"signatureLabelEnd":29}],"label":"List.RemoveLastN(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":31,"signatureLabelEnd":54}],"label":"List.RemoveLastN(list as list, countOrCondition as any)"}]},{"export":"List.RemoveMatchingItems","kind":"Function","primitiveType":"list","summary":"Removes all occurrences of the input values.","signatures":[{"parameters":[{"documentation":null,"label":"list1","type":"list","signatureLabelOffset":25,"signatureLabelEnd":38},{"documentation":null,"label":"list2","type":"list","signatureLabelOffset":40,"signatureLabelEnd":53}],"label":"List.RemoveMatchingItems(list1 as list, list2 as list)"},{"parameters":[{"documentation":null,"label":"list1","type":"list","signatureLabelOffset":25,"signatureLabelEnd":38},{"documentation":null,"label":"list2","type":"list","signatureLabelOffset":40,"signatureLabelEnd":53},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":55,"signatureLabelEnd":78}],"label":"List.RemoveMatchingItems(list1 as list, list2 as list, equationCriteria as any)"}]},{"export":"List.RemoveNulls","kind":"Function","primitiveType":"list","summary":"Removes all \"null\" values from the specified list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":17,"signatureLabelEnd":29}],"label":"List.RemoveNulls(list as list)"}]},{"export":"List.RemoveRange","kind":"Function","primitiveType":"list","summary":"Removes count number of values starting at the specified position.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"documentation":null,"label":"index","type":"number","signatureLabelOffset":31,"signatureLabelEnd":46}],"label":"List.RemoveRange(list as list, index as number)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":17,"signatureLabelEnd":29},{"documentation":null,"label":"index","type":"number","signatureLabelOffset":31,"signatureLabelEnd":46},{"documentation":null,"label":"count","type":"nullable number","signatureLabelOffset":48,"signatureLabelEnd":72}],"label":"List.RemoveRange(list as list, index as number, count as nullable number)"}]},{"export":"List.Repeat","kind":"Function","primitiveType":"list","summary":"Returns a list that is count repetitions of the original list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":12,"signatureLabelEnd":24},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":26,"signatureLabelEnd":41}],"label":"List.Repeat(list as list, count as number)"}]},{"export":"List.ReplaceMatchingItems","kind":"Function","primitiveType":"list","summary":"Applies each replacement of { old, new }.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":26,"signatureLabelEnd":38},{"documentation":null,"label":"replacements","type":"list","signatureLabelOffset":40,"signatureLabelEnd":60}],"label":"List.ReplaceMatchingItems(list as list, replacements as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":26,"signatureLabelEnd":38},{"documentation":null,"label":"replacements","type":"list","signatureLabelOffset":40,"signatureLabelEnd":60},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":62,"signatureLabelEnd":85}],"label":"List.ReplaceMatchingItems(list as list, replacements as list, equationCriteria as any)"}]},{"export":"List.ReplaceRange","kind":"Function","primitiveType":"list","summary":"Replaces count number of values starting at position with the replacement values.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":18,"signatureLabelEnd":30},{"documentation":null,"label":"index","type":"number","signatureLabelOffset":32,"signatureLabelEnd":47},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":49,"signatureLabelEnd":64},{"documentation":null,"label":"replaceWith","type":"list","signatureLabelOffset":66,"signatureLabelEnd":85}],"label":"List.ReplaceRange(list as list, index as number, count as number, replaceWith as list)"}]},{"export":"List.ReplaceValue","kind":"Function","primitiveType":"list","summary":"Searches a list for the specified value and replaces it.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":18,"signatureLabelEnd":30},{"documentation":null,"label":"oldValue","type":"any","signatureLabelOffset":32,"signatureLabelEnd":47},{"documentation":null,"label":"newValue","type":"any","signatureLabelOffset":49,"signatureLabelEnd":64},{"documentation":null,"label":"replacer","type":"function","signatureLabelOffset":66,"signatureLabelEnd":86}],"label":"List.ReplaceValue(list as list, oldValue as any, newValue as any, replacer as function)"}]},{"export":"List.Reverse","kind":"Function","primitiveType":"list","summary":"Reverses the order of values in the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":13,"signatureLabelEnd":25}],"label":"List.Reverse(list as list)"}]},{"export":"List.Select","kind":"Function","primitiveType":"list","summary":"Returns a list of values that match the condition.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":12,"signatureLabelEnd":24},{"documentation":null,"label":"selection","type":"function","signatureLabelOffset":26,"signatureLabelEnd":47}],"label":"List.Select(list as list, selection as function)"}]},{"export":"List.Single","kind":"Function","primitiveType":"any","summary":"Returns the one list item for a list of length one, otherwise throws an exception.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":12,"signatureLabelEnd":24}],"label":"List.Single(list as list)"}]},{"export":"List.SingleOrDefault","kind":"Function","primitiveType":"any","summary":"Returns the one list item for a list of length one and the default value for an empty list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":21,"signatureLabelEnd":33}],"label":"List.SingleOrDefault(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":21,"signatureLabelEnd":33},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":35,"signatureLabelEnd":49}],"label":"List.SingleOrDefault(list as list, default as any)"}]},{"export":"List.Skip","kind":"Function","primitiveType":"list","summary":"Returns a list that skips the specified number of elements at the beginning of the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22}],"label":"List.Skip(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":24,"signatureLabelEnd":47}],"label":"List.Skip(list as list, countOrCondition as any)"}]},{"export":"List.Sort","kind":"Function","primitiveType":"list","summary":"Sorts a list of data according to the criteria specified.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22}],"label":"List.Sort(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":24,"signatureLabelEnd":49}],"label":"List.Sort(list as list, comparisonCriteria as any)"}]},{"export":"List.Split","kind":"Function","primitiveType":"list","summary":"Splits the specified list into a list of lists using the specified page size.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":11,"signatureLabelEnd":23},{"documentation":null,"label":"pageSize","type":"number","signatureLabelOffset":25,"signatureLabelEnd":43}],"label":"List.Split(list as list, pageSize as number)"}]},{"export":"List.StandardDeviation","kind":"Function","primitiveType":"nullable number","summary":"Returns a sample based estimate of the standard deviation.","signatures":[{"parameters":[{"documentation":null,"label":"numbersList","type":"list","signatureLabelOffset":23,"signatureLabelEnd":42}],"label":"List.StandardDeviation(numbersList as list)"}]},{"export":"List.Sum","kind":"Function","primitiveType":"any","summary":"Returns the sum of the items in the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":9,"signatureLabelEnd":21}],"label":"List.Sum(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":9,"signatureLabelEnd":21},{"documentation":null,"label":"precision","type":"nullable number","signatureLabelOffset":23,"signatureLabelEnd":51}],"label":"List.Sum(list as list, precision as nullable number)"}]},{"export":"List.Times","kind":"Function","primitiveType":"list","summary":"Generates a list of time values given an initial value, count, and incremental duration value.","signatures":[{"parameters":[{"documentation":null,"label":"start","type":"time","signatureLabelOffset":11,"signatureLabelEnd":24},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":26,"signatureLabelEnd":41},{"documentation":null,"label":"step","type":"duration","signatureLabelOffset":43,"signatureLabelEnd":59}],"label":"List.Times(start as time, count as number, step as duration)"}]},{"export":"List.Transform","kind":"Function","primitiveType":"list","summary":"Returns a new list of values computed from this list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"documentation":null,"label":"transform","type":"function","signatureLabelOffset":29,"signatureLabelEnd":50}],"label":"List.Transform(list as list, transform as function)"}]},{"export":"List.TransformMany","kind":"Function","primitiveType":"list","summary":"Returns a list whose elements are transformed from the input list using specified functions.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":19,"signatureLabelEnd":31},{"documentation":null,"label":"collectionTransform","type":"function","signatureLabelOffset":33,"signatureLabelEnd":64},{"documentation":null,"label":"resultTransform","type":"function","signatureLabelOffset":66,"signatureLabelEnd":93}],"label":"List.TransformMany(list as list, collectionTransform as function, resultTransform as function)"}]},{"export":"List.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all lists.","signatures":null},{"export":"List.Union","kind":"Function","primitiveType":"list","summary":"Returns the union of the list values found in the input.","signatures":[{"parameters":[{"documentation":null,"label":"lists","type":"list","signatureLabelOffset":11,"signatureLabelEnd":24}],"label":"List.Union(lists as list)"},{"parameters":[{"documentation":null,"label":"lists","type":"list","signatureLabelOffset":11,"signatureLabelEnd":24},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":26,"signatureLabelEnd":49}],"label":"List.Union(lists as list, equationCriteria as any)"}]},{"export":"List.Zip","kind":"Function","primitiveType":"list","summary":"Returns a list of lists by combining items at the same position in multiple lists.","signatures":[{"parameters":[{"documentation":null,"label":"lists","type":"list","signatureLabelOffset":9,"signatureLabelEnd":22}],"label":"List.Zip(lists as list)"}]},{"export":"Logical.From","kind":"Function","primitiveType":"nullable logical","summary":"Creates a logical from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":13,"signatureLabelEnd":25}],"label":"Logical.From(value as any)"}]},{"export":"Logical.FromText","kind":"Function","primitiveType":"nullable logical","summary":"Creates a logical value from the text values \"true\" and \"false\".","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":17,"signatureLabelEnd":38}],"label":"Logical.FromText(text as nullable text)"}]},{"export":"Logical.ToText","kind":"Function","primitiveType":"nullable text","summary":"Returns the text \"true\" or \"false\" given a logical value.","signatures":[{"parameters":[{"documentation":null,"label":"logicalValue","type":"nullable logical","signatureLabelOffset":15,"signatureLabelEnd":47}],"label":"Logical.ToText(logicalValue as nullable logical)"}]},{"export":"Logical.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all logical values.","signatures":null},{"export":"MissingField.Error","kind":"Constant","primitiveType":"number","summary":"An optional parameter in record and table functions indicating that missing fields should result in an error. (This is the default parameter value.)","signatures":null},{"export":"MissingField.Ignore","kind":"Constant","primitiveType":"number","summary":"An optional parameter in record and table functions indicating that missing fields should be ignored.","signatures":null},{"export":"MissingField.Type","kind":"Type","primitiveType":"type","summary":"Specifies the expected action for missing values in a row that contains columns less than expected.","signatures":null},{"export":"MissingField.UseNull","kind":"Constant","primitiveType":"number","summary":"An optional parameter in record and table functions indicating that missing fields should be included as null values.","signatures":null},{"export":"None.Type","kind":"Type","primitiveType":"type","summary":"None.Type","signatures":null},{"export":"Null.Type","kind":"Type","primitiveType":"type","summary":"The type that represents null.","signatures":null},{"export":"Number.Abs","kind":"Function","primitiveType":"nullable number","summary":"Returns the absolute value of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36}],"label":"Number.Abs(number as nullable number)"}]},{"export":"Number.Acos","kind":"Function","primitiveType":"nullable number","summary":"Returns the arccosine of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"label":"Number.Acos(number as nullable number)"}]},{"export":"Number.Asin","kind":"Function","primitiveType":"nullable number","summary":"Returns the arcsine of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"label":"Number.Asin(number as nullable number)"}]},{"export":"Number.Atan","kind":"Function","primitiveType":"nullable number","summary":"Returns the arctangent of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"label":"Number.Atan(number as nullable number)"}]},{"export":"Number.Atan2","kind":"Function","primitiveType":"nullable number","summary":"Returns the arctangent of the division of the two numbers.","signatures":[{"parameters":[{"documentation":null,"label":"y","type":"nullable number","signatureLabelOffset":13,"signatureLabelEnd":33},{"documentation":null,"label":"x","type":"nullable number","signatureLabelOffset":35,"signatureLabelEnd":55}],"label":"Number.Atan2(y as nullable number, x as nullable number)"}]},{"export":"Number.BitwiseAnd","kind":"Function","primitiveType":"nullable number","summary":"Returns the result of performing a bitwise \"And\" operation between the two inputs.","signatures":[{"parameters":[{"documentation":null,"label":"number1","type":"nullable number","signatureLabelOffset":18,"signatureLabelEnd":44},{"documentation":null,"label":"number2","type":"nullable number","signatureLabelOffset":46,"signatureLabelEnd":72}],"label":"Number.BitwiseAnd(number1 as nullable number, number2 as nullable number)"}]},{"export":"Number.BitwiseNot","kind":"Function","primitiveType":"any","summary":"Returns a byte where each bit is the opposite of the input.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"any","signatureLabelOffset":18,"signatureLabelEnd":31}],"label":"Number.BitwiseNot(number as any)"}]},{"export":"Number.BitwiseOr","kind":"Function","primitiveType":"nullable number","summary":"Returns the result of performing a bitwise \"Or\" between the two inputs.","signatures":[{"parameters":[{"documentation":null,"label":"number1","type":"nullable number","signatureLabelOffset":17,"signatureLabelEnd":43},{"documentation":null,"label":"number2","type":"nullable number","signatureLabelOffset":45,"signatureLabelEnd":71}],"label":"Number.BitwiseOr(number1 as nullable number, number2 as nullable number)"}]},{"export":"Number.BitwiseShiftLeft","kind":"Function","primitiveType":"nullable number","summary":"Shifts the bits set to the left.","signatures":[{"parameters":[{"documentation":null,"label":"number1","type":"nullable number","signatureLabelOffset":24,"signatureLabelEnd":50},{"documentation":null,"label":"number2","type":"nullable number","signatureLabelOffset":52,"signatureLabelEnd":78}],"label":"Number.BitwiseShiftLeft(number1 as nullable number, number2 as nullable number)"}]},{"export":"Number.BitwiseShiftRight","kind":"Function","primitiveType":"nullable number","summary":"Shifts the bits set to the right.","signatures":[{"parameters":[{"documentation":null,"label":"number1","type":"nullable number","signatureLabelOffset":25,"signatureLabelEnd":51},{"documentation":null,"label":"number2","type":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":79}],"label":"Number.BitwiseShiftRight(number1 as nullable number, number2 as nullable number)"}]},{"export":"Number.BitwiseXor","kind":"Function","primitiveType":"nullable number","summary":"Returns the result of performing a bitwise \"XOR\" (Exclusive-OR) between the two inputs.","signatures":[{"parameters":[{"documentation":null,"label":"number1","type":"nullable number","signatureLabelOffset":18,"signatureLabelEnd":44},{"documentation":null,"label":"number2","type":"nullable number","signatureLabelOffset":46,"signatureLabelEnd":72}],"label":"Number.BitwiseXor(number1 as nullable number, number2 as nullable number)"}]},{"export":"Number.Combinations","kind":"Function","primitiveType":"nullable number","summary":"Returns the number of unique combinations.","signatures":[{"parameters":[{"documentation":null,"label":"setSize","type":"nullable number","signatureLabelOffset":20,"signatureLabelEnd":46},{"documentation":null,"label":"combinationSize","type":"nullable number","signatureLabelOffset":48,"signatureLabelEnd":82}],"label":"Number.Combinations(setSize as nullable number, combinationSize as nullable number)"}]},{"export":"Number.Cos","kind":"Function","primitiveType":"nullable number","summary":"Returns the cosine of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36}],"label":"Number.Cos(number as nullable number)"}]},{"export":"Number.Cosh","kind":"Function","primitiveType":"nullable number","summary":"Returns the hyperbolic cosine of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"label":"Number.Cosh(number as nullable number)"}]},{"export":"Number.E","kind":"Constant","primitiveType":"number","summary":"A constant value that represents e.","signatures":null},{"export":"Number.Epsilon","kind":"Constant","primitiveType":"number","summary":"A constant value that represents the smallest positive number a floating-point number can hold.","signatures":null},{"export":"Number.Exp","kind":"Function","primitiveType":"nullable number","summary":"Raises e to the given power.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36}],"label":"Number.Exp(number as nullable number)"}]},{"export":"Number.Factorial","kind":"Function","primitiveType":"nullable number","summary":"Returns the factorial of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":17,"signatureLabelEnd":42}],"label":"Number.Factorial(number as nullable number)"}]},{"export":"Number.From","kind":"Function","primitiveType":"nullable number","summary":"Creates a number from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":12,"signatureLabelEnd":24}],"label":"Number.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":12,"signatureLabelEnd":24},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":26,"signatureLabelEnd":50}],"label":"Number.From(value as any, culture as nullable text)"}]},{"export":"Number.FromText","kind":"Function","primitiveType":"nullable number","summary":"Creates numbers from common text formats (\"15\", \"3,423.10\", \"5.0E-10\").","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":16,"signatureLabelEnd":37}],"label":"Number.FromText(text as nullable text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":16,"signatureLabelEnd":37},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":39,"signatureLabelEnd":63}],"label":"Number.FromText(text as nullable text, culture as nullable text)"}]},{"export":"Number.IntegerDivide","kind":"Function","primitiveType":"nullable number","summary":"Divides two numbers and returns the integer portion of the result.","signatures":[{"parameters":[{"documentation":null,"label":"number1","type":"nullable number","signatureLabelOffset":21,"signatureLabelEnd":47},{"documentation":null,"label":"number2","type":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":75}],"label":"Number.IntegerDivide(number1 as nullable number, number2 as nullable number)"},{"parameters":[{"documentation":null,"label":"number1","type":"nullable number","signatureLabelOffset":21,"signatureLabelEnd":47},{"documentation":null,"label":"number2","type":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":75},{"documentation":null,"label":"precision","type":"nullable number","signatureLabelOffset":77,"signatureLabelEnd":105}],"label":"Number.IntegerDivide(number1 as nullable number, number2 as nullable number, precision as nullable number)"}]},{"export":"Number.IsEven","kind":"Function","primitiveType":"logical","summary":"Indicates if the value is even.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"number","signatureLabelOffset":14,"signatureLabelEnd":30}],"label":"Number.IsEven(number as number)"}]},{"export":"Number.IsNaN","kind":"Function","primitiveType":"logical","summary":"Indicates if the value is NaN (Not a number).","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"number","signatureLabelOffset":13,"signatureLabelEnd":29}],"label":"Number.IsNaN(number as number)"}]},{"export":"Number.IsOdd","kind":"Function","primitiveType":"logical","summary":"Indicates if the value is odd.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"number","signatureLabelOffset":13,"signatureLabelEnd":29}],"label":"Number.IsOdd(number as number)"}]},{"export":"Number.Ln","kind":"Function","primitiveType":"nullable number","summary":"Returns the natural logarithm of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":10,"signatureLabelEnd":35}],"label":"Number.Ln(number as nullable number)"}]},{"export":"Number.Log","kind":"Function","primitiveType":"nullable number","summary":"Returns the logarithm of the number to the specified base (default e).","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36}],"label":"Number.Log(number as nullable number)"},{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36},{"documentation":null,"label":"base","type":"nullable number","signatureLabelOffset":38,"signatureLabelEnd":61}],"label":"Number.Log(number as nullable number, base as nullable number)"}]},{"export":"Number.Log10","kind":"Function","primitiveType":"nullable number","summary":"Returns the base 10 logarithm of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":13,"signatureLabelEnd":38}],"label":"Number.Log10(number as nullable number)"}]},{"export":"Number.Mod","kind":"Function","primitiveType":"nullable number","summary":"Integer divides two numbers and returns the remainder.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36},{"documentation":null,"label":"divisor","type":"nullable number","signatureLabelOffset":38,"signatureLabelEnd":64}],"label":"Number.Mod(number as nullable number, divisor as nullable number)"},{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36},{"documentation":null,"label":"divisor","type":"nullable number","signatureLabelOffset":38,"signatureLabelEnd":64},{"documentation":null,"label":"precision","type":"nullable number","signatureLabelOffset":66,"signatureLabelEnd":94}],"label":"Number.Mod(number as nullable number, divisor as nullable number, precision as nullable number)"}]},{"export":"Number.NaN","kind":"Constant","primitiveType":"number","summary":"A constant value that represents  0 divided by 0.","signatures":null},{"export":"Number.NegativeInfinity","kind":"Constant","primitiveType":"number","summary":"A constant value that represents -1 divided by 0.","signatures":null},{"export":"Number.Permutations","kind":"Function","primitiveType":"nullable number","summary":"Returns the number of permutations.","signatures":[{"parameters":[{"documentation":null,"label":"setSize","type":"nullable number","signatureLabelOffset":20,"signatureLabelEnd":46},{"documentation":null,"label":"permutationSize","type":"nullable number","signatureLabelOffset":48,"signatureLabelEnd":82}],"label":"Number.Permutations(setSize as nullable number, permutationSize as nullable number)"}]},{"export":"Number.PI","kind":"Constant","primitiveType":"number","summary":"A constant that represents pi.","signatures":null},{"export":"Number.PositiveInfinity","kind":"Constant","primitiveType":"number","summary":"A constant value that represents 1 divided by 0.","signatures":null},{"export":"Number.Power","kind":"Function","primitiveType":"nullable number","summary":"Raises a number to the given power.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":13,"signatureLabelEnd":38},{"documentation":null,"label":"power","type":"nullable number","signatureLabelOffset":40,"signatureLabelEnd":64}],"label":"Number.Power(number as nullable number, power as nullable number)"}]},{"export":"Number.Random","kind":"Function","primitiveType":"number","summary":"Returns a random number.","signatures":[{"parameters":[],"label":"Number.Random()"}]},{"export":"Number.RandomBetween","kind":"Function","primitiveType":"number","summary":"Returns a random number between two numbers.","signatures":[{"parameters":[{"documentation":null,"label":"bottom","type":"number","signatureLabelOffset":21,"signatureLabelEnd":37},{"documentation":null,"label":"top","type":"number","signatureLabelOffset":39,"signatureLabelEnd":52}],"label":"Number.RandomBetween(bottom as number, top as number)"}]},{"export":"Number.Round","kind":"Function","primitiveType":"nullable number","summary":"Returns the rounded number. The number of digits and rounding mode can be specified.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":13,"signatureLabelEnd":38}],"label":"Number.Round(number as nullable number)"},{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":13,"signatureLabelEnd":38},{"documentation":null,"label":"digits","type":"nullable number","signatureLabelOffset":40,"signatureLabelEnd":65}],"label":"Number.Round(number as nullable number, digits as nullable number)"},{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":13,"signatureLabelEnd":38},{"documentation":null,"label":"digits","type":"nullable number","signatureLabelOffset":40,"signatureLabelEnd":65},{"documentation":null,"label":"roundingMode","type":"nullable number","signatureLabelOffset":67,"signatureLabelEnd":98}],"label":"Number.Round(number as nullable number, digits as nullable number, roundingMode as nullable number)"}]},{"export":"Number.RoundAwayFromZero","kind":"Function","primitiveType":"nullable number","summary":"Returns the result of rounding positive numbers up and negative numbers down. The number of digits can be specified.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":25,"signatureLabelEnd":50}],"label":"Number.RoundAwayFromZero(number as nullable number)"},{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":25,"signatureLabelEnd":50},{"documentation":null,"label":"digits","type":"nullable number","signatureLabelOffset":52,"signatureLabelEnd":77}],"label":"Number.RoundAwayFromZero(number as nullable number, digits as nullable number)"}]},{"export":"Number.RoundDown","kind":"Function","primitiveType":"nullable number","summary":"Returns the highest previous number. The number of digits can be specified.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":17,"signatureLabelEnd":42}],"label":"Number.RoundDown(number as nullable number)"},{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":17,"signatureLabelEnd":42},{"documentation":null,"label":"digits","type":"nullable number","signatureLabelOffset":44,"signatureLabelEnd":69}],"label":"Number.RoundDown(number as nullable number, digits as nullable number)"}]},{"export":"Number.RoundTowardZero","kind":"Function","primitiveType":"nullable number","summary":"Returns the result of rounding positive numbers down and negative numbers up. The number of digits can be specified.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":23,"signatureLabelEnd":48}],"label":"Number.RoundTowardZero(number as nullable number)"},{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":23,"signatureLabelEnd":48},{"documentation":null,"label":"digits","type":"nullable number","signatureLabelOffset":50,"signatureLabelEnd":75}],"label":"Number.RoundTowardZero(number as nullable number, digits as nullable number)"}]},{"export":"Number.RoundUp","kind":"Function","primitiveType":"nullable number","summary":"Returns the next highest number. The number of digits can be specified.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":15,"signatureLabelEnd":40}],"label":"Number.RoundUp(number as nullable number)"},{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":15,"signatureLabelEnd":40},{"documentation":null,"label":"digits","type":"nullable number","signatureLabelOffset":42,"signatureLabelEnd":67}],"label":"Number.RoundUp(number as nullable number, digits as nullable number)"}]},{"export":"Number.Sign","kind":"Function","primitiveType":"nullable number","summary":"Returns 1 if the number is positive, -1 if it is negative, and 0 if it is zero.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"label":"Number.Sign(number as nullable number)"}]},{"export":"Number.Sin","kind":"Function","primitiveType":"nullable number","summary":"Returns the sine of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36}],"label":"Number.Sin(number as nullable number)"}]},{"export":"Number.Sinh","kind":"Function","primitiveType":"nullable number","summary":"Returns the hyperbolic sine of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"label":"Number.Sinh(number as nullable number)"}]},{"export":"Number.Sqrt","kind":"Function","primitiveType":"nullable number","summary":"Returns the square root of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"label":"Number.Sqrt(number as nullable number)"}]},{"export":"Number.Tan","kind":"Function","primitiveType":"nullable number","summary":"Returns the tangent of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":11,"signatureLabelEnd":36}],"label":"Number.Tan(number as nullable number)"}]},{"export":"Number.Tanh","kind":"Function","primitiveType":"nullable number","summary":"Returns the hyperbolic tangent of the number.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":12,"signatureLabelEnd":37}],"label":"Number.Tanh(number as nullable number)"}]},{"export":"Number.ToText","kind":"Function","primitiveType":"nullable text","summary":"Formats the given number as text.","signatures":[{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":14,"signatureLabelEnd":39}],"label":"Number.ToText(number as nullable number)"},{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":14,"signatureLabelEnd":39},{"documentation":null,"label":"format","type":"nullable text","signatureLabelOffset":41,"signatureLabelEnd":64}],"label":"Number.ToText(number as nullable number, format as nullable text)"},{"parameters":[{"documentation":null,"label":"number","type":"nullable number","signatureLabelOffset":14,"signatureLabelEnd":39},{"documentation":null,"label":"format","type":"nullable text","signatureLabelOffset":41,"signatureLabelEnd":64},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":66,"signatureLabelEnd":90}],"label":"Number.ToText(number as nullable number, format as nullable text, culture as nullable text)"}]},{"export":"Number.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all numbers.","signatures":null},{"export":"Occurrence.All","kind":"Constant","primitiveType":"number","summary":"A list of positions of all occurrences of the found values is returned.","signatures":null},{"export":"Occurrence.First","kind":"Constant","primitiveType":"number","summary":"The position of the first occurrence of the found value is returned.","signatures":null},{"export":"Occurrence.Last","kind":"Constant","primitiveType":"number","summary":"The position of the last occurrence of the found value is returned.","signatures":null},{"export":"Occurrence.Optional","kind":"Constant","primitiveType":"number","summary":"The item is expected to appear zero or one time in the input.","signatures":null},{"export":"Occurrence.Repeating","kind":"Constant","primitiveType":"number","summary":"The item is expected to appear zero or more times in the input.","signatures":null},{"export":"Occurrence.Required","kind":"Constant","primitiveType":"number","summary":"The item is expected to appear once in the input.","signatures":null},{"export":"Occurrence.Type","kind":"Type","primitiveType":"type","summary":"Specifies the occurrence of an element in a sequence.","signatures":null},{"export":"Order.Ascending","kind":"Constant","primitiveType":"number","summary":"Function type which sorts the list in ascending order.","signatures":null},{"export":"Order.Descending","kind":"Constant","primitiveType":"number","summary":"Function type which sorts the list in descending order.","signatures":null},{"export":"Order.Type","kind":"Type","primitiveType":"type","summary":"Specifies the direction of sorting.","signatures":null},{"export":"Password.Type","kind":"Type","primitiveType":"type","summary":"The type that represents a text password.","signatures":null},{"export":"Percentage.From","kind":"Function","primitiveType":"nullable number","summary":"Returns a percentage value from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":16,"signatureLabelEnd":28}],"label":"Percentage.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":30,"signatureLabelEnd":54}],"label":"Percentage.From(value as any, culture as nullable text)"}]},{"export":"Percentage.Type","kind":"Type","primitiveType":"type","summary":"The type that represents percentage value.","signatures":null},{"export":"Precision.Decimal","kind":"Constant","primitiveType":"number","summary":"An optional parameter for the built-in arthimetic operators to specify decimal precision.","signatures":null},{"export":"Precision.Double","kind":"Constant","primitiveType":"number","summary":"An optional parameter for the built-in arthimetic operators to specify double precision.","signatures":null},{"export":"Precision.Type","kind":"Type","primitiveType":"type","summary":"Specifies the precision of comparison.","signatures":null},{"export":"QuoteStyle.Csv","kind":"Constant","primitiveType":"number","summary":"Quote characters indicate the start of a quoted string.  Nested quotes are indicated by two quote characters.","signatures":null},{"export":"QuoteStyle.None","kind":"Constant","primitiveType":"number","summary":"Quote characters have no significance.","signatures":null},{"export":"QuoteStyle.Type","kind":"Type","primitiveType":"type","summary":"Specifies the quote style.","signatures":null},{"export":"RData.FromBinary","kind":"Function","primitiveType":"any","summary":"Returns a record of data frames from the RData file.","signatures":[{"parameters":[{"documentation":null,"label":"stream","type":"binary","signatureLabelOffset":17,"signatureLabelEnd":33}],"label":"RData.FromBinary(stream as binary)"}]},{"export":"Record.AddField","kind":"Function","primitiveType":"record","summary":"Adds a field to a record.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":16,"signatureLabelEnd":32},{"documentation":null,"label":"fieldName","type":"text","signatureLabelOffset":34,"signatureLabelEnd":51},{"documentation":null,"label":"value","type":"any","signatureLabelOffset":53,"signatureLabelEnd":65}],"label":"Record.AddField(record as record, fieldName as text, value as any)"},{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":16,"signatureLabelEnd":32},{"documentation":null,"label":"fieldName","type":"text","signatureLabelOffset":34,"signatureLabelEnd":51},{"documentation":null,"label":"value","type":"any","signatureLabelOffset":53,"signatureLabelEnd":65},{"documentation":null,"label":"delayed","type":"nullable logical","signatureLabelOffset":67,"signatureLabelEnd":94}],"label":"Record.AddField(record as record, fieldName as text, value as any, delayed as nullable logical)"}]},{"export":"Record.Combine","kind":"Function","primitiveType":"record","summary":"Combines the records in the given list.","signatures":[{"parameters":[{"documentation":null,"label":"records","type":"list","signatureLabelOffset":15,"signatureLabelEnd":30}],"label":"Record.Combine(records as list)"}]},{"export":"Record.Field","kind":"Function","primitiveType":"any","summary":"Returns the value of the specified field in a record.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":13,"signatureLabelEnd":29},{"documentation":null,"label":"field","type":"text","signatureLabelOffset":31,"signatureLabelEnd":44}],"label":"Record.Field(record as record, field as text)"}]},{"export":"Record.FieldCount","kind":"Function","primitiveType":"number","summary":"Returns the number of fields in the record.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":18,"signatureLabelEnd":34}],"label":"Record.FieldCount(record as record)"}]},{"export":"Record.FieldNames","kind":"Function","primitiveType":"list","summary":"Returns the names of the fields.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":18,"signatureLabelEnd":34}],"label":"Record.FieldNames(record as record)"}]},{"export":"Record.FieldOrDefault","kind":"Function","primitiveType":"any","summary":"Returns the value of the specified field in a record or the default value if the field is not found.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"nullable record","signatureLabelOffset":22,"signatureLabelEnd":47},{"documentation":null,"label":"field","type":"text","signatureLabelOffset":49,"signatureLabelEnd":62}],"label":"Record.FieldOrDefault(record as nullable record, field as text)"},{"parameters":[{"documentation":null,"label":"record","type":"nullable record","signatureLabelOffset":22,"signatureLabelEnd":47},{"documentation":null,"label":"field","type":"text","signatureLabelOffset":49,"signatureLabelEnd":62},{"documentation":null,"label":"defaultValue","type":"any","signatureLabelOffset":64,"signatureLabelEnd":83}],"label":"Record.FieldOrDefault(record as nullable record, field as text, defaultValue as any)"}]},{"export":"Record.FieldValues","kind":"Function","primitiveType":"list","summary":"Returns a list of the field values.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":19,"signatureLabelEnd":35}],"label":"Record.FieldValues(record as record)"}]},{"export":"Record.FromList","kind":"Function","primitiveType":"record","summary":"Returns a record given a list of field values and a set of fields.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"fields","type":"any","signatureLabelOffset":30,"signatureLabelEnd":43}],"label":"Record.FromList(list as list, fields as any)"}]},{"export":"Record.FromTable","kind":"Function","primitiveType":"record","summary":"Creates a record from a table of the form {[Name = name, Value = value]}.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":17,"signatureLabelEnd":31}],"label":"Record.FromTable(table as table)"}]},{"export":"Record.HasFields","kind":"Function","primitiveType":"logical","summary":"Indicates whether the record has the specified fields.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":17,"signatureLabelEnd":33},{"documentation":null,"label":"fields","type":"any","signatureLabelOffset":35,"signatureLabelEnd":48}],"label":"Record.HasFields(record as record, fields as any)"}]},{"export":"Record.RemoveFields","kind":"Function","primitiveType":"record","summary":"Removes the specified field(s) from the input record.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":20,"signatureLabelEnd":36},{"documentation":null,"label":"fields","type":"any","signatureLabelOffset":38,"signatureLabelEnd":51}],"label":"Record.RemoveFields(record as record, fields as any)"},{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":20,"signatureLabelEnd":36},{"documentation":null,"label":"fields","type":"any","signatureLabelOffset":38,"signatureLabelEnd":51},{"documentation":null,"label":"missingField","type":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":84}],"label":"Record.RemoveFields(record as record, fields as any, missingField as nullable number)"}]},{"export":"Record.RenameFields","kind":"Function","primitiveType":"record","summary":"Applies rename(s) from a list in the form { old, new }.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":20,"signatureLabelEnd":36},{"documentation":null,"label":"renames","type":"list","signatureLabelOffset":38,"signatureLabelEnd":53}],"label":"Record.RenameFields(record as record, renames as list)"},{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":20,"signatureLabelEnd":36},{"documentation":null,"label":"renames","type":"list","signatureLabelOffset":38,"signatureLabelEnd":53},{"documentation":null,"label":"missingField","type":"nullable number","signatureLabelOffset":55,"signatureLabelEnd":86}],"label":"Record.RenameFields(record as record, renames as list, missingField as nullable number)"}]},{"export":"Record.ReorderFields","kind":"Function","primitiveType":"record","summary":"Reorders the field(s) specified into the new order.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":21,"signatureLabelEnd":37},{"documentation":null,"label":"fieldOrder","type":"list","signatureLabelOffset":39,"signatureLabelEnd":57}],"label":"Record.ReorderFields(record as record, fieldOrder as list)"},{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":21,"signatureLabelEnd":37},{"documentation":null,"label":"fieldOrder","type":"list","signatureLabelOffset":39,"signatureLabelEnd":57},{"documentation":null,"label":"missingField","type":"nullable number","signatureLabelOffset":59,"signatureLabelEnd":90}],"label":"Record.ReorderFields(record as record, fieldOrder as list, missingField as nullable number)"}]},{"export":"Record.SelectFields","kind":"Function","primitiveType":"record","summary":"Returns a record that contains only the specified fields.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":20,"signatureLabelEnd":36},{"documentation":null,"label":"fields","type":"any","signatureLabelOffset":38,"signatureLabelEnd":51}],"label":"Record.SelectFields(record as record, fields as any)"},{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":20,"signatureLabelEnd":36},{"documentation":null,"label":"fields","type":"any","signatureLabelOffset":38,"signatureLabelEnd":51},{"documentation":null,"label":"missingField","type":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":84}],"label":"Record.SelectFields(record as record, fields as any, missingField as nullable number)"}]},{"export":"Record.ToList","kind":"Function","primitiveType":"list","summary":"Returns a list of values containing the field values of the input record.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":14,"signatureLabelEnd":30}],"label":"Record.ToList(record as record)"}]},{"export":"Record.ToTable","kind":"Function","primitiveType":"table","summary":"Returns a table with each row being a field name and value of the input record.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":15,"signatureLabelEnd":31}],"label":"Record.ToTable(record as record)"}]},{"export":"Record.TransformFields","kind":"Function","primitiveType":"record","summary":"Returns a record after applying specified transformations.","signatures":[{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":23,"signatureLabelEnd":39},{"documentation":null,"label":"transformOperations","type":"list","signatureLabelOffset":41,"signatureLabelEnd":68}],"label":"Record.TransformFields(record as record, transformOperations as list)"},{"parameters":[{"documentation":null,"label":"record","type":"record","signatureLabelOffset":23,"signatureLabelEnd":39},{"documentation":null,"label":"transformOperations","type":"list","signatureLabelOffset":41,"signatureLabelEnd":68},{"documentation":null,"label":"missingField","type":"nullable number","signatureLabelOffset":70,"signatureLabelEnd":101}],"label":"Record.TransformFields(record as record, transformOperations as list, missingField as nullable number)"}]},{"export":"Record.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all records.","signatures":null},{"export":"RelativePosition.FromEnd","kind":"Constant","primitiveType":"number","summary":"Indicates indexing should be done from the end of the input.","signatures":null},{"export":"RelativePosition.FromStart","kind":"Constant","primitiveType":"number","summary":"Indicates indexing should be done from the start of the input.","signatures":null},{"export":"RelativePosition.Type","kind":"Type","primitiveType":"type","summary":"Indicates whether indexing should be done from the start or end of the input.","signatures":null},{"export":"Replacer.ReplaceText","kind":"Function","primitiveType":"nullable text","summary":"Replaces text within the provided input.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":21,"signatureLabelEnd":42},{"documentation":null,"label":"old","type":"text","signatureLabelOffset":44,"signatureLabelEnd":55},{"documentation":null,"label":"new","type":"text","signatureLabelOffset":57,"signatureLabelEnd":68}],"label":"Replacer.ReplaceText(text as nullable text, old as text, new as text)"}]},{"export":"Replacer.ReplaceValue","kind":"Function","primitiveType":"any","summary":"Replaces values within the provided input.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":22,"signatureLabelEnd":34},{"documentation":null,"label":"old","type":"any","signatureLabelOffset":36,"signatureLabelEnd":46},{"documentation":null,"label":"new","type":"any","signatureLabelOffset":48,"signatureLabelEnd":58}],"label":"Replacer.ReplaceValue(value as any, old as any, new as any)"}]},{"export":"RoundingMode.AwayFromZero","kind":"Constant","primitiveType":"number","summary":"RoundingMode.AwayFromZero","signatures":null},{"export":"RoundingMode.Down","kind":"Constant","primitiveType":"number","summary":"RoundingMode.Down","signatures":null},{"export":"RoundingMode.ToEven","kind":"Constant","primitiveType":"number","summary":"RoundingMode.ToEven","signatures":null},{"export":"RoundingMode.TowardZero","kind":"Constant","primitiveType":"number","summary":"RoundingMode.TowardZero","signatures":null},{"export":"RoundingMode.Type","kind":"Type","primitiveType":"type","summary":"Specifies rounding direction when there is a tie between the possible numbers to round to.","signatures":null},{"export":"RoundingMode.Up","kind":"Constant","primitiveType":"number","summary":"RoundingMode.Up","signatures":null},{"export":"RowExpression.Column","kind":"Function","primitiveType":"record","summary":"Returns an AST that represents access to a column within a row expression.","signatures":[{"parameters":[{"documentation":null,"label":"columnName","type":"text","signatureLabelOffset":21,"signatureLabelEnd":39}],"label":"RowExpression.Column(columnName as text)"}]},{"export":"RowExpression.From","kind":"Function","primitiveType":"record","summary":"Returns the AST for the body of a function.","signatures":[{"parameters":[{"documentation":null,"label":"function","type":"function","signatureLabelOffset":19,"signatureLabelEnd":39}],"label":"RowExpression.From(function as function)"}]},{"export":"RowExpression.Row","kind":"Constant","primitiveType":"record","summary":"An AST node representing the row in a row expression.","signatures":null},{"export":"Single.From","kind":"Function","primitiveType":"nullable number","summary":"Creates a Single from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":12,"signatureLabelEnd":24}],"label":"Single.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":12,"signatureLabelEnd":24},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":26,"signatureLabelEnd":50}],"label":"Single.From(value as any, culture as nullable text)"}]},{"export":"Single.Type","kind":"Type","primitiveType":"type","summary":"The type that represents single precision floating point number.","signatures":null},{"export":"Splitter.SplitByNothing","kind":"Function","primitiveType":"function","summary":"Returns a function that does no splitting, returning its argument as a single element list.","signatures":[{"parameters":[],"label":"Splitter.SplitByNothing()"}]},{"export":"Splitter.SplitTextByAnyDelimiter","kind":"Function","primitiveType":"function","summary":"Returns a function that splits text into a list of text at any of the specified delimiters.","signatures":[{"parameters":[{"documentation":null,"label":"delimiters","type":"list","signatureLabelOffset":33,"signatureLabelEnd":51}],"label":"Splitter.SplitTextByAnyDelimiter(delimiters as list)"},{"parameters":[{"documentation":null,"label":"delimiters","type":"list","signatureLabelOffset":33,"signatureLabelEnd":51},{"documentation":null,"label":"quoteStyle","type":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":82}],"label":"Splitter.SplitTextByAnyDelimiter(delimiters as list, quoteStyle as nullable number)"},{"parameters":[{"documentation":null,"label":"delimiters","type":"list","signatureLabelOffset":33,"signatureLabelEnd":51},{"documentation":null,"label":"quoteStyle","type":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":82},{"documentation":null,"label":"startAtEnd","type":"nullable logical","signatureLabelOffset":84,"signatureLabelEnd":114}],"label":"Splitter.SplitTextByAnyDelimiter(delimiters as list, quoteStyle as nullable number, startAtEnd as nullable logical)"}]},{"export":"Splitter.SplitTextByCharacterTransition","kind":"Function","primitiveType":"function","summary":"Returns a function that splits text into a list of text according to a transition from one kind of character to another. The {0} and {1} parameters can either be a list of characters, or a function that takes a character and returns true/false.","signatures":[{"parameters":[{"documentation":null,"label":"before","type":"anynonnull","signatureLabelOffset":40,"signatureLabelEnd":60},{"documentation":null,"label":"after","type":"anynonnull","signatureLabelOffset":62,"signatureLabelEnd":81}],"label":"Splitter.SplitTextByCharacterTransition(before as anynonnull, after as anynonnull)"}]},{"export":"Splitter.SplitTextByDelimiter","kind":"Function","primitiveType":"function","summary":"Returns a function that splits text into a list of text according to the specified delimiter.","signatures":[{"parameters":[{"documentation":null,"label":"delimiter","type":"text","signatureLabelOffset":30,"signatureLabelEnd":47}],"label":"Splitter.SplitTextByDelimiter(delimiter as text)"},{"parameters":[{"documentation":null,"label":"delimiter","type":"text","signatureLabelOffset":30,"signatureLabelEnd":47},{"documentation":null,"label":"quoteStyle","type":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":78}],"label":"Splitter.SplitTextByDelimiter(delimiter as text, quoteStyle as nullable number)"}]},{"export":"Splitter.SplitTextByEachDelimiter","kind":"Function","primitiveType":"function","summary":"Returns a function that splits text into a list of text at each specified delimiter in sequence.","signatures":[{"parameters":[{"documentation":null,"label":"delimiters","type":"list","signatureLabelOffset":34,"signatureLabelEnd":52}],"label":"Splitter.SplitTextByEachDelimiter(delimiters as list)"},{"parameters":[{"documentation":null,"label":"delimiters","type":"list","signatureLabelOffset":34,"signatureLabelEnd":52},{"documentation":null,"label":"quoteStyle","type":"nullable number","signatureLabelOffset":54,"signatureLabelEnd":83}],"label":"Splitter.SplitTextByEachDelimiter(delimiters as list, quoteStyle as nullable number)"},{"parameters":[{"documentation":null,"label":"delimiters","type":"list","signatureLabelOffset":34,"signatureLabelEnd":52},{"documentation":null,"label":"quoteStyle","type":"nullable number","signatureLabelOffset":54,"signatureLabelEnd":83},{"documentation":null,"label":"startAtEnd","type":"nullable logical","signatureLabelOffset":85,"signatureLabelEnd":115}],"label":"Splitter.SplitTextByEachDelimiter(delimiters as list, quoteStyle as nullable number, startAtEnd as nullable logical)"}]},{"export":"Splitter.SplitTextByLengths","kind":"Function","primitiveType":"function","summary":"Returns a function that splits text into a list of text by each specified length.","signatures":[{"parameters":[{"documentation":null,"label":"lengths","type":"list","signatureLabelOffset":28,"signatureLabelEnd":43}],"label":"Splitter.SplitTextByLengths(lengths as list)"},{"parameters":[{"documentation":null,"label":"lengths","type":"list","signatureLabelOffset":28,"signatureLabelEnd":43},{"documentation":null,"label":"startAtEnd","type":"nullable logical","signatureLabelOffset":45,"signatureLabelEnd":75}],"label":"Splitter.SplitTextByLengths(lengths as list, startAtEnd as nullable logical)"}]},{"export":"Splitter.SplitTextByPositions","kind":"Function","primitiveType":"function","summary":"Returns a function that splits text into a list of text at each specified position.","signatures":[{"parameters":[{"documentation":null,"label":"positions","type":"list","signatureLabelOffset":30,"signatureLabelEnd":47}],"label":"Splitter.SplitTextByPositions(positions as list)"},{"parameters":[{"documentation":null,"label":"positions","type":"list","signatureLabelOffset":30,"signatureLabelEnd":47},{"documentation":null,"label":"startAtEnd","type":"nullable logical","signatureLabelOffset":49,"signatureLabelEnd":79}],"label":"Splitter.SplitTextByPositions(positions as list, startAtEnd as nullable logical)"}]},{"export":"Splitter.SplitTextByRanges","kind":"Function","primitiveType":"function","summary":"Returns a function that splits text into a list of text according to the specified offsets and lengths.","signatures":[{"parameters":[{"documentation":null,"label":"ranges","type":"list","signatureLabelOffset":27,"signatureLabelEnd":41}],"label":"Splitter.SplitTextByRanges(ranges as list)"},{"parameters":[{"documentation":null,"label":"ranges","type":"list","signatureLabelOffset":27,"signatureLabelEnd":41},{"documentation":null,"label":"startAtEnd","type":"nullable logical","signatureLabelOffset":43,"signatureLabelEnd":73}],"label":"Splitter.SplitTextByRanges(ranges as list, startAtEnd as nullable logical)"}]},{"export":"Splitter.SplitTextByRepeatedLengths","kind":"Function","primitiveType":"function","summary":"Returns a function that splits text into a list of text after the specified length repeatedly.","signatures":[{"parameters":[{"documentation":null,"label":"length","type":"number","signatureLabelOffset":36,"signatureLabelEnd":52}],"label":"Splitter.SplitTextByRepeatedLengths(length as number)"},{"parameters":[{"documentation":null,"label":"length","type":"number","signatureLabelOffset":36,"signatureLabelEnd":52},{"documentation":null,"label":"startAtEnd","type":"nullable logical","signatureLabelOffset":54,"signatureLabelEnd":84}],"label":"Splitter.SplitTextByRepeatedLengths(length as number, startAtEnd as nullable logical)"}]},{"export":"Splitter.SplitTextByWhitespace","kind":"Function","primitiveType":"function","summary":"Returns a function that splits text into a list of text at whitespace.","signatures":[{"parameters":[],"label":"Splitter.SplitTextByWhitespace()"},{"parameters":[{"documentation":null,"label":"quoteStyle","type":"nullable number","signatureLabelOffset":31,"signatureLabelEnd":60}],"label":"Splitter.SplitTextByWhitespace(quoteStyle as nullable number)"}]},{"export":"SqlExpression.SchemaFrom","kind":"Function","primitiveType":"any","summary":"SqlExpression.SchemaFrom","signatures":[{"parameters":[{"documentation":null,"label":"schema","type":"any","signatureLabelOffset":25,"signatureLabelEnd":38}],"label":"SqlExpression.SchemaFrom(schema as any)"}]},{"export":"SqlExpression.ToExpression","kind":"Function","primitiveType":"text","summary":"SqlExpression.ToExpression","signatures":[{"parameters":[{"documentation":null,"label":"sql","type":"text","signatureLabelOffset":27,"signatureLabelEnd":38},{"documentation":null,"label":"environment","type":"record","signatureLabelOffset":40,"signatureLabelEnd":61}],"label":"SqlExpression.ToExpression(sql as text, environment as record)"}]},{"export":"Table.AddColumn","kind":"Function","primitiveType":"table","summary":"Adds a column with the specified name. The value is computed using the specified selection function with each row taken as an input.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":16,"signatureLabelEnd":30},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":32,"signatureLabelEnd":53},{"documentation":null,"label":"columnGenerator","type":"function","signatureLabelOffset":55,"signatureLabelEnd":82}],"label":"Table.AddColumn(table as table, newColumnName as text, columnGenerator as function)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":16,"signatureLabelEnd":30},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":32,"signatureLabelEnd":53},{"documentation":null,"label":"columnGenerator","type":"function","signatureLabelOffset":55,"signatureLabelEnd":82},{"documentation":null,"label":"columnType","type":"nullable type","signatureLabelOffset":84,"signatureLabelEnd":111}],"label":"Table.AddColumn(table as table, newColumnName as text, columnGenerator as function, columnType as nullable type)"}]},{"export":"Table.AddIndexColumn","kind":"Function","primitiveType":"table","summary":"Appends a column with explicit position values.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":37,"signatureLabelEnd":58}],"label":"Table.AddIndexColumn(table as table, newColumnName as text)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":37,"signatureLabelEnd":58},{"documentation":null,"label":"initialValue","type":"nullable number","signatureLabelOffset":60,"signatureLabelEnd":91}],"label":"Table.AddIndexColumn(table as table, newColumnName as text, initialValue as nullable number)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":37,"signatureLabelEnd":58},{"documentation":null,"label":"initialValue","type":"nullable number","signatureLabelOffset":60,"signatureLabelEnd":91},{"documentation":null,"label":"increment","type":"nullable number","signatureLabelOffset":93,"signatureLabelEnd":121}],"label":"Table.AddIndexColumn(table as table, newColumnName as text, initialValue as nullable number, increment as nullable number)"}]},{"export":"Table.AddJoinColumn","kind":"Function","primitiveType":"table","summary":"Performs a join between tables on supplied columns and produces the join result in a new column.","signatures":[{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":20,"signatureLabelEnd":35},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":37,"signatureLabelEnd":48},{"documentation":null,"label":"table2","type":"any","signatureLabelOffset":50,"signatureLabelEnd":63},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":65,"signatureLabelEnd":76},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":78,"signatureLabelEnd":99}],"label":"Table.AddJoinColumn(table1 as table, key1 as any, table2 as any, key2 as any, newColumnName as text)"}]},{"export":"Table.AddKey","kind":"Function","primitiveType":"table","summary":"Add a key to a table, specify the subset of the table’s column names that defines the key, and specify whether the key is primary.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":13,"signatureLabelEnd":27},{"documentation":null,"label":"columns","type":"list","signatureLabelOffset":29,"signatureLabelEnd":44},{"documentation":null,"label":"isPrimary","type":"logical","signatureLabelOffset":46,"signatureLabelEnd":66}],"label":"Table.AddKey(table as table, columns as list, isPrimary as logical)"}]},{"export":"Table.AggregateTableColumn","kind":"Function","primitiveType":"table","summary":"Aggregates a column of tables into multiple columns in the containing table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"documentation":null,"label":"column","type":"text","signatureLabelOffset":43,"signatureLabelEnd":57},{"documentation":null,"label":"aggregations","type":"list","signatureLabelOffset":59,"signatureLabelEnd":79}],"label":"Table.AggregateTableColumn(table as table, column as text, aggregations as list)"}]},{"export":"Table.AlternateRows","kind":"Function","primitiveType":"table","summary":"Keeps the initial offset then alternates taking and skipping the following rows.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":36,"signatureLabelEnd":52},{"documentation":null,"label":"skip","type":"number","signatureLabelOffset":54,"signatureLabelEnd":68},{"documentation":null,"label":"take","type":"number","signatureLabelOffset":70,"signatureLabelEnd":84}],"label":"Table.AlternateRows(table as table, offset as number, skip as number, take as number)"}]},{"export":"Table.Buffer","kind":"Function","primitiveType":"table","summary":"Buffers a table in memory, isolating it from external changes during evaluation.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":13,"signatureLabelEnd":27}],"label":"Table.Buffer(table as table)"}]},{"export":"Table.Column","kind":"Function","primitiveType":"list","summary":"Returns a specified column of data from the table as a list.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":13,"signatureLabelEnd":27},{"documentation":null,"label":"column","type":"text","signatureLabelOffset":29,"signatureLabelEnd":43}],"label":"Table.Column(table as table, column as text)"}]},{"export":"Table.ColumnCount","kind":"Function","primitiveType":"number","summary":"Returns the number of columns in the table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32}],"label":"Table.ColumnCount(table as table)"}]},{"export":"Table.ColumnNames","kind":"Function","primitiveType":"list","summary":"Returns the column names as a list.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32}],"label":"Table.ColumnNames(table as table)"}]},{"export":"Table.ColumnsOfType","kind":"Function","primitiveType":"list","summary":"Returns a list with the names of the columns that match the specified types.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"listOfTypes","type":"list","signatureLabelOffset":36,"signatureLabelEnd":55}],"label":"Table.ColumnsOfType(table as table, listOfTypes as list)"}]},{"export":"Table.Combine","kind":"Function","primitiveType":"table","summary":"Returns a table that is the result of merging a list of tables.","signatures":[{"parameters":[{"documentation":null,"label":"tables","type":"list","signatureLabelOffset":14,"signatureLabelEnd":28}],"label":"Table.Combine(tables as list)"},{"parameters":[{"documentation":null,"label":"tables","type":"list","signatureLabelOffset":14,"signatureLabelEnd":28},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":30,"signatureLabelEnd":44}],"label":"Table.Combine(tables as list, columns as any)"}]},{"export":"Table.CombineColumns","kind":"Function","primitiveType":"table","summary":"Combines the specified columns into a new column using the specified combiner function.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"documentation":null,"label":"sourceColumns","type":"list","signatureLabelOffset":37,"signatureLabelEnd":58},{"documentation":null,"label":"combiner","type":"function","signatureLabelOffset":60,"signatureLabelEnd":80},{"documentation":null,"label":"column","type":"text","signatureLabelOffset":82,"signatureLabelEnd":96}],"label":"Table.CombineColumns(table as table, sourceColumns as list, combiner as function, column as text)"}]},{"export":"Table.Contains","kind":"Function","primitiveType":"logical","summary":"Indicates whether the specified record appears as a row in the table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":15,"signatureLabelEnd":29},{"documentation":null,"label":"row","type":"record","signatureLabelOffset":31,"signatureLabelEnd":44}],"label":"Table.Contains(table as table, row as record)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":15,"signatureLabelEnd":29},{"documentation":null,"label":"row","type":"record","signatureLabelOffset":31,"signatureLabelEnd":44},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":46,"signatureLabelEnd":69}],"label":"Table.Contains(table as table, row as record, equationCriteria as any)"}]},{"export":"Table.ContainsAll","kind":"Function","primitiveType":"logical","summary":"Indicates whether all of the specified records appear as rows in the table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"rows","type":"list","signatureLabelOffset":34,"signatureLabelEnd":46}],"label":"Table.ContainsAll(table as table, rows as list)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"rows","type":"list","signatureLabelOffset":34,"signatureLabelEnd":46},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":48,"signatureLabelEnd":71}],"label":"Table.ContainsAll(table as table, rows as list, equationCriteria as any)"}]},{"export":"Table.ContainsAny","kind":"Function","primitiveType":"logical","summary":"Indicates whether any of the specified records appear as rows in the table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"rows","type":"list","signatureLabelOffset":34,"signatureLabelEnd":46}],"label":"Table.ContainsAny(table as table, rows as list)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"rows","type":"list","signatureLabelOffset":34,"signatureLabelEnd":46},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":48,"signatureLabelEnd":71}],"label":"Table.ContainsAny(table as table, rows as list, equationCriteria as any)"}]},{"export":"Table.DemoteHeaders","kind":"Function","primitiveType":"table","summary":"Demotes the column headers to the first row of values.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34}],"label":"Table.DemoteHeaders(table as table)"}]},{"export":"Table.Distinct","kind":"Function","primitiveType":"table","summary":"Removes duplicate rows from the table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":15,"signatureLabelEnd":29}],"label":"Table.Distinct(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":15,"signatureLabelEnd":29},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":31,"signatureLabelEnd":54}],"label":"Table.Distinct(table as table, equationCriteria as any)"}]},{"export":"Table.DuplicateColumn","kind":"Function","primitiveType":"table","summary":"Duplicates a column with the specified name. Values and type are copied from the source column.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":22,"signatureLabelEnd":36},{"documentation":null,"label":"columnName","type":"text","signatureLabelOffset":38,"signatureLabelEnd":56},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":58,"signatureLabelEnd":79}],"label":"Table.DuplicateColumn(table as table, columnName as text, newColumnName as text)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":22,"signatureLabelEnd":36},{"documentation":null,"label":"columnName","type":"text","signatureLabelOffset":38,"signatureLabelEnd":56},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":58,"signatureLabelEnd":79},{"documentation":null,"label":"columnType","type":"nullable type","signatureLabelOffset":81,"signatureLabelEnd":108}],"label":"Table.DuplicateColumn(table as table, columnName as text, newColumnName as text, columnType as nullable type)"}]},{"export":"Table.ExpandListColumn","kind":"Function","primitiveType":"table","summary":"Given a column of lists in a table, create a copy of a row for each value in its list.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":23,"signatureLabelEnd":37},{"documentation":null,"label":"column","type":"text","signatureLabelOffset":39,"signatureLabelEnd":53}],"label":"Table.ExpandListColumn(table as table, column as text)"}]},{"export":"Table.ExpandRecordColumn","kind":"Function","primitiveType":"table","summary":"Expands a column of records into columns with each of the values.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":25,"signatureLabelEnd":39},{"documentation":null,"label":"column","type":"text","signatureLabelOffset":41,"signatureLabelEnd":55},{"documentation":null,"label":"fieldNames","type":"list","signatureLabelOffset":57,"signatureLabelEnd":75}],"label":"Table.ExpandRecordColumn(table as table, column as text, fieldNames as list)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":25,"signatureLabelEnd":39},{"documentation":null,"label":"column","type":"text","signatureLabelOffset":41,"signatureLabelEnd":55},{"documentation":null,"label":"fieldNames","type":"list","signatureLabelOffset":57,"signatureLabelEnd":75},{"documentation":null,"label":"newColumnNames","type":"nullable list","signatureLabelOffset":77,"signatureLabelEnd":108}],"label":"Table.ExpandRecordColumn(table as table, column as text, fieldNames as list, newColumnNames as nullable list)"}]},{"export":"Table.ExpandTableColumn","kind":"Function","primitiveType":"table","summary":"Expands a column of records or a column of tables into multiple columns in the containing table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":24,"signatureLabelEnd":38},{"documentation":null,"label":"column","type":"text","signatureLabelOffset":40,"signatureLabelEnd":54},{"documentation":null,"label":"columnNames","type":"list","signatureLabelOffset":56,"signatureLabelEnd":75}],"label":"Table.ExpandTableColumn(table as table, column as text, columnNames as list)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":24,"signatureLabelEnd":38},{"documentation":null,"label":"column","type":"text","signatureLabelOffset":40,"signatureLabelEnd":54},{"documentation":null,"label":"columnNames","type":"list","signatureLabelOffset":56,"signatureLabelEnd":75},{"documentation":null,"label":"newColumnNames","type":"nullable list","signatureLabelOffset":77,"signatureLabelEnd":108}],"label":"Table.ExpandTableColumn(table as table, column as text, columnNames as list, newColumnNames as nullable list)"}]},{"export":"Table.FillDown","kind":"Function","primitiveType":"table","summary":"Propagates the value of a previous cell to the null-valued cells below in the column.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":15,"signatureLabelEnd":29},{"documentation":null,"label":"columns","type":"list","signatureLabelOffset":31,"signatureLabelEnd":46}],"label":"Table.FillDown(table as table, columns as list)"}]},{"export":"Table.FillUp","kind":"Function","primitiveType":"table","summary":"Propagates the value of a cell to the null-valued cells above in the column.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":13,"signatureLabelEnd":27},{"documentation":null,"label":"columns","type":"list","signatureLabelOffset":29,"signatureLabelEnd":44}],"label":"Table.FillUp(table as table, columns as list)"}]},{"export":"Table.FilterWithDataTable","kind":"Function","primitiveType":"any","summary":"Table.FilterWithDataTable","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":26,"signatureLabelEnd":40},{"documentation":null,"label":"dataTableIdentifier","type":"text","signatureLabelOffset":42,"signatureLabelEnd":69}],"label":"Table.FilterWithDataTable(table as table, dataTableIdentifier as text)"}]},{"export":"Table.FindText","kind":"Function","primitiveType":"table","summary":"Returns all the rows that contain the given text in the table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":15,"signatureLabelEnd":29},{"documentation":null,"label":"text","type":"text","signatureLabelOffset":31,"signatureLabelEnd":43}],"label":"Table.FindText(table as table, text as text)"}]},{"export":"Table.First","kind":"Function","primitiveType":"any","summary":"Returns the first row or a specified default value.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":12,"signatureLabelEnd":26}],"label":"Table.First(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":28,"signatureLabelEnd":42}],"label":"Table.First(table as table, default as any)"}]},{"export":"Table.FirstN","kind":"Function","primitiveType":"table","summary":"Returns the first count rows specified.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":13,"signatureLabelEnd":27},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":29,"signatureLabelEnd":52}],"label":"Table.FirstN(table as table, countOrCondition as any)"}]},{"export":"Table.FirstValue","kind":"Function","primitiveType":"any","summary":"Returns the first column of the first row of the table or a specified default value.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":17,"signatureLabelEnd":31}],"label":"Table.FirstValue(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":33,"signatureLabelEnd":47}],"label":"Table.FirstValue(table as table, default as any)"}]},{"export":"Table.FromColumns","kind":"Function","primitiveType":"table","summary":"Creates a table from a list of columns and specified values.","signatures":[{"parameters":[{"documentation":null,"label":"lists","type":"list","signatureLabelOffset":18,"signatureLabelEnd":31}],"label":"Table.FromColumns(lists as list)"},{"parameters":[{"documentation":null,"label":"lists","type":"list","signatureLabelOffset":18,"signatureLabelEnd":31},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":33,"signatureLabelEnd":47}],"label":"Table.FromColumns(lists as list, columns as any)"}]},{"export":"Table.FromList","kind":"Function","primitiveType":"table","summary":"Converts a list into a table by applying the specified splitting function to each item in the list.","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":15,"signatureLabelEnd":27}],"label":"Table.FromList(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"documentation":null,"label":"splitter","type":"nullable function","signatureLabelOffset":29,"signatureLabelEnd":58}],"label":"Table.FromList(list as list, splitter as nullable function)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"documentation":null,"label":"splitter","type":"nullable function","signatureLabelOffset":29,"signatureLabelEnd":58},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":60,"signatureLabelEnd":74}],"label":"Table.FromList(list as list, splitter as nullable function, columns as any)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"documentation":null,"label":"splitter","type":"nullable function","signatureLabelOffset":29,"signatureLabelEnd":58},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":60,"signatureLabelEnd":74},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":76,"signatureLabelEnd":90}],"label":"Table.FromList(list as list, splitter as nullable function, columns as any, default as any)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"documentation":null,"label":"splitter","type":"nullable function","signatureLabelOffset":29,"signatureLabelEnd":58},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":60,"signatureLabelEnd":74},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":76,"signatureLabelEnd":90},{"documentation":null,"label":"extraValues","type":"nullable number","signatureLabelOffset":92,"signatureLabelEnd":122}],"label":"Table.FromList(list as list, splitter as nullable function, columns as any, default as any, extraValues as nullable number)"}]},{"export":"Table.FromPartitions","kind":"Function","primitiveType":"table","summary":"Returns a table that is the result of combining a set of partitioned tables.","signatures":[{"parameters":[{"documentation":null,"label":"partitionColumn","type":"text","signatureLabelOffset":21,"signatureLabelEnd":44},{"documentation":null,"label":"partitions","type":"list","signatureLabelOffset":46,"signatureLabelEnd":64}],"label":"Table.FromPartitions(partitionColumn as text, partitions as list)"},{"parameters":[{"documentation":null,"label":"partitionColumn","type":"text","signatureLabelOffset":21,"signatureLabelEnd":44},{"documentation":null,"label":"partitions","type":"list","signatureLabelOffset":46,"signatureLabelEnd":64},{"documentation":null,"label":"partitionColumnType","type":"nullable type","signatureLabelOffset":66,"signatureLabelEnd":102}],"label":"Table.FromPartitions(partitionColumn as text, partitions as list, partitionColumnType as nullable type)"}]},{"export":"Table.FromRecords","kind":"Function","primitiveType":"table","summary":"Converts a list of records into a table.","signatures":[{"parameters":[{"documentation":null,"label":"records","type":"list","signatureLabelOffset":18,"signatureLabelEnd":33}],"label":"Table.FromRecords(records as list)"},{"parameters":[{"documentation":null,"label":"records","type":"list","signatureLabelOffset":18,"signatureLabelEnd":33},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":35,"signatureLabelEnd":49}],"label":"Table.FromRecords(records as list, columns as any)"},{"parameters":[{"documentation":null,"label":"records","type":"list","signatureLabelOffset":18,"signatureLabelEnd":33},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":35,"signatureLabelEnd":49},{"documentation":null,"label":"missingField","type":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":82}],"label":"Table.FromRecords(records as list, columns as any, missingField as nullable number)"}]},{"export":"Table.FromRows","kind":"Function","primitiveType":"table","summary":"Creates a table from a list of row values and optional columns","signatures":[{"parameters":[{"documentation":null,"label":"rows","type":"list","signatureLabelOffset":15,"signatureLabelEnd":27}],"label":"Table.FromRows(rows as list)"},{"parameters":[{"documentation":null,"label":"rows","type":"list","signatureLabelOffset":15,"signatureLabelEnd":27},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":29,"signatureLabelEnd":43}],"label":"Table.FromRows(rows as list, columns as any)"}]},{"export":"Table.FromValue","kind":"Function","primitiveType":"table","summary":"Creates a table with a column from the provided value(s).","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":16,"signatureLabelEnd":28}],"label":"Table.FromValue(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":30,"signatureLabelEnd":56}],"label":"Table.FromValue(value as any, options as nullable record)"}]},{"export":"Table.Group","kind":"Function","primitiveType":"table","summary":"Groups rows in the table that have the same key.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"documentation":null,"label":"key","type":"any","signatureLabelOffset":28,"signatureLabelEnd":38},{"documentation":null,"label":"aggregatedColumns","type":"list","signatureLabelOffset":40,"signatureLabelEnd":65}],"label":"Table.Group(table as table, key as any, aggregatedColumns as list)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"documentation":null,"label":"key","type":"any","signatureLabelOffset":28,"signatureLabelEnd":38},{"documentation":null,"label":"aggregatedColumns","type":"list","signatureLabelOffset":40,"signatureLabelEnd":65},{"documentation":null,"label":"groupKind","type":"nullable number","signatureLabelOffset":67,"signatureLabelEnd":95}],"label":"Table.Group(table as table, key as any, aggregatedColumns as list, groupKind as nullable number)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"documentation":null,"label":"key","type":"any","signatureLabelOffset":28,"signatureLabelEnd":38},{"documentation":null,"label":"aggregatedColumns","type":"list","signatureLabelOffset":40,"signatureLabelEnd":65},{"documentation":null,"label":"groupKind","type":"nullable number","signatureLabelOffset":67,"signatureLabelEnd":95},{"documentation":null,"label":"comparer","type":"nullable function","signatureLabelOffset":97,"signatureLabelEnd":126}],"label":"Table.Group(table as table, key as any, aggregatedColumns as list, groupKind as nullable number, comparer as nullable function)"}]},{"export":"Table.HasColumns","kind":"Function","primitiveType":"logical","summary":"indicates whether the table contains the specified column(s).","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":33,"signatureLabelEnd":47}],"label":"Table.HasColumns(table as table, columns as any)"}]},{"export":"Table.InsertRows","kind":"Function","primitiveType":"table","summary":"Inserts a list of rows into the table at the specified position.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":33,"signatureLabelEnd":49},{"documentation":null,"label":"rows","type":"list","signatureLabelOffset":51,"signatureLabelEnd":63}],"label":"Table.InsertRows(table as table, offset as number, rows as list)"}]},{"export":"Table.IsDistinct","kind":"Function","primitiveType":"logical","summary":"Indicates whether the table contains only distinct rows (no duplicates).","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":17,"signatureLabelEnd":31}],"label":"Table.IsDistinct(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":33,"signatureLabelEnd":58}],"label":"Table.IsDistinct(table as table, comparisonCriteria as any)"}]},{"export":"Table.IsEmpty","kind":"Function","primitiveType":"logical","summary":"Indicates whether the table contains any rows.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":14,"signatureLabelEnd":28}],"label":"Table.IsEmpty(table as table)"}]},{"export":"Table.Join","kind":"Function","primitiveType":"table","summary":"Joins the rows from the two tables that match based on the given keys.","signatures":[{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":11,"signatureLabelEnd":26},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":28,"signatureLabelEnd":39},{"documentation":null,"label":"table2","type":"table","signatureLabelOffset":41,"signatureLabelEnd":56},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":58,"signatureLabelEnd":69}],"label":"Table.Join(table1 as table, key1 as any, table2 as table, key2 as any)"},{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":11,"signatureLabelEnd":26},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":28,"signatureLabelEnd":39},{"documentation":null,"label":"table2","type":"table","signatureLabelOffset":41,"signatureLabelEnd":56},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":58,"signatureLabelEnd":69},{"documentation":null,"label":"joinKind","type":"nullable number","signatureLabelOffset":71,"signatureLabelEnd":98}],"label":"Table.Join(table1 as table, key1 as any, table2 as table, key2 as any, joinKind as nullable number)"},{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":11,"signatureLabelEnd":26},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":28,"signatureLabelEnd":39},{"documentation":null,"label":"table2","type":"table","signatureLabelOffset":41,"signatureLabelEnd":56},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":58,"signatureLabelEnd":69},{"documentation":null,"label":"joinKind","type":"nullable number","signatureLabelOffset":71,"signatureLabelEnd":98},{"documentation":null,"label":"joinAlgorithm","type":"nullable number","signatureLabelOffset":100,"signatureLabelEnd":132}],"label":"Table.Join(table1 as table, key1 as any, table2 as table, key2 as any, joinKind as nullable number, joinAlgorithm as nullable number)"},{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":11,"signatureLabelEnd":26},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":28,"signatureLabelEnd":39},{"documentation":null,"label":"table2","type":"table","signatureLabelOffset":41,"signatureLabelEnd":56},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":58,"signatureLabelEnd":69},{"documentation":null,"label":"joinKind","type":"nullable number","signatureLabelOffset":71,"signatureLabelEnd":98},{"documentation":null,"label":"joinAlgorithm","type":"nullable number","signatureLabelOffset":100,"signatureLabelEnd":132},{"documentation":null,"label":"keyEqualityComparers","type":"nullable list","signatureLabelOffset":134,"signatureLabelEnd":171}],"label":"Table.Join(table1 as table, key1 as any, table2 as table, key2 as any, joinKind as nullable number, joinAlgorithm as nullable number, keyEqualityComparers as nullable list)"}]},{"export":"Table.Keys","kind":"Function","primitiveType":"list","summary":"Table.Keys","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":11,"signatureLabelEnd":25}],"label":"Table.Keys(table as table)"}]},{"export":"Table.Last","kind":"Function","primitiveType":"any","summary":"Returns the last row or a specified default value.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":11,"signatureLabelEnd":25}],"label":"Table.Last(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":11,"signatureLabelEnd":25},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":27,"signatureLabelEnd":41}],"label":"Table.Last(table as table, default as any)"}]},{"export":"Table.LastN","kind":"Function","primitiveType":"table","summary":"Returns the last specified number of rows.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":28,"signatureLabelEnd":51}],"label":"Table.LastN(table as table, countOrCondition as any)"}]},{"export":"Table.MatchesAllRows","kind":"Function","primitiveType":"logical","summary":"Indicates whether all the rows in the table meet the given condition.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"documentation":null,"label":"condition","type":"function","signatureLabelOffset":37,"signatureLabelEnd":58}],"label":"Table.MatchesAllRows(table as table, condition as function)"}]},{"export":"Table.MatchesAnyRows","kind":"Function","primitiveType":"logical","summary":"Indicates whether any the rows in the table meet the given condition.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"documentation":null,"label":"condition","type":"function","signatureLabelOffset":37,"signatureLabelEnd":58}],"label":"Table.MatchesAnyRows(table as table, condition as function)"}]},{"export":"Table.Max","kind":"Function","primitiveType":"any","summary":"Returns the largest row or default value using the given criteria.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":10,"signatureLabelEnd":24},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":26,"signatureLabelEnd":51}],"label":"Table.Max(table as table, comparisonCriteria as any)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":10,"signatureLabelEnd":24},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":26,"signatureLabelEnd":51},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":53,"signatureLabelEnd":67}],"label":"Table.Max(table as table, comparisonCriteria as any, default as any)"}]},{"export":"Table.MaxN","kind":"Function","primitiveType":"table","summary":"Returns the largest row(s) using the given criteria.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":11,"signatureLabelEnd":25},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":27,"signatureLabelEnd":52},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":54,"signatureLabelEnd":77}],"label":"Table.MaxN(table as table, comparisonCriteria as any, countOrCondition as any)"}]},{"export":"Table.Min","kind":"Function","primitiveType":"any","summary":"Returns the smallest row or a default value using the given criteria.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":10,"signatureLabelEnd":24},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":26,"signatureLabelEnd":51}],"label":"Table.Min(table as table, comparisonCriteria as any)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":10,"signatureLabelEnd":24},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":26,"signatureLabelEnd":51},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":53,"signatureLabelEnd":67}],"label":"Table.Min(table as table, comparisonCriteria as any, default as any)"}]},{"export":"Table.MinN","kind":"Function","primitiveType":"table","summary":"Returns the smallest row(s) using the given criteria.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":11,"signatureLabelEnd":25},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":27,"signatureLabelEnd":52},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":54,"signatureLabelEnd":77}],"label":"Table.MinN(table as table, comparisonCriteria as any, countOrCondition as any)"}]},{"export":"Table.NestedJoin","kind":"Function","primitiveType":"table","summary":"Performs a join between tables on supplied columns and produces the join result in a new column.","signatures":[{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":17,"signatureLabelEnd":32},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":34,"signatureLabelEnd":45},{"documentation":null,"label":"table2","type":"any","signatureLabelOffset":47,"signatureLabelEnd":60},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":62,"signatureLabelEnd":73},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":75,"signatureLabelEnd":96}],"label":"Table.NestedJoin(table1 as table, key1 as any, table2 as any, key2 as any, newColumnName as text)"},{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":17,"signatureLabelEnd":32},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":34,"signatureLabelEnd":45},{"documentation":null,"label":"table2","type":"any","signatureLabelOffset":47,"signatureLabelEnd":60},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":62,"signatureLabelEnd":73},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":75,"signatureLabelEnd":96},{"documentation":null,"label":"joinKind","type":"nullable number","signatureLabelOffset":98,"signatureLabelEnd":125}],"label":"Table.NestedJoin(table1 as table, key1 as any, table2 as any, key2 as any, newColumnName as text, joinKind as nullable number)"},{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":17,"signatureLabelEnd":32},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":34,"signatureLabelEnd":45},{"documentation":null,"label":"table2","type":"any","signatureLabelOffset":47,"signatureLabelEnd":60},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":62,"signatureLabelEnd":73},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":75,"signatureLabelEnd":96},{"documentation":null,"label":"joinKind","type":"nullable number","signatureLabelOffset":98,"signatureLabelEnd":125},{"documentation":null,"label":"keyEqualityComparers","type":"nullable list","signatureLabelOffset":127,"signatureLabelEnd":164}],"label":"Table.NestedJoin(table1 as table, key1 as any, table2 as any, key2 as any, newColumnName as text, joinKind as nullable number, keyEqualityComparers as nullable list)"}]},{"export":"Table.Partition","kind":"Function","primitiveType":"list","summary":"Partitions the table into a list of tables based on the number of groups and column specified.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":16,"signatureLabelEnd":30},{"documentation":null,"label":"column","type":"text","signatureLabelOffset":32,"signatureLabelEnd":46},{"documentation":null,"label":"groups","type":"number","signatureLabelOffset":48,"signatureLabelEnd":64},{"documentation":null,"label":"hash","type":"function","signatureLabelOffset":66,"signatureLabelEnd":82}],"label":"Table.Partition(table as table, column as text, groups as number, hash as function)"}]},{"export":"Table.PartitionValues","kind":"Function","primitiveType":"table","summary":"Returns information about how a table is partitioned.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":22,"signatureLabelEnd":36}],"label":"Table.PartitionValues(table as table)"}]},{"export":"Table.Pivot","kind":"Function","primitiveType":"table","summary":"Given a pair of columns representing attribute-value pairs, rotates the data in the attribute column into a column headings.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"documentation":null,"label":"pivotValues","type":"list","signatureLabelOffset":28,"signatureLabelEnd":47},{"documentation":null,"label":"attributeColumn","type":"text","signatureLabelOffset":49,"signatureLabelEnd":72},{"documentation":null,"label":"valueColumn","type":"text","signatureLabelOffset":74,"signatureLabelEnd":93}],"label":"Table.Pivot(table as table, pivotValues as list, attributeColumn as text, valueColumn as text)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"documentation":null,"label":"pivotValues","type":"list","signatureLabelOffset":28,"signatureLabelEnd":47},{"documentation":null,"label":"attributeColumn","type":"text","signatureLabelOffset":49,"signatureLabelEnd":72},{"documentation":null,"label":"valueColumn","type":"text","signatureLabelOffset":74,"signatureLabelEnd":93},{"documentation":null,"label":"aggregationFunction","type":"nullable function","signatureLabelOffset":95,"signatureLabelEnd":135}],"label":"Table.Pivot(table as table, pivotValues as list, attributeColumn as text, valueColumn as text, aggregationFunction as nullable function)"}]},{"export":"Table.PositionOf","kind":"Function","primitiveType":"any","summary":"Returns the position or positions of the row within the table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"documentation":null,"label":"row","type":"record","signatureLabelOffset":33,"signatureLabelEnd":46}],"label":"Table.PositionOf(table as table, row as record)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"documentation":null,"label":"row","type":"record","signatureLabelOffset":33,"signatureLabelEnd":46},{"documentation":null,"label":"occurrence","type":"any","signatureLabelOffset":48,"signatureLabelEnd":65}],"label":"Table.PositionOf(table as table, row as record, occurrence as any)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"documentation":null,"label":"row","type":"record","signatureLabelOffset":33,"signatureLabelEnd":46},{"documentation":null,"label":"occurrence","type":"any","signatureLabelOffset":48,"signatureLabelEnd":65},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":67,"signatureLabelEnd":90}],"label":"Table.PositionOf(table as table, row as record, occurrence as any, equationCriteria as any)"}]},{"export":"Table.PositionOfAny","kind":"Function","primitiveType":"any","summary":"Returns the position or positions of any of the specified rows within the table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"rows","type":"list","signatureLabelOffset":36,"signatureLabelEnd":48}],"label":"Table.PositionOfAny(table as table, rows as list)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"rows","type":"list","signatureLabelOffset":36,"signatureLabelEnd":48},{"documentation":null,"label":"occurrence","type":"nullable number","signatureLabelOffset":50,"signatureLabelEnd":79}],"label":"Table.PositionOfAny(table as table, rows as list, occurrence as nullable number)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"rows","type":"list","signatureLabelOffset":36,"signatureLabelEnd":48},{"documentation":null,"label":"occurrence","type":"nullable number","signatureLabelOffset":50,"signatureLabelEnd":79},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":81,"signatureLabelEnd":104}],"label":"Table.PositionOfAny(table as table, rows as list, occurrence as nullable number, equationCriteria as any)"}]},{"export":"Table.PrefixColumns","kind":"Function","primitiveType":"table","summary":"Returns a table where the columns have all been prefixed with the given text.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"prefix","type":"text","signatureLabelOffset":36,"signatureLabelEnd":50}],"label":"Table.PrefixColumns(table as table, prefix as text)"}]},{"export":"Table.Profile","kind":"Function","primitiveType":"table","summary":"Returns a profile of the columns of a table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":14,"signatureLabelEnd":28}],"label":"Table.Profile(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":14,"signatureLabelEnd":28},{"documentation":null,"label":"additionalAggregates","type":"nullable list","signatureLabelOffset":30,"signatureLabelEnd":67}],"label":"Table.Profile(table as table, additionalAggregates as nullable list)"}]},{"export":"Table.PromoteHeaders","kind":"Function","primitiveType":"table","summary":"Promotes the first row of values as the new column headers (i.e. column names).","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":21,"signatureLabelEnd":35}],"label":"Table.PromoteHeaders(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":37,"signatureLabelEnd":63}],"label":"Table.PromoteHeaders(table as table, options as nullable record)"}]},{"export":"Table.Range","kind":"Function","primitiveType":"table","summary":"Returns the rows beginning at the specified offset.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":28,"signatureLabelEnd":44}],"label":"Table.Range(table as table, offset as number)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":28,"signatureLabelEnd":44},{"documentation":null,"label":"count","type":"nullable number","signatureLabelOffset":46,"signatureLabelEnd":70}],"label":"Table.Range(table as table, offset as number, count as nullable number)"}]},{"export":"Table.RemoveColumns","kind":"Function","primitiveType":"table","summary":"Removes the specified columns.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":36,"signatureLabelEnd":50}],"label":"Table.RemoveColumns(table as table, columns as any)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":36,"signatureLabelEnd":50},{"documentation":null,"label":"missingField","type":"nullable number","signatureLabelOffset":52,"signatureLabelEnd":83}],"label":"Table.RemoveColumns(table as table, columns as any, missingField as nullable number)"}]},{"export":"Table.RemoveFirstN","kind":"Function","primitiveType":"table","summary":"Returns a table with the first count rows skipped.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":19,"signatureLabelEnd":33}],"label":"Table.RemoveFirstN(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":19,"signatureLabelEnd":33},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":35,"signatureLabelEnd":58}],"label":"Table.RemoveFirstN(table as table, countOrCondition as any)"}]},{"export":"Table.RemoveLastN","kind":"Function","primitiveType":"table","summary":"Returns a table with the last N rows removed.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32}],"label":"Table.RemoveLastN(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":34,"signatureLabelEnd":57}],"label":"Table.RemoveLastN(table as table, countOrCondition as any)"}]},{"export":"Table.RemoveMatchingRows","kind":"Function","primitiveType":"table","summary":"Removes all occurrences of the specified rows from the table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":25,"signatureLabelEnd":39},{"documentation":null,"label":"rows","type":"list","signatureLabelOffset":41,"signatureLabelEnd":53}],"label":"Table.RemoveMatchingRows(table as table, rows as list)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":25,"signatureLabelEnd":39},{"documentation":null,"label":"rows","type":"list","signatureLabelOffset":41,"signatureLabelEnd":53},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":55,"signatureLabelEnd":78}],"label":"Table.RemoveMatchingRows(table as table, rows as list, equationCriteria as any)"}]},{"export":"Table.RemoveRows","kind":"Function","primitiveType":"table","summary":"Removes the specified number of rows.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":33,"signatureLabelEnd":49}],"label":"Table.RemoveRows(table as table, offset as number)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":33,"signatureLabelEnd":49},{"documentation":null,"label":"count","type":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":75}],"label":"Table.RemoveRows(table as table, offset as number, count as nullable number)"}]},{"export":"Table.RemoveRowsWithErrors","kind":"Function","primitiveType":"table","summary":"Returns a table with the rows removed from the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":27,"signatureLabelEnd":41}],"label":"Table.RemoveRowsWithErrors(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"documentation":null,"label":"columns","type":"nullable list","signatureLabelOffset":43,"signatureLabelEnd":67}],"label":"Table.RemoveRowsWithErrors(table as table, columns as nullable list)"}]},{"export":"Table.RenameColumns","kind":"Function","primitiveType":"table","summary":"Applies rename(s) of the form {old, new}.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"renames","type":"list","signatureLabelOffset":36,"signatureLabelEnd":51}],"label":"Table.RenameColumns(table as table, renames as list)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"renames","type":"list","signatureLabelOffset":36,"signatureLabelEnd":51},{"documentation":null,"label":"missingField","type":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":84}],"label":"Table.RenameColumns(table as table, renames as list, missingField as nullable number)"}]},{"export":"Table.ReorderColumns","kind":"Function","primitiveType":"table","summary":"Returns a table with the columns in the specified order.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"documentation":null,"label":"columnOrder","type":"list","signatureLabelOffset":37,"signatureLabelEnd":56}],"label":"Table.ReorderColumns(table as table, columnOrder as list)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":21,"signatureLabelEnd":35},{"documentation":null,"label":"columnOrder","type":"list","signatureLabelOffset":37,"signatureLabelEnd":56},{"documentation":null,"label":"missingField","type":"nullable number","signatureLabelOffset":58,"signatureLabelEnd":89}],"label":"Table.ReorderColumns(table as table, columnOrder as list, missingField as nullable number)"}]},{"export":"Table.Repeat","kind":"Function","primitiveType":"table","summary":"Repeats the rows of the tables a specified number of times.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":13,"signatureLabelEnd":27},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":29,"signatureLabelEnd":44}],"label":"Table.Repeat(table as table, count as number)"}]},{"export":"Table.ReplaceErrorValues","kind":"Function","primitiveType":"table","summary":"Replaces the error values in the specified columns with the corresponding specified value.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":25,"signatureLabelEnd":39},{"documentation":null,"label":"errorReplacement","type":"list","signatureLabelOffset":41,"signatureLabelEnd":65}],"label":"Table.ReplaceErrorValues(table as table, errorReplacement as list)"}]},{"export":"Table.ReplaceKeys","kind":"Function","primitiveType":"table","summary":"Table.ReplaceKeys","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"keys","type":"list","signatureLabelOffset":34,"signatureLabelEnd":46}],"label":"Table.ReplaceKeys(table as table, keys as list)"}]},{"export":"Table.ReplaceMatchingRows","kind":"Function","primitiveType":"table","summary":"Replaces all the specified rows with the provided row(s).","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":26,"signatureLabelEnd":40},{"documentation":null,"label":"replacements","type":"list","signatureLabelOffset":42,"signatureLabelEnd":62}],"label":"Table.ReplaceMatchingRows(table as table, replacements as list)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":26,"signatureLabelEnd":40},{"documentation":null,"label":"replacements","type":"list","signatureLabelOffset":42,"signatureLabelEnd":62},{"documentation":null,"label":"equationCriteria","type":"any","signatureLabelOffset":64,"signatureLabelEnd":87}],"label":"Table.ReplaceMatchingRows(table as table, replacements as list, equationCriteria as any)"}]},{"export":"Table.ReplaceRelationshipIdentity","kind":"Function","primitiveType":"any","summary":"Table.ReplaceRelationshipIdentity","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":34,"signatureLabelEnd":46},{"documentation":null,"label":"identity","type":"text","signatureLabelOffset":48,"signatureLabelEnd":64}],"label":"Table.ReplaceRelationshipIdentity(value as any, identity as text)"}]},{"export":"Table.ReplaceRows","kind":"Function","primitiveType":"table","summary":"Replaces the specified range of rows with the provided row(s).","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":34,"signatureLabelEnd":50},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":52,"signatureLabelEnd":67},{"documentation":null,"label":"rows","type":"list","signatureLabelOffset":69,"signatureLabelEnd":81}],"label":"Table.ReplaceRows(table as table, offset as number, count as number, rows as list)"}]},{"export":"Table.ReplaceValue","kind":"Function","primitiveType":"table","summary":"Replaces one value with another in the specified columns.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":19,"signatureLabelEnd":33},{"documentation":null,"label":"oldValue","type":"any","signatureLabelOffset":35,"signatureLabelEnd":50},{"documentation":null,"label":"newValue","type":"any","signatureLabelOffset":52,"signatureLabelEnd":67},{"documentation":null,"label":"replacer","type":"function","signatureLabelOffset":69,"signatureLabelEnd":89},{"documentation":null,"label":"columnsToSearch","type":"list","signatureLabelOffset":91,"signatureLabelEnd":114}],"label":"Table.ReplaceValue(table as table, oldValue as any, newValue as any, replacer as function, columnsToSearch as list)"}]},{"export":"Table.ReverseRows","kind":"Function","primitiveType":"table","summary":"Returns a table with the rows in reverse order.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32}],"label":"Table.ReverseRows(table as table)"}]},{"export":"Table.RowCount","kind":"Function","primitiveType":"number","summary":"Returns the number of rows in the table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":15,"signatureLabelEnd":29}],"label":"Table.RowCount(table as table)"}]},{"export":"Table.Schema","kind":"Function","primitiveType":"table","summary":"Returns a table containing a description of the columns (i.e. the schema) of the specified table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":13,"signatureLabelEnd":27}],"label":"Table.Schema(table as table)"}]},{"export":"Table.SelectColumns","kind":"Function","primitiveType":"table","summary":"Returns a table with only the specified columns.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":36,"signatureLabelEnd":50}],"label":"Table.SelectColumns(table as table, columns as any)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":36,"signatureLabelEnd":50},{"documentation":null,"label":"missingField","type":"nullable number","signatureLabelOffset":52,"signatureLabelEnd":83}],"label":"Table.SelectColumns(table as table, columns as any, missingField as nullable number)"}]},{"export":"Table.SelectRows","kind":"Function","primitiveType":"table","summary":"Selects the rows that meet the condition function.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":17,"signatureLabelEnd":31},{"documentation":null,"label":"condition","type":"function","signatureLabelOffset":33,"signatureLabelEnd":54}],"label":"Table.SelectRows(table as table, condition as function)"}]},{"export":"Table.SelectRowsWithErrors","kind":"Function","primitiveType":"table","summary":"Returns a table with only those rows of the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":27,"signatureLabelEnd":41}],"label":"Table.SelectRowsWithErrors(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"documentation":null,"label":"columns","type":"nullable list","signatureLabelOffset":43,"signatureLabelEnd":67}],"label":"Table.SelectRowsWithErrors(table as table, columns as nullable list)"}]},{"export":"Table.SingleRow","kind":"Function","primitiveType":"record","summary":"Returns the single row in the table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":16,"signatureLabelEnd":30}],"label":"Table.SingleRow(table as table)"}]},{"export":"Table.Skip","kind":"Function","primitiveType":"table","summary":"Returns a table with the first count rows skipped.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":11,"signatureLabelEnd":25}],"label":"Table.Skip(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":11,"signatureLabelEnd":25},{"documentation":null,"label":"countOrCondition","type":"any","signatureLabelOffset":27,"signatureLabelEnd":50}],"label":"Table.Skip(table as table, countOrCondition as any)"}]},{"export":"Table.Sort","kind":"Function","primitiveType":"table","summary":"Sorts the table using one or more column names and comparison criteria.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":11,"signatureLabelEnd":25},{"documentation":null,"label":"comparisonCriteria","type":"any","signatureLabelOffset":27,"signatureLabelEnd":52}],"label":"Table.Sort(table as table, comparisonCriteria as any)"}]},{"export":"Table.Split","kind":"Function","primitiveType":"list","summary":"Splits the specified table into a list of tables using the specified page size.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"documentation":null,"label":"pageSize","type":"number","signatureLabelOffset":28,"signatureLabelEnd":46}],"label":"Table.Split(table as table, pageSize as number)"}]},{"export":"Table.SplitColumn","kind":"Function","primitiveType":"table","summary":"Splits the specified columns into a set of additional columns using the specified splitter function.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"sourceColumn","type":"text","signatureLabelOffset":34,"signatureLabelEnd":54},{"documentation":null,"label":"splitter","type":"function","signatureLabelOffset":56,"signatureLabelEnd":76}],"label":"Table.SplitColumn(table as table, sourceColumn as text, splitter as function)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"sourceColumn","type":"text","signatureLabelOffset":34,"signatureLabelEnd":54},{"documentation":null,"label":"splitter","type":"function","signatureLabelOffset":56,"signatureLabelEnd":76},{"documentation":null,"label":"columnNamesOrNumber","type":"any","signatureLabelOffset":78,"signatureLabelEnd":104}],"label":"Table.SplitColumn(table as table, sourceColumn as text, splitter as function, columnNamesOrNumber as any)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"sourceColumn","type":"text","signatureLabelOffset":34,"signatureLabelEnd":54},{"documentation":null,"label":"splitter","type":"function","signatureLabelOffset":56,"signatureLabelEnd":76},{"documentation":null,"label":"columnNamesOrNumber","type":"any","signatureLabelOffset":78,"signatureLabelEnd":104},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":106,"signatureLabelEnd":120}],"label":"Table.SplitColumn(table as table, sourceColumn as text, splitter as function, columnNamesOrNumber as any, default as any)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"sourceColumn","type":"text","signatureLabelOffset":34,"signatureLabelEnd":54},{"documentation":null,"label":"splitter","type":"function","signatureLabelOffset":56,"signatureLabelEnd":76},{"documentation":null,"label":"columnNamesOrNumber","type":"any","signatureLabelOffset":78,"signatureLabelEnd":104},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":106,"signatureLabelEnd":120},{"documentation":null,"label":"extraColumns","type":"any","signatureLabelOffset":122,"signatureLabelEnd":141}],"label":"Table.SplitColumn(table as table, sourceColumn as text, splitter as function, columnNamesOrNumber as any, default as any, extraColumns as any)"}]},{"export":"Table.ToColumns","kind":"Function","primitiveType":"list","summary":"Creates a list of nested lists of column values from a table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":16,"signatureLabelEnd":30}],"label":"Table.ToColumns(table as table)"}]},{"export":"Table.ToList","kind":"Function","primitiveType":"list","summary":"Converts a table into a list by applying the specified combining function to each row of values in the table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":13,"signatureLabelEnd":27}],"label":"Table.ToList(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":13,"signatureLabelEnd":27},{"documentation":null,"label":"combiner","type":"nullable function","signatureLabelOffset":29,"signatureLabelEnd":58}],"label":"Table.ToList(table as table, combiner as nullable function)"}]},{"export":"Table.ToRecords","kind":"Function","primitiveType":"list","summary":"Converts a table to a list of records.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":16,"signatureLabelEnd":30}],"label":"Table.ToRecords(table as table)"}]},{"export":"Table.ToRows","kind":"Function","primitiveType":"list","summary":"Creates a list of nested lists of row values from a table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":13,"signatureLabelEnd":27}],"label":"Table.ToRows(table as table)"}]},{"export":"Table.TransformColumnNames","kind":"Function","primitiveType":"table","summary":"Transforms column names by using the given function.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"documentation":null,"label":"nameGenerator","type":"function","signatureLabelOffset":43,"signatureLabelEnd":68}],"label":"Table.TransformColumnNames(table as table, nameGenerator as function)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"documentation":null,"label":"nameGenerator","type":"function","signatureLabelOffset":43,"signatureLabelEnd":68},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":70,"signatureLabelEnd":96}],"label":"Table.TransformColumnNames(table as table, nameGenerator as function, options as nullable record)"}]},{"export":"Table.TransformColumns","kind":"Function","primitiveType":"table","summary":"Applies transformation(s) of the form { column, transform }.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":23,"signatureLabelEnd":37},{"documentation":null,"label":"transformOperations","type":"list","signatureLabelOffset":39,"signatureLabelEnd":66}],"label":"Table.TransformColumns(table as table, transformOperations as list)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":23,"signatureLabelEnd":37},{"documentation":null,"label":"transformOperations","type":"list","signatureLabelOffset":39,"signatureLabelEnd":66},{"documentation":null,"label":"defaultTransformation","type":"nullable function","signatureLabelOffset":68,"signatureLabelEnd":110}],"label":"Table.TransformColumns(table as table, transformOperations as list, defaultTransformation as nullable function)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":23,"signatureLabelEnd":37},{"documentation":null,"label":"transformOperations","type":"list","signatureLabelOffset":39,"signatureLabelEnd":66},{"documentation":null,"label":"defaultTransformation","type":"nullable function","signatureLabelOffset":68,"signatureLabelEnd":110},{"documentation":null,"label":"missingField","type":"nullable number","signatureLabelOffset":112,"signatureLabelEnd":143}],"label":"Table.TransformColumns(table as table, transformOperations as list, defaultTransformation as nullable function, missingField as nullable number)"}]},{"export":"Table.TransformColumnTypes","kind":"Function","primitiveType":"table","summary":"Applies type transformation(s) of the form { column, type } using a specific culture.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"documentation":null,"label":"typeTransformations","type":"list","signatureLabelOffset":43,"signatureLabelEnd":70}],"label":"Table.TransformColumnTypes(table as table, typeTransformations as list)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":27,"signatureLabelEnd":41},{"documentation":null,"label":"typeTransformations","type":"list","signatureLabelOffset":43,"signatureLabelEnd":70},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":72,"signatureLabelEnd":96}],"label":"Table.TransformColumnTypes(table as table, typeTransformations as list, culture as nullable text)"}]},{"export":"Table.TransformRows","kind":"Function","primitiveType":"list","summary":"Transforms the rows of the table using the specified transform function.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"transform","type":"function","signatureLabelOffset":36,"signatureLabelEnd":57}],"label":"Table.TransformRows(table as table, transform as function)"}]},{"export":"Table.Transpose","kind":"Function","primitiveType":"table","summary":"Makes columns into rows and rows into columns.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":16,"signatureLabelEnd":30}],"label":"Table.Transpose(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":16,"signatureLabelEnd":30},{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":32,"signatureLabelEnd":46}],"label":"Table.Transpose(table as table, columns as any)"}]},{"export":"Table.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all tables.","signatures":null},{"export":"Table.Unpivot","kind":"Function","primitiveType":"table","summary":"Translates a set of columns in a table into attribute-value pairs.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":14,"signatureLabelEnd":28},{"documentation":null,"label":"pivotColumns","type":"list","signatureLabelOffset":30,"signatureLabelEnd":50},{"documentation":null,"label":"attributeColumn","type":"text","signatureLabelOffset":52,"signatureLabelEnd":75},{"documentation":null,"label":"valueColumn","type":"text","signatureLabelOffset":77,"signatureLabelEnd":96}],"label":"Table.Unpivot(table as table, pivotColumns as list, attributeColumn as text, valueColumn as text)"}]},{"export":"Table.UnpivotOtherColumns","kind":"Function","primitiveType":"table","summary":"Translates all columns other than a specified set into attribute-value pairs.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":26,"signatureLabelEnd":40},{"documentation":null,"label":"pivotColumns","type":"list","signatureLabelOffset":42,"signatureLabelEnd":62},{"documentation":null,"label":"attributeColumn","type":"text","signatureLabelOffset":64,"signatureLabelEnd":87},{"documentation":null,"label":"valueColumn","type":"text","signatureLabelOffset":89,"signatureLabelEnd":108}],"label":"Table.UnpivotOtherColumns(table as table, pivotColumns as list, attributeColumn as text, valueColumn as text)"}]},{"export":"Table.View","kind":"Function","primitiveType":"table","summary":"Creates or extends a table with user-defined handlers for query and action operations.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"nullable table","signatureLabelOffset":11,"signatureLabelEnd":34},{"documentation":null,"label":"handlers","type":"record","signatureLabelOffset":36,"signatureLabelEnd":54}],"label":"Table.View(table as nullable table, handlers as record)"}]},{"export":"Table.ViewFunction","kind":"Function","primitiveType":"function","summary":"Creates a function that can be intercepted by a handler defined on a view (via Table.View).","signatures":[{"parameters":[{"documentation":null,"label":"function","type":"function","signatureLabelOffset":19,"signatureLabelEnd":39}],"label":"Table.ViewFunction(function as function)"}]},{"export":"Tables.GetRelationships","kind":"Function","primitiveType":"table","summary":"Gets the relationships among a set of tables.","signatures":[{"parameters":[{"documentation":null,"label":"tables","type":"table","signatureLabelOffset":24,"signatureLabelEnd":39}],"label":"Tables.GetRelationships(tables as table)"},{"parameters":[{"documentation":null,"label":"tables","type":"table","signatureLabelOffset":24,"signatureLabelEnd":39},{"documentation":null,"label":"dataColumn","type":"nullable text","signatureLabelOffset":41,"signatureLabelEnd":68}],"label":"Tables.GetRelationships(tables as table, dataColumn as nullable text)"}]},{"export":"Text.AfterDelimiter","kind":"Function","primitiveType":"any","summary":"Text.AfterDelimiter","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":20,"signatureLabelEnd":41},{"documentation":null,"label":"delimiter","type":"text","signatureLabelOffset":43,"signatureLabelEnd":60}],"label":"Text.AfterDelimiter(text as nullable text, delimiter as text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":20,"signatureLabelEnd":41},{"documentation":null,"label":"delimiter","type":"text","signatureLabelOffset":43,"signatureLabelEnd":60},{"documentation":null,"label":"index","type":"any","signatureLabelOffset":62,"signatureLabelEnd":74}],"label":"Text.AfterDelimiter(text as nullable text, delimiter as text, index as any)"}]},{"export":"Text.At","kind":"Function","primitiveType":"nullable text","summary":"Returns the character at the specified position.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":8,"signatureLabelEnd":29},{"documentation":null,"label":"index","type":"number","signatureLabelOffset":31,"signatureLabelEnd":46}],"label":"Text.At(text as nullable text, index as number)"}]},{"export":"Text.BeforeDelimiter","kind":"Function","primitiveType":"any","summary":"Text.BeforeDelimiter","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":21,"signatureLabelEnd":42},{"documentation":null,"label":"delimiter","type":"text","signatureLabelOffset":44,"signatureLabelEnd":61}],"label":"Text.BeforeDelimiter(text as nullable text, delimiter as text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":21,"signatureLabelEnd":42},{"documentation":null,"label":"delimiter","type":"text","signatureLabelOffset":44,"signatureLabelEnd":61},{"documentation":null,"label":"index","type":"any","signatureLabelOffset":63,"signatureLabelEnd":75}],"label":"Text.BeforeDelimiter(text as nullable text, delimiter as text, index as any)"}]},{"export":"Text.BetweenDelimiters","kind":"Function","primitiveType":"any","summary":"Text.BetweenDelimiters","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":23,"signatureLabelEnd":44},{"documentation":null,"label":"startDelimiter","type":"text","signatureLabelOffset":46,"signatureLabelEnd":68},{"documentation":null,"label":"endDelimiter","type":"text","signatureLabelOffset":70,"signatureLabelEnd":90}],"label":"Text.BetweenDelimiters(text as nullable text, startDelimiter as text, endDelimiter as text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":23,"signatureLabelEnd":44},{"documentation":null,"label":"startDelimiter","type":"text","signatureLabelOffset":46,"signatureLabelEnd":68},{"documentation":null,"label":"endDelimiter","type":"text","signatureLabelOffset":70,"signatureLabelEnd":90},{"documentation":null,"label":"startIndex","type":"any","signatureLabelOffset":92,"signatureLabelEnd":109}],"label":"Text.BetweenDelimiters(text as nullable text, startDelimiter as text, endDelimiter as text, startIndex as any)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":23,"signatureLabelEnd":44},{"documentation":null,"label":"startDelimiter","type":"text","signatureLabelOffset":46,"signatureLabelEnd":68},{"documentation":null,"label":"endDelimiter","type":"text","signatureLabelOffset":70,"signatureLabelEnd":90},{"documentation":null,"label":"startIndex","type":"any","signatureLabelOffset":92,"signatureLabelEnd":109},{"documentation":null,"label":"endIndex","type":"any","signatureLabelOffset":111,"signatureLabelEnd":126}],"label":"Text.BetweenDelimiters(text as nullable text, startDelimiter as text, endDelimiter as text, startIndex as any, endIndex as any)"}]},{"export":"Text.Clean","kind":"Function","primitiveType":"nullable text","summary":"Returns the text value with all non-printable characters removed.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32}],"label":"Text.Clean(text as nullable text)"}]},{"export":"Text.Combine","kind":"Function","primitiveType":"text","summary":"Concatenates a list of text values into one text value.","signatures":[{"parameters":[{"documentation":null,"label":"texts","type":"list","signatureLabelOffset":13,"signatureLabelEnd":26}],"label":"Text.Combine(texts as list)"},{"parameters":[{"documentation":null,"label":"texts","type":"list","signatureLabelOffset":13,"signatureLabelEnd":26},{"documentation":null,"label":"separator","type":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":54}],"label":"Text.Combine(texts as list, separator as nullable text)"}]},{"export":"Text.Contains","kind":"Function","primitiveType":"nullable logical","summary":"Returns whether the text contains the substring.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"documentation":null,"label":"substring","type":"text","signatureLabelOffset":37,"signatureLabelEnd":54}],"label":"Text.Contains(text as nullable text, substring as text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"documentation":null,"label":"substring","type":"text","signatureLabelOffset":37,"signatureLabelEnd":54},{"documentation":null,"label":"comparer","type":"nullable function","signatureLabelOffset":56,"signatureLabelEnd":85}],"label":"Text.Contains(text as nullable text, substring as text, comparer as nullable function)"}]},{"export":"Text.End","kind":"Function","primitiveType":"nullable text","summary":"Returns the last characters of the text.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":9,"signatureLabelEnd":30},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":32,"signatureLabelEnd":47}],"label":"Text.End(text as nullable text, count as number)"}]},{"export":"Text.EndsWith","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether the text ends in the specified value.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"documentation":null,"label":"substring","type":"text","signatureLabelOffset":37,"signatureLabelEnd":54}],"label":"Text.EndsWith(text as nullable text, substring as text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"documentation":null,"label":"substring","type":"text","signatureLabelOffset":37,"signatureLabelEnd":54},{"documentation":null,"label":"comparer","type":"nullable function","signatureLabelOffset":56,"signatureLabelEnd":85}],"label":"Text.EndsWith(text as nullable text, substring as text, comparer as nullable function)"}]},{"export":"Text.Format","kind":"Function","primitiveType":"text","summary":"Returns formatted text from a format string and arguments.","signatures":[{"parameters":[{"documentation":null,"label":"formatString","type":"text","signatureLabelOffset":12,"signatureLabelEnd":32},{"documentation":null,"label":"arguments","type":"any","signatureLabelOffset":34,"signatureLabelEnd":50}],"label":"Text.Format(formatString as text, arguments as any)"},{"parameters":[{"documentation":null,"label":"formatString","type":"text","signatureLabelOffset":12,"signatureLabelEnd":32},{"documentation":null,"label":"arguments","type":"any","signatureLabelOffset":34,"signatureLabelEnd":50},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":52,"signatureLabelEnd":76}],"label":"Text.Format(formatString as text, arguments as any, culture as nullable text)"}]},{"export":"Text.From","kind":"Function","primitiveType":"nullable text","summary":"Creates a text value from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":10,"signatureLabelEnd":22}],"label":"Text.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48}],"label":"Text.From(value as any, culture as nullable text)"}]},{"export":"Text.FromBinary","kind":"Function","primitiveType":"nullable text","summary":"Decodes data from a binary form into text.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"nullable binary","signatureLabelOffset":16,"signatureLabelEnd":41}],"label":"Text.FromBinary(binary as nullable binary)"},{"parameters":[{"documentation":null,"label":"binary","type":"nullable binary","signatureLabelOffset":16,"signatureLabelEnd":41},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":43,"signatureLabelEnd":70}],"label":"Text.FromBinary(binary as nullable binary, encoding as nullable number)"}]},{"export":"Text.InferNumberType","kind":"Function","primitiveType":"type","summary":"Infers the granular number type (Int64.Type, Double.Type, etc.) of a number encoded in text","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"text","signatureLabelOffset":21,"signatureLabelEnd":33}],"label":"Text.InferNumberType(text as text)"},{"parameters":[{"documentation":null,"label":"text","type":"text","signatureLabelOffset":21,"signatureLabelEnd":33},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":35,"signatureLabelEnd":59}],"label":"Text.InferNumberType(text as text, culture as nullable text)"}]},{"export":"Text.Insert","kind":"Function","primitiveType":"nullable text","summary":"Inserts one text value into another at a given position.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":35,"signatureLabelEnd":51},{"documentation":null,"label":"newText","type":"text","signatureLabelOffset":53,"signatureLabelEnd":68}],"label":"Text.Insert(text as nullable text, offset as number, newText as text)"}]},{"export":"Text.Length","kind":"Function","primitiveType":"nullable number","summary":"Returns the number of characters.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33}],"label":"Text.Length(text as nullable text)"}]},{"export":"Text.Lower","kind":"Function","primitiveType":"nullable text","summary":"Converts all characters to lowercase.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32}],"label":"Text.Lower(text as nullable text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":34,"signatureLabelEnd":58}],"label":"Text.Lower(text as nullable text, culture as nullable text)"}]},{"export":"Text.Middle","kind":"Function","primitiveType":"nullable text","summary":"Returns the substring up to a specific length.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"documentation":null,"label":"start","type":"number","signatureLabelOffset":35,"signatureLabelEnd":50}],"label":"Text.Middle(text as nullable text, start as number)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"documentation":null,"label":"start","type":"number","signatureLabelOffset":35,"signatureLabelEnd":50},{"documentation":null,"label":"count","type":"nullable number","signatureLabelOffset":52,"signatureLabelEnd":76}],"label":"Text.Middle(text as nullable text, start as number, count as nullable number)"}]},{"export":"Text.NewGuid","kind":"Function","primitiveType":"text","summary":"Returns a new, random globally unique identifier (GUID).","signatures":[{"parameters":[],"label":"Text.NewGuid()"}]},{"export":"Text.PadEnd","kind":"Function","primitiveType":"nullable text","summary":"Returns text of a specified length by padding the end of the given text.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":35,"signatureLabelEnd":50}],"label":"Text.PadEnd(text as nullable text, count as number)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":35,"signatureLabelEnd":50},{"documentation":null,"label":"character","type":"nullable text","signatureLabelOffset":52,"signatureLabelEnd":78}],"label":"Text.PadEnd(text as nullable text, count as number, character as nullable text)"}]},{"export":"Text.PadStart","kind":"Function","primitiveType":"nullable text","summary":"Returns text of a specified length by padding the start of the given text.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":37,"signatureLabelEnd":52}],"label":"Text.PadStart(text as nullable text, count as number)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":37,"signatureLabelEnd":52},{"documentation":null,"label":"character","type":"nullable text","signatureLabelOffset":54,"signatureLabelEnd":80}],"label":"Text.PadStart(text as nullable text, count as number, character as nullable text)"}]},{"export":"Text.PositionOf","kind":"Function","primitiveType":"any","summary":"Returns the first position of the value (-1 if not found).","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"text","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"substring","type":"text","signatureLabelOffset":30,"signatureLabelEnd":47}],"label":"Text.PositionOf(text as text, substring as text)"},{"parameters":[{"documentation":null,"label":"text","type":"text","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"substring","type":"text","signatureLabelOffset":30,"signatureLabelEnd":47},{"documentation":null,"label":"occurrence","type":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":78}],"label":"Text.PositionOf(text as text, substring as text, occurrence as nullable number)"},{"parameters":[{"documentation":null,"label":"text","type":"text","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"substring","type":"text","signatureLabelOffset":30,"signatureLabelEnd":47},{"documentation":null,"label":"occurrence","type":"nullable number","signatureLabelOffset":49,"signatureLabelEnd":78},{"documentation":null,"label":"comparer","type":"nullable function","signatureLabelOffset":80,"signatureLabelEnd":109}],"label":"Text.PositionOf(text as text, substring as text, occurrence as nullable number, comparer as nullable function)"}]},{"export":"Text.PositionOfAny","kind":"Function","primitiveType":"any","summary":"Returns the first position in the text value of any listed character (-1 if not found).","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"text","signatureLabelOffset":19,"signatureLabelEnd":31},{"documentation":null,"label":"characters","type":"list","signatureLabelOffset":33,"signatureLabelEnd":51}],"label":"Text.PositionOfAny(text as text, characters as list)"},{"parameters":[{"documentation":null,"label":"text","type":"text","signatureLabelOffset":19,"signatureLabelEnd":31},{"documentation":null,"label":"characters","type":"list","signatureLabelOffset":33,"signatureLabelEnd":51},{"documentation":null,"label":"occurrence","type":"nullable number","signatureLabelOffset":53,"signatureLabelEnd":82}],"label":"Text.PositionOfAny(text as text, characters as list, occurrence as nullable number)"}]},{"export":"Text.Proper","kind":"Function","primitiveType":"nullable text","summary":"Capitalizes the first letter of each word.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33}],"label":"Text.Proper(text as nullable text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":35,"signatureLabelEnd":59}],"label":"Text.Proper(text as nullable text, culture as nullable text)"}]},{"export":"Text.Range","kind":"Function","primitiveType":"nullable text","summary":"Returns the substring found at offset.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":34,"signatureLabelEnd":50}],"label":"Text.Range(text as nullable text, offset as number)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":34,"signatureLabelEnd":50},{"documentation":null,"label":"count","type":"nullable number","signatureLabelOffset":52,"signatureLabelEnd":76}],"label":"Text.Range(text as nullable text, offset as number, count as nullable number)"}]},{"export":"Text.Remove","kind":"Function","primitiveType":"nullable text","summary":"Removes all occurrences of the given character or list of characters from the input text value.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"documentation":null,"label":"removeChars","type":"any","signatureLabelOffset":35,"signatureLabelEnd":53}],"label":"Text.Remove(text as nullable text, removeChars as any)"}]},{"export":"Text.RemoveRange","kind":"Function","primitiveType":"nullable text","summary":"Removes a count of characters starting at the given offset","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":17,"signatureLabelEnd":38},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":40,"signatureLabelEnd":56}],"label":"Text.RemoveRange(text as nullable text, offset as number)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":17,"signatureLabelEnd":38},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":40,"signatureLabelEnd":56},{"documentation":null,"label":"count","type":"nullable number","signatureLabelOffset":58,"signatureLabelEnd":82}],"label":"Text.RemoveRange(text as nullable text, offset as number, count as nullable number)"}]},{"export":"Text.Repeat","kind":"Function","primitiveType":"nullable text","summary":"Returns a text value composed of the input text repeated a specified number of times.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":35,"signatureLabelEnd":50}],"label":"Text.Repeat(text as nullable text, count as number)"}]},{"export":"Text.Replace","kind":"Function","primitiveType":"nullable text","summary":"Replaces all occurrences of the given substring in the text.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":13,"signatureLabelEnd":34},{"documentation":null,"label":"old","type":"text","signatureLabelOffset":36,"signatureLabelEnd":47},{"documentation":null,"label":"new","type":"text","signatureLabelOffset":49,"signatureLabelEnd":60}],"label":"Text.Replace(text as nullable text, old as text, new as text)"}]},{"export":"Text.ReplaceRange","kind":"Function","primitiveType":"nullable text","summary":"Removes a range of characters and inserts a new value at a specified position.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":18,"signatureLabelEnd":39},{"documentation":null,"label":"offset","type":"number","signatureLabelOffset":41,"signatureLabelEnd":57},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":59,"signatureLabelEnd":74},{"documentation":null,"label":"newText","type":"text","signatureLabelOffset":76,"signatureLabelEnd":91}],"label":"Text.ReplaceRange(text as nullable text, offset as number, count as number, newText as text)"}]},{"export":"Text.Reverse","kind":"Function","primitiveType":"nullable text","summary":"Text.Reverse","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":13,"signatureLabelEnd":34}],"label":"Text.Reverse(text as nullable text)"}]},{"export":"Text.Select","kind":"Function","primitiveType":"nullable text","summary":"Selects all occurrences of the given character or list of characters from the input text value.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":12,"signatureLabelEnd":33},{"documentation":null,"label":"selectChars","type":"any","signatureLabelOffset":35,"signatureLabelEnd":53}],"label":"Text.Select(text as nullable text, selectChars as any)"}]},{"export":"Text.Split","kind":"Function","primitiveType":"list","summary":"Splits text into a list of text values based upon a specified delimiter.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"text","signatureLabelOffset":11,"signatureLabelEnd":23},{"documentation":null,"label":"separator","type":"text","signatureLabelOffset":25,"signatureLabelEnd":42}],"label":"Text.Split(text as text, separator as text)"}]},{"export":"Text.SplitAny","kind":"Function","primitiveType":"list","summary":"Returns a list of text values, split on any of the characters in the delimiter.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"text","signatureLabelOffset":14,"signatureLabelEnd":26},{"documentation":null,"label":"separators","type":"text","signatureLabelOffset":28,"signatureLabelEnd":46}],"label":"Text.SplitAny(text as text, separators as text)"}]},{"export":"Text.Start","kind":"Function","primitiveType":"nullable text","summary":"Returns the start of the text.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32},{"documentation":null,"label":"count","type":"number","signatureLabelOffset":34,"signatureLabelEnd":49}],"label":"Text.Start(text as nullable text, count as number)"}]},{"export":"Text.StartsWith","kind":"Function","primitiveType":"nullable logical","summary":"Indicates whether the text starts with a specified value.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":16,"signatureLabelEnd":37},{"documentation":null,"label":"substring","type":"text","signatureLabelOffset":39,"signatureLabelEnd":56}],"label":"Text.StartsWith(text as nullable text, substring as text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":16,"signatureLabelEnd":37},{"documentation":null,"label":"substring","type":"text","signatureLabelOffset":39,"signatureLabelEnd":56},{"documentation":null,"label":"comparer","type":"nullable function","signatureLabelOffset":58,"signatureLabelEnd":87}],"label":"Text.StartsWith(text as nullable text, substring as text, comparer as nullable function)"}]},{"export":"Text.ToBinary","kind":"Function","primitiveType":"nullable binary","summary":"Encodes text into a binary form.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35}],"label":"Text.ToBinary(text as nullable text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":37,"signatureLabelEnd":64}],"label":"Text.ToBinary(text as nullable text, encoding as nullable number)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":37,"signatureLabelEnd":64},{"documentation":null,"label":"includeByteOrderMark","type":"nullable logical","signatureLabelOffset":66,"signatureLabelEnd":106}],"label":"Text.ToBinary(text as nullable text, encoding as nullable number, includeByteOrderMark as nullable logical)"}]},{"export":"Text.ToList","kind":"Function","primitiveType":"list","summary":"Returns a list of character values from the given text value.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"text","signatureLabelOffset":12,"signatureLabelEnd":24}],"label":"Text.ToList(text as text)"}]},{"export":"Text.Trim","kind":"Function","primitiveType":"nullable text","summary":"Removes all leading and trailing whitespace.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":10,"signatureLabelEnd":31}],"label":"Text.Trim(text as nullable text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":10,"signatureLabelEnd":31},{"documentation":null,"label":"trim","type":"any","signatureLabelOffset":33,"signatureLabelEnd":44}],"label":"Text.Trim(text as nullable text, trim as any)"}]},{"export":"Text.TrimEnd","kind":"Function","primitiveType":"nullable text","summary":"Removes all trailing whitespace.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":13,"signatureLabelEnd":34}],"label":"Text.TrimEnd(text as nullable text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":13,"signatureLabelEnd":34},{"documentation":null,"label":"trim","type":"any","signatureLabelOffset":36,"signatureLabelEnd":47}],"label":"Text.TrimEnd(text as nullable text, trim as any)"}]},{"export":"Text.TrimStart","kind":"Function","primitiveType":"nullable text","summary":"Removes all leading whitespace.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":15,"signatureLabelEnd":36}],"label":"Text.TrimStart(text as nullable text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":15,"signatureLabelEnd":36},{"documentation":null,"label":"trim","type":"any","signatureLabelOffset":38,"signatureLabelEnd":49}],"label":"Text.TrimStart(text as nullable text, trim as any)"}]},{"export":"Text.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all text values.","signatures":null},{"export":"Text.Upper","kind":"Function","primitiveType":"nullable text","summary":"Converts all characters to uppercase.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32}],"label":"Text.Upper(text as nullable text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":11,"signatureLabelEnd":32},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":34,"signatureLabelEnd":58}],"label":"Text.Upper(text as nullable text, culture as nullable text)"}]},{"export":"TextEncoding.Ascii","kind":"Constant","primitiveType":"number","summary":"Use to choose the ASCII binary form.","signatures":null},{"export":"TextEncoding.BigEndianUnicode","kind":"Constant","primitiveType":"number","summary":"Use to choose the UTF16 big endian binary form.","signatures":null},{"export":"TextEncoding.Type","kind":"Type","primitiveType":"type","summary":"Specifies the text encoding type.","signatures":null},{"export":"TextEncoding.Unicode","kind":"Constant","primitiveType":"number","summary":"Use to choose the UTF16 little endian binary form.","signatures":null},{"export":"TextEncoding.Utf16","kind":"Constant","primitiveType":"number","summary":"Use to choose the UTF16 little endian binary form.","signatures":null},{"export":"TextEncoding.Utf8","kind":"Constant","primitiveType":"number","summary":"Use to choose the UTF8 binary form.","signatures":null},{"export":"TextEncoding.Windows","kind":"Constant","primitiveType":"number","summary":"Use to choose the Windows binary form.","signatures":null},{"export":"Time.EndOfHour","kind":"Function","primitiveType":"any","summary":"Returns the last value of the hour.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":15,"signatureLabelEnd":30}],"label":"Time.EndOfHour(dateTime as any)"}]},{"export":"Time.From","kind":"Function","primitiveType":"nullable time","summary":"Creates a time from the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":10,"signatureLabelEnd":22}],"label":"Time.From(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":10,"signatureLabelEnd":22},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":48}],"label":"Time.From(value as any, culture as nullable text)"}]},{"export":"Time.FromText","kind":"Function","primitiveType":"nullable time","summary":"Creates a Time from local and universal Time formats.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35}],"label":"Time.FromText(text as nullable text)"},{"parameters":[{"documentation":null,"label":"text","type":"nullable text","signatureLabelOffset":14,"signatureLabelEnd":35},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":37,"signatureLabelEnd":61}],"label":"Time.FromText(text as nullable text, culture as nullable text)"}]},{"export":"Time.Hour","kind":"Function","primitiveType":"nullable number","summary":"Returns the hour component.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":10,"signatureLabelEnd":25}],"label":"Time.Hour(dateTime as any)"}]},{"export":"Time.Minute","kind":"Function","primitiveType":"nullable number","summary":"Returns the minute component.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":12,"signatureLabelEnd":27}],"label":"Time.Minute(dateTime as any)"}]},{"export":"Time.Second","kind":"Function","primitiveType":"nullable number","summary":"Returns the second component.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":12,"signatureLabelEnd":27}],"label":"Time.Second(dateTime as any)"}]},{"export":"Time.StartOfHour","kind":"Function","primitiveType":"any","summary":"Returns the first value of the hour.","signatures":[{"parameters":[{"documentation":null,"label":"dateTime","type":"any","signatureLabelOffset":17,"signatureLabelEnd":32}],"label":"Time.StartOfHour(dateTime as any)"}]},{"export":"Time.ToRecord","kind":"Function","primitiveType":"record","summary":"Returns a record containing the Time value's parts.","signatures":[{"parameters":[{"documentation":null,"label":"time","type":"time","signatureLabelOffset":14,"signatureLabelEnd":26}],"label":"Time.ToRecord(time as time)"}]},{"export":"Time.ToText","kind":"Function","primitiveType":"nullable text","summary":"Returns a textual representation of the Time value.","signatures":[{"parameters":[{"documentation":null,"label":"time","type":"nullable time","signatureLabelOffset":12,"signatureLabelEnd":33}],"label":"Time.ToText(time as nullable time)"},{"parameters":[{"documentation":null,"label":"time","type":"nullable time","signatureLabelOffset":12,"signatureLabelEnd":33},{"documentation":null,"label":"format","type":"nullable text","signatureLabelOffset":35,"signatureLabelEnd":58}],"label":"Time.ToText(time as nullable time, format as nullable text)"},{"parameters":[{"documentation":null,"label":"time","type":"nullable time","signatureLabelOffset":12,"signatureLabelEnd":33},{"documentation":null,"label":"format","type":"nullable text","signatureLabelOffset":35,"signatureLabelEnd":58},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":60,"signatureLabelEnd":84}],"label":"Time.ToText(time as nullable time, format as nullable text, culture as nullable text)"}]},{"export":"Time.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all time values.","signatures":null},{"export":"TraceLevel.Critical","kind":"Constant","primitiveType":"number","summary":"Specifies Critical trace level.","signatures":null},{"export":"TraceLevel.Error","kind":"Constant","primitiveType":"number","summary":"Specifies Error trace level.","signatures":null},{"export":"TraceLevel.Information","kind":"Constant","primitiveType":"number","summary":"Specifies Information trace level.","signatures":null},{"export":"TraceLevel.Type","kind":"Type","primitiveType":"type","summary":"Specifies the trace level.","signatures":null},{"export":"TraceLevel.Verbose","kind":"Constant","primitiveType":"number","summary":"Specifies Verbose trace level.","signatures":null},{"export":"TraceLevel.Warning","kind":"Constant","primitiveType":"number","summary":"Specifies Warning trace level.","signatures":null},{"export":"Type.AddTableKey","kind":"Function","primitiveType":"type","summary":"Adds a key to the given table type.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"type","signatureLabelOffset":17,"signatureLabelEnd":30},{"documentation":null,"label":"columns","type":"list","signatureLabelOffset":32,"signatureLabelEnd":47},{"documentation":null,"label":"isPrimary","type":"logical","signatureLabelOffset":49,"signatureLabelEnd":69}],"label":"Type.AddTableKey(table as type, columns as list, isPrimary as logical)"}]},{"export":"Type.ClosedRecord","kind":"Function","primitiveType":"type","summary":"Returns a closed version of the given record type (or the same type, if it is already closed).","signatures":[{"parameters":[{"documentation":null,"label":"type","type":"type","signatureLabelOffset":18,"signatureLabelEnd":30}],"label":"Type.ClosedRecord(type as type)"}]},{"export":"Type.Facets","kind":"Function","primitiveType":"record","summary":"Returns the facets of a type.","signatures":[{"parameters":[{"documentation":null,"label":"type","type":"type","signatureLabelOffset":12,"signatureLabelEnd":24}],"label":"Type.Facets(type as type)"}]},{"export":"Type.ForFunction","kind":"Function","primitiveType":"type","summary":"Returns a type that represents functions with specific parameter and return type constraints.","signatures":[{"parameters":[{"documentation":null,"label":"signature","type":"record","signatureLabelOffset":17,"signatureLabelEnd":36},{"documentation":null,"label":"min","type":"number","signatureLabelOffset":38,"signatureLabelEnd":51}],"label":"Type.ForFunction(signature as record, min as number)"}]},{"export":"Type.ForRecord","kind":"Function","primitiveType":"type","summary":"Returns a type that represents records with specific type constraints on fields.","signatures":[{"parameters":[{"documentation":null,"label":"fields","type":"record","signatureLabelOffset":15,"signatureLabelEnd":31},{"documentation":null,"label":"open","type":"logical","signatureLabelOffset":33,"signatureLabelEnd":48}],"label":"Type.ForRecord(fields as record, open as logical)"}]},{"export":"Type.FunctionParameters","kind":"Function","primitiveType":"record","summary":"Returns a record with field values set to the name of the parameters of a function type, and their values set to their corresponding types.","signatures":[{"parameters":[{"documentation":null,"label":"type","type":"type","signatureLabelOffset":24,"signatureLabelEnd":36}],"label":"Type.FunctionParameters(type as type)"}]},{"export":"Type.FunctionRequiredParameters","kind":"Function","primitiveType":"number","summary":"Returns a number indicating the minimum number of parameters required to invoke the type of function.","signatures":[{"parameters":[{"documentation":null,"label":"type","type":"type","signatureLabelOffset":32,"signatureLabelEnd":44}],"label":"Type.FunctionRequiredParameters(type as type)"}]},{"export":"Type.FunctionReturn","kind":"Function","primitiveType":"type","summary":"Returns a type returned by a function type.","signatures":[{"parameters":[{"documentation":null,"label":"type","type":"type","signatureLabelOffset":20,"signatureLabelEnd":32}],"label":"Type.FunctionReturn(type as type)"}]},{"export":"Type.Is","kind":"Function","primitiveType":"logical","summary":"Type.Is","signatures":[{"parameters":[{"documentation":null,"label":"type1","type":"type","signatureLabelOffset":8,"signatureLabelEnd":21},{"documentation":null,"label":"type2","type":"type","signatureLabelOffset":23,"signatureLabelEnd":36}],"label":"Type.Is(type1 as type, type2 as type)"}]},{"export":"Type.IsNullable","kind":"Function","primitiveType":"logical","summary":"Returns true if a type is a nullable type; otherwise, false.","signatures":[{"parameters":[{"documentation":null,"label":"type","type":"type","signatureLabelOffset":16,"signatureLabelEnd":28}],"label":"Type.IsNullable(type as type)"}]},{"export":"Type.IsOpenRecord","kind":"Function","primitiveType":"logical","summary":"Returns whether a record type is open.","signatures":[{"parameters":[{"documentation":null,"label":"type","type":"type","signatureLabelOffset":18,"signatureLabelEnd":30}],"label":"Type.IsOpenRecord(type as type)"}]},{"export":"Type.ListItem","kind":"Function","primitiveType":"type","summary":"Returns an item type from a list type.","signatures":[{"parameters":[{"documentation":null,"label":"type","type":"type","signatureLabelOffset":14,"signatureLabelEnd":26}],"label":"Type.ListItem(type as type)"}]},{"export":"Type.NonNullable","kind":"Function","primitiveType":"type","summary":"Returns the non nullable type from a type.","signatures":[{"parameters":[{"documentation":null,"label":"type","type":"type","signatureLabelOffset":17,"signatureLabelEnd":29}],"label":"Type.NonNullable(type as type)"}]},{"export":"Type.OpenRecord","kind":"Function","primitiveType":"type","summary":"Returns an opened version of the given record type (or the same type, if it is already open).","signatures":[{"parameters":[{"documentation":null,"label":"type","type":"type","signatureLabelOffset":16,"signatureLabelEnd":28}],"label":"Type.OpenRecord(type as type)"}]},{"export":"Type.RecordFields","kind":"Function","primitiveType":"record","summary":"Returns a record describing the fields of a record type with each field of the returned record type having a corresponding name and a value.","signatures":[{"parameters":[{"documentation":null,"label":"type","type":"type","signatureLabelOffset":18,"signatureLabelEnd":30}],"label":"Type.RecordFields(type as type)"}]},{"export":"Type.ReplaceFacets","kind":"Function","primitiveType":"type","summary":"Replaces the facets of a type.","signatures":[{"parameters":[{"documentation":null,"label":"type","type":"type","signatureLabelOffset":19,"signatureLabelEnd":31},{"documentation":null,"label":"facets","type":"record","signatureLabelOffset":33,"signatureLabelEnd":49}],"label":"Type.ReplaceFacets(type as type, facets as record)"}]},{"export":"Type.ReplaceTableKeys","kind":"Function","primitiveType":"type","summary":"Returns a new table type with all keys replaced by the specified list of keys.","signatures":[{"parameters":[{"documentation":null,"label":"tableType","type":"type","signatureLabelOffset":22,"signatureLabelEnd":39},{"documentation":null,"label":"keys","type":"list","signatureLabelOffset":41,"signatureLabelEnd":53}],"label":"Type.ReplaceTableKeys(tableType as type, keys as list)"}]},{"export":"Type.TableColumn","kind":"Function","primitiveType":"type","summary":"Returns the type of a column in a table.","signatures":[{"parameters":[{"documentation":null,"label":"tableType","type":"type","signatureLabelOffset":17,"signatureLabelEnd":34},{"documentation":null,"label":"column","type":"text","signatureLabelOffset":36,"signatureLabelEnd":50}],"label":"Type.TableColumn(tableType as type, column as text)"}]},{"export":"Type.TableKeys","kind":"Function","primitiveType":"list","summary":"Returns the possibly empty list of keys for the given table type.","signatures":[{"parameters":[{"documentation":null,"label":"tableType","type":"type","signatureLabelOffset":15,"signatureLabelEnd":32}],"label":"Type.TableKeys(tableType as type)"}]},{"export":"Type.TableRow","kind":"Function","primitiveType":"type","summary":"Type.TableRow","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"type","signatureLabelOffset":14,"signatureLabelEnd":27}],"label":"Type.TableRow(table as type)"}]},{"export":"Type.TableSchema","kind":"Function","primitiveType":"table","summary":"Returns a table containing a description of the columns (i.e. the schema) of the specified table type.","signatures":[{"parameters":[{"documentation":null,"label":"tableType","type":"type","signatureLabelOffset":17,"signatureLabelEnd":34}],"label":"Type.TableSchema(tableType as type)"}]},{"export":"Type.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all types.","signatures":null},{"export":"Type.Union","kind":"Function","primitiveType":"type","summary":"Returns the union of a list of types.","signatures":[{"parameters":[{"documentation":null,"label":"types","type":"list","signatureLabelOffset":11,"signatureLabelEnd":24}],"label":"Type.Union(types as list)"}]},{"export":"Uri.BuildQueryString","kind":"Function","primitiveType":"text","summary":"Assemble a record into a URI query string.","signatures":[{"parameters":[{"documentation":null,"label":"query","type":"record","signatureLabelOffset":21,"signatureLabelEnd":36}],"label":"Uri.BuildQueryString(query as record)"}]},{"export":"Uri.Combine","kind":"Function","primitiveType":"text","summary":"Returns an absolute URI that is the combination of the input base URI and relative URI.","signatures":[{"parameters":[{"documentation":null,"label":"baseUri","type":"text","signatureLabelOffset":12,"signatureLabelEnd":27},{"documentation":null,"label":"relativeUri","type":"text","signatureLabelOffset":29,"signatureLabelEnd":48}],"label":"Uri.Combine(baseUri as text, relativeUri as text)"}]},{"export":"Uri.EscapeDataString","kind":"Function","primitiveType":"text","summary":"Encodes special characters in accordance with RFC 3986.","signatures":[{"parameters":[{"documentation":null,"label":"data","type":"text","signatureLabelOffset":21,"signatureLabelEnd":33}],"label":"Uri.EscapeDataString(data as text)"}]},{"export":"Uri.Parts","kind":"Function","primitiveType":"record","summary":"Returns the parts of the input absolute URI as a record.","signatures":[{"parameters":[{"documentation":null,"label":"absoluteUri","type":"text","signatureLabelOffset":10,"signatureLabelEnd":29}],"label":"Uri.Parts(absoluteUri as text)"}]},{"export":"Uri.Type","kind":"Type","primitiveType":"type","summary":"The type that represents a text URI.","signatures":null},{"export":"Value.Add","kind":"Function","primitiveType":"any","summary":"Returns the sum of the two values.","signatures":[{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":10,"signatureLabelEnd":23},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":25,"signatureLabelEnd":38}],"label":"Value.Add(value1 as any, value2 as any)"},{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":10,"signatureLabelEnd":23},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":25,"signatureLabelEnd":38},{"documentation":null,"label":"precision","type":"nullable number","signatureLabelOffset":40,"signatureLabelEnd":68}],"label":"Value.Add(value1 as any, value2 as any, precision as nullable number)"}]},{"export":"Value.As","kind":"Function","primitiveType":"any","summary":"Value.As","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":9,"signatureLabelEnd":21},{"documentation":null,"label":"type","type":"type","signatureLabelOffset":23,"signatureLabelEnd":35}],"label":"Value.As(value as any, type as type)"}]},{"export":"Value.Compare","kind":"Function","primitiveType":"number","summary":"Returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second one.","signatures":[{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":14,"signatureLabelEnd":27},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":29,"signatureLabelEnd":42}],"label":"Value.Compare(value1 as any, value2 as any)"},{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":14,"signatureLabelEnd":27},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":29,"signatureLabelEnd":42},{"documentation":null,"label":"precision","type":"nullable number","signatureLabelOffset":44,"signatureLabelEnd":72}],"label":"Value.Compare(value1 as any, value2 as any, precision as nullable number)"}]},{"export":"Value.Divide","kind":"Function","primitiveType":"any","summary":"Returns the result of dividing the first value by the second.","signatures":[{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":28,"signatureLabelEnd":41}],"label":"Value.Divide(value1 as any, value2 as any)"},{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":28,"signatureLabelEnd":41},{"documentation":null,"label":"precision","type":"nullable number","signatureLabelOffset":43,"signatureLabelEnd":71}],"label":"Value.Divide(value1 as any, value2 as any, precision as nullable number)"}]},{"export":"Value.Equals","kind":"Function","primitiveType":"logical","summary":"Returns whether two values are equal.","signatures":[{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":28,"signatureLabelEnd":41}],"label":"Value.Equals(value1 as any, value2 as any)"},{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":13,"signatureLabelEnd":26},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":28,"signatureLabelEnd":41},{"documentation":null,"label":"precision","type":"nullable number","signatureLabelOffset":43,"signatureLabelEnd":71}],"label":"Value.Equals(value1 as any, value2 as any, precision as nullable number)"}]},{"export":"Value.Firewall","kind":"Function","primitiveType":"any","summary":"Value.Firewall","signatures":[{"parameters":[{"documentation":null,"label":"key","type":"text","signatureLabelOffset":15,"signatureLabelEnd":26}],"label":"Value.Firewall(key as text)"}]},{"export":"Value.FromText","kind":"Function","primitiveType":"any","summary":"Creates a strongly-typed value from a textual representation.","signatures":[{"parameters":[{"documentation":null,"label":"text","type":"any","signatureLabelOffset":15,"signatureLabelEnd":26}],"label":"Value.FromText(text as any)"},{"parameters":[{"documentation":null,"label":"text","type":"any","signatureLabelOffset":15,"signatureLabelEnd":26},{"documentation":null,"label":"culture","type":"nullable text","signatureLabelOffset":28,"signatureLabelEnd":52}],"label":"Value.FromText(text as any, culture as nullable text)"}]},{"export":"Value.Is","kind":"Function","primitiveType":"logical","summary":"Value.Is","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":9,"signatureLabelEnd":21},{"documentation":null,"label":"type","type":"type","signatureLabelOffset":23,"signatureLabelEnd":35}],"label":"Value.Is(value as any, type as type)"}]},{"export":"Value.Metadata","kind":"Function","primitiveType":"any","summary":"Returns a record containing the input's metadata.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":15,"signatureLabelEnd":27}],"label":"Value.Metadata(value as any)"}]},{"export":"Value.Multiply","kind":"Function","primitiveType":"any","summary":"Returns the product of the two values.","signatures":[{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":15,"signatureLabelEnd":28},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":30,"signatureLabelEnd":43}],"label":"Value.Multiply(value1 as any, value2 as any)"},{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":15,"signatureLabelEnd":28},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":30,"signatureLabelEnd":43},{"documentation":null,"label":"precision","type":"nullable number","signatureLabelOffset":45,"signatureLabelEnd":73}],"label":"Value.Multiply(value1 as any, value2 as any, precision as nullable number)"}]},{"export":"Value.NativeQuery","kind":"Function","primitiveType":"any","summary":"Evaluates a query against a target.","signatures":[{"parameters":[{"documentation":null,"label":"target","type":"any","signatureLabelOffset":18,"signatureLabelEnd":31},{"documentation":null,"label":"query","type":"text","signatureLabelOffset":33,"signatureLabelEnd":46}],"label":"Value.NativeQuery(target as any, query as text)"},{"parameters":[{"documentation":null,"label":"target","type":"any","signatureLabelOffset":18,"signatureLabelEnd":31},{"documentation":null,"label":"query","type":"text","signatureLabelOffset":33,"signatureLabelEnd":46},{"documentation":null,"label":"parameters","type":"any","signatureLabelOffset":48,"signatureLabelEnd":65}],"label":"Value.NativeQuery(target as any, query as text, parameters as any)"},{"parameters":[{"documentation":null,"label":"target","type":"any","signatureLabelOffset":18,"signatureLabelEnd":31},{"documentation":null,"label":"query","type":"text","signatureLabelOffset":33,"signatureLabelEnd":46},{"documentation":null,"label":"parameters","type":"any","signatureLabelOffset":48,"signatureLabelEnd":65},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":67,"signatureLabelEnd":93}],"label":"Value.NativeQuery(target as any, query as text, parameters as any, options as nullable record)"}]},{"export":"Value.NullableEquals","kind":"Function","primitiveType":"nullable logical","summary":"Returns whether two values are equal.","signatures":[{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":21,"signatureLabelEnd":34},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":36,"signatureLabelEnd":49}],"label":"Value.NullableEquals(value1 as any, value2 as any)"},{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":21,"signatureLabelEnd":34},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":36,"signatureLabelEnd":49},{"documentation":null,"label":"precision","type":"nullable number","signatureLabelOffset":51,"signatureLabelEnd":79}],"label":"Value.NullableEquals(value1 as any, value2 as any, precision as nullable number)"}]},{"export":"Value.RemoveMetadata","kind":"Function","primitiveType":"any","summary":"Strips the input of metadata.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":21,"signatureLabelEnd":33}],"label":"Value.RemoveMetadata(value as any)"},{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":21,"signatureLabelEnd":33},{"documentation":null,"label":"metaValue","type":"any","signatureLabelOffset":35,"signatureLabelEnd":51}],"label":"Value.RemoveMetadata(value as any, metaValue as any)"}]},{"export":"Value.ReplaceMetadata","kind":"Function","primitiveType":"any","summary":"Replaces the input's metadata information.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":22,"signatureLabelEnd":34},{"documentation":null,"label":"metaValue","type":"any","signatureLabelOffset":36,"signatureLabelEnd":52}],"label":"Value.ReplaceMetadata(value as any, metaValue as any)"}]},{"export":"Value.ReplaceType","kind":"Function","primitiveType":"any","summary":"Value.ReplaceType","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":18,"signatureLabelEnd":30},{"documentation":null,"label":"type","type":"type","signatureLabelOffset":32,"signatureLabelEnd":44}],"label":"Value.ReplaceType(value as any, type as type)"}]},{"export":"Value.Subtract","kind":"Function","primitiveType":"any","summary":"Returns the difference of the two values.","signatures":[{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":15,"signatureLabelEnd":28},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":30,"signatureLabelEnd":43}],"label":"Value.Subtract(value1 as any, value2 as any)"},{"parameters":[{"documentation":null,"label":"value1","type":"any","signatureLabelOffset":15,"signatureLabelEnd":28},{"documentation":null,"label":"value2","type":"any","signatureLabelOffset":30,"signatureLabelEnd":43},{"documentation":null,"label":"precision","type":"nullable number","signatureLabelOffset":45,"signatureLabelEnd":73}],"label":"Value.Subtract(value1 as any, value2 as any, precision as nullable number)"}]},{"export":"Value.Type","kind":"Function","primitiveType":"type","summary":"Returns the type of the given value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":11,"signatureLabelEnd":23}],"label":"Value.Type(value as any)"}]},{"export":"Variable.Value","kind":"Function","primitiveType":"any","summary":"Variable.Value","signatures":[{"parameters":[{"documentation":null,"label":"identifier","type":"text","signatureLabelOffset":15,"signatureLabelEnd":33}],"label":"Variable.Value(identifier as text)"}]},{"export":"Xml.Document","kind":"Function","primitiveType":"table","summary":"Returns the contents of the XML document as a hierarchical table.","signatures":[{"parameters":[{"documentation":null,"label":"contents","type":"any","signatureLabelOffset":13,"signatureLabelEnd":28}],"label":"Xml.Document(contents as any)"},{"parameters":[{"documentation":null,"label":"contents","type":"any","signatureLabelOffset":13,"signatureLabelEnd":28},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":30,"signatureLabelEnd":57}],"label":"Xml.Document(contents as any, encoding as nullable number)"}]},{"export":"Xml.Tables","kind":"Function","primitiveType":"table","summary":"Returns the contents of the XML document as a nested collection of flattened tables.","signatures":[{"parameters":[{"documentation":null,"label":"contents","type":"any","signatureLabelOffset":11,"signatureLabelEnd":26}],"label":"Xml.Tables(contents as any)"},{"parameters":[{"documentation":null,"label":"contents","type":"any","signatureLabelOffset":11,"signatureLabelEnd":26},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":28,"signatureLabelEnd":54}],"label":"Xml.Tables(contents as any, options as nullable record)"},{"parameters":[{"documentation":null,"label":"contents","type":"any","signatureLabelOffset":11,"signatureLabelEnd":26},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":28,"signatureLabelEnd":54},{"documentation":null,"label":"encoding","type":"nullable number","signatureLabelOffset":56,"signatureLabelEnd":83}],"label":"Xml.Tables(contents as any, options as nullable record, encoding as nullable number)"}]},{"export":"#binary","kind":"Constructor","primitiveType":"binary","summary":"Creates a binary value from a list of numbers or a base 64 encoded text value.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":8,"signatureLabelEnd":20}],"label":"#binary(value as any) as binary"}]},{"export":"#date","kind":"Constructor","primitiveType":"date","summary":"Creates a date value from year, month, and day.","signatures":[{"parameters":[{"documentation":null,"label":"year","type":"number","signatureLabelOffset":6,"signatureLabelEnd":20},{"documentation":null,"label":"month","type":"number","signatureLabelOffset":22,"signatureLabelEnd":37},{"documentation":null,"label":"day","type":"number","signatureLabelOffset":40,"signatureLabelEnd":52}],"label":"#date(year as number, month as number, day as number) as date"}]},{"export":"#datetime","kind":"Constructor","primitiveType":"datetime","summary":"Creates a datetime value from whole numbers year, month, day, hour, minute, and (fractional) second.","signatures":[{"parameters":[{"documentation":null,"label":"year","type":"number","signatureLabelOffset":10,"signatureLabelEnd":24},{"documentation":null,"label":"month","type":"number","signatureLabelOffset":26,"signatureLabelEnd":41},{"documentation":null,"label":"day","type":"number","signatureLabelOffset":43,"signatureLabelEnd":56},{"documentation":null,"label":"hour","type":"number","signatureLabelOffset":58,"signatureLabelEnd":72},{"documentation":null,"label":"minute","type":"number","signatureLabelOffset":74,"signatureLabelEnd":90},{"documentation":null,"label":"second","type":"number","signatureLabelOffset":92,"signatureLabelEnd":108}],"label":"#datetime(year as number, month as number, day as number, hour as number, minute as number, second as number) as datetime"}]},{"export":"#datetimezone","kind":"Constructor","primitiveType":"datetimezone","summary":"Creates a datetimezone value from whole numbers year, month, day, hour, minute, (fractional) second, (fractional) offset-hours, and offset-minutes.","signatures":[{"parameters":[{"documentation":null,"label":"year","type":"number","signatureLabelOffset":14,"signatureLabelEnd":28},{"documentation":null,"label":"month","type":"number","signatureLabelOffset":30,"signatureLabelEnd":45},{"documentation":null,"label":"day","type":"number","signatureLabelOffset":47,"signatureLabelEnd":60},{"documentation":null,"label":"hour","type":"number","signatureLabelOffset":62,"signatureLabelEnd":76},{"documentation":null,"label":"minute","type":"number","signatureLabelOffset":78,"signatureLabelEnd":94},{"documentation":null,"label":"second","type":"number","signatureLabelOffset":96,"signatureLabelEnd":112},{"documentation":null,"label":"offsetHours","type":"number","signatureLabelOffset":114,"signatureLabelEnd":135},{"documentation":null,"label":"offsetMinutes","type":"number","signatureLabelOffset":137,"signatureLabelEnd":160}],"label":"#datetimezone(year as number, month as number, day as number, hour as number, minute as number, second as number, offsetHours as number, offsetMinutes as number) as datetimezone"}]},{"export":"#duration","kind":"Constructor","primitiveType":"duration","summary":"Creates a duration value from numbers days, hours, minutes, and seconds.","signatures":[{"parameters":[{"documentation":null,"label":"days","type":"number","signatureLabelOffset":10,"signatureLabelEnd":24},{"documentation":null,"label":"hours","type":"number","signatureLabelOffset":26,"signatureLabelEnd":41},{"documentation":null,"label":"minutes","type":"number","signatureLabelOffset":43,"signatureLabelEnd":60},{"documentation":null,"label":"seconds","type":"number","signatureLabelOffset":62,"signatureLabelEnd":79}],"label":"#duration(days as number, hours as number, minutes as number, seconds as number) as duration"}]},{"export":"#table","kind":"Constructor","primitiveType":"table","summary":"Creates a table value from columns and the list rows where each element of the list is an inner list that contains the column values for a single row. columns may be a list of column names, a table type, a number of columns, or null.","signatures":[{"parameters":[{"documentation":null,"label":"columns","type":"any","signatureLabelOffset":7,"signatureLabelEnd":21},{"documentation":null,"label":"rows","type":"any","signatureLabelOffset":23,"signatureLabelEnd":34}],"label":"#table(columns as any, rows as any) as table"}]},{"export":"#time","kind":"Constructor","primitiveType":"time","summary":"Creates a time value from whole numbers hour, minute, and (fractional) second.","signatures":[{"parameters":[{"documentation":null,"label":"hour","type":"number","signatureLabelOffset":6,"signatureLabelEnd":20},{"documentation":null,"label":"minute","type":"number","signatureLabelOffset":22,"signatureLabelEnd":38},{"documentation":null,"label":"second","type":"number","signatureLabelOffset":40,"signatureLabelEnd":56}],"label":"#time(hour as number, minute as number, second as number) as time"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":true}},{"module":"Access","version":null,"exports":[{"export":"Access.Database","kind":"Function","primitiveType":"table","summary":"Returns a structural representation of an Access database.","signatures":[{"parameters":[{"documentation":null,"label":"database","type":"binary","signatureLabelOffset":16,"signatureLabelEnd":34}],"label":"Access.Database(database as binary)"},{"parameters":[{"documentation":null,"label":"database","type":"binary","signatureLabelOffset":16,"signatureLabelEnd":34},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":36,"signatureLabelEnd":62}],"label":"Access.Database(database as binary, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"ActiveDirectory","version":null,"exports":[{"export":"ActiveDirectory.Domains","kind":"Function","primitiveType":"table","summary":"Returns a list of Active Directory domains in the same forest as the specified domain or of the current machine's domain if none is specified.","signatures":[{"parameters":[],"label":"ActiveDirectory.Domains()"},{"parameters":[{"documentation":null,"label":"forestRootDomainName","type":"nullable text","signatureLabelOffset":24,"signatureLabelEnd":61}],"label":"ActiveDirectory.Domains(forestRootDomainName as nullable text)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"AdobeAnalyticsCube","version":null,"exports":[{"export":"AdobeAnalytics.Cubes","kind":"Function","primitiveType":"table","summary":"Returns the report suites in Adobe Analytics.","signatures":[{"parameters":[],"label":"AdobeAnalytics.Cubes()"},{"parameters":[{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":21,"signatureLabelEnd":47}],"label":"AdobeAnalytics.Cubes(options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"AdoDotNet","version":null,"exports":[{"export":"AdoDotNet.DataSource","kind":"Function","primitiveType":"table","summary":"Returns the schema collection for an ADO.NET data source.","signatures":[{"parameters":[{"documentation":null,"label":"providerName","type":"text","signatureLabelOffset":21,"signatureLabelEnd":41},{"documentation":null,"label":"connectionString","type":"any","signatureLabelOffset":43,"signatureLabelEnd":66}],"label":"AdoDotNet.DataSource(providerName as text, connectionString as any)"},{"parameters":[{"documentation":null,"label":"providerName","type":"text","signatureLabelOffset":21,"signatureLabelEnd":41},{"documentation":null,"label":"connectionString","type":"any","signatureLabelOffset":43,"signatureLabelEnd":66},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":68,"signatureLabelEnd":94}],"label":"AdoDotNet.DataSource(providerName as text, connectionString as any, options as nullable record)"}]},{"export":"AdoDotNet.Query","kind":"Function","primitiveType":"table","summary":"Returns the result of running a native query on an ADO.NET data source.","signatures":[{"parameters":[{"documentation":null,"label":"providerName","type":"text","signatureLabelOffset":16,"signatureLabelEnd":36},{"documentation":null,"label":"connectionString","type":"any","signatureLabelOffset":38,"signatureLabelEnd":61},{"documentation":null,"label":"query","type":"text","signatureLabelOffset":63,"signatureLabelEnd":76}],"label":"AdoDotNet.Query(providerName as text, connectionString as any, query as text)"},{"parameters":[{"documentation":null,"label":"providerName","type":"text","signatureLabelOffset":16,"signatureLabelEnd":36},{"documentation":null,"label":"connectionString","type":"any","signatureLabelOffset":38,"signatureLabelEnd":61},{"documentation":null,"label":"query","type":"text","signatureLabelOffset":63,"signatureLabelEnd":76},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":78,"signatureLabelEnd":104}],"label":"AdoDotNet.Query(providerName as text, connectionString as any, query as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":true}},{"module":"AnalysisServices","version":null,"exports":[{"export":"AnalysisServices.Database","kind":"Function","primitiveType":"table","summary":"Returns a table of multidimensional cubes or tabular models from the Analysis Services database.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":26,"signatureLabelEnd":40},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":42,"signatureLabelEnd":58}],"label":"AnalysisServices.Database(server as text, database as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":26,"signatureLabelEnd":40},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":42,"signatureLabelEnd":58},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":60,"signatureLabelEnd":86}],"label":"AnalysisServices.Database(server as text, database as text, options as nullable record)"}]},{"export":"AnalysisServices.Databases","kind":"Function","primitiveType":"table","summary":"Returns the Analysis Services databases on a particular host.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":27,"signatureLabelEnd":41}],"label":"AnalysisServices.Databases(server as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":27,"signatureLabelEnd":41},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":43,"signatureLabelEnd":69}],"label":"AnalysisServices.Databases(server as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"AzureBlob","version":null,"exports":[{"export":"AzureStorage.BlobContents","kind":"Function","primitiveType":"binary","summary":"Returns the content of the specified blob from an Azure storage vault.","signatures":[{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":26,"signatureLabelEnd":37}],"label":"AzureStorage.BlobContents(url as text)"},{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":26,"signatureLabelEnd":37},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":39,"signatureLabelEnd":65}],"label":"AzureStorage.BlobContents(url as text, options as nullable record)"}]},{"export":"AzureStorage.Blobs","kind":"Function","primitiveType":"table","summary":"Returns a navigational table containing the containers found in the specified account from an Azure storage vault.","signatures":[{"parameters":[{"documentation":null,"label":"account","type":"text","signatureLabelOffset":19,"signatureLabelEnd":34}],"label":"AzureStorage.Blobs(account as text)"},{"parameters":[{"documentation":null,"label":"account","type":"text","signatureLabelOffset":19,"signatureLabelEnd":34},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":36,"signatureLabelEnd":62}],"label":"AzureStorage.Blobs(account as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"AzureDataLakeStorage","version":null,"exports":[{"export":"AzureStorage.DataLake","kind":"Function","primitiveType":"table","summary":"Returns a navigational table containing the documents found in the specified container and its subfolders from Azure Data Lake Storage.","signatures":[{"parameters":[{"documentation":null,"label":"endpoint","type":"text","signatureLabelOffset":22,"signatureLabelEnd":38}],"label":"AzureStorage.DataLake(endpoint as text)"},{"parameters":[{"documentation":null,"label":"endpoint","type":"text","signatureLabelOffset":22,"signatureLabelEnd":38},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":40,"signatureLabelEnd":66}],"label":"AzureStorage.DataLake(endpoint as text, options as nullable record)"}]},{"export":"AzureStorage.DataLakeContents","kind":"Function","primitiveType":"binary","summary":"Returns the content of the specified file from an Azure Data Lake Storage filesystem.","signatures":[{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":30,"signatureLabelEnd":41}],"label":"AzureStorage.DataLakeContents(url as text)"},{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":30,"signatureLabelEnd":41},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":43,"signatureLabelEnd":69}],"label":"AzureStorage.DataLakeContents(url as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"AzureTable","version":null,"exports":[{"export":"AzureStorage.Tables","kind":"Function","primitiveType":"table","summary":"Returns a navigational table containing the tables found in the specified account from an Azure storage vault.","signatures":[{"parameters":[{"documentation":null,"label":"account","type":"text","signatureLabelOffset":20,"signatureLabelEnd":35}],"label":"AzureStorage.Tables(account as text)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Informix","version":null,"exports":[{"export":"Informix.Database","kind":"Function","primitiveType":"table","summary":"Returns a table of SQL tables and views available in an Informix database.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":34,"signatureLabelEnd":50}],"label":"Informix.Database(server as text, database as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":34,"signatureLabelEnd":50},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":52,"signatureLabelEnd":78}],"label":"Informix.Database(server as text, database as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"DB2","version":null,"exports":[{"export":"DB2.Database","kind":"Function","primitiveType":"table","summary":"Returns a table of SQL tables and views available in a Db2 database.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":13,"signatureLabelEnd":27},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":29,"signatureLabelEnd":45}],"label":"DB2.Database(server as text, database as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":13,"signatureLabelEnd":27},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":29,"signatureLabelEnd":45},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":47,"signatureLabelEnd":73}],"label":"DB2.Database(server as text, database as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Essbase","version":null,"exports":[{"export":"Essbase.Cubes","kind":"Function","primitiveType":"table","summary":"Returns the cubes in an Essbase instance grouped by Essbase server.","signatures":[{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":14,"signatureLabelEnd":25}],"label":"Essbase.Cubes(url as text)"},{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":14,"signatureLabelEnd":25},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":27,"signatureLabelEnd":53}],"label":"Essbase.Cubes(url as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"ExcelInterop","version":null,"exports":[{"export":"Excel.CurrentWorkbook","kind":"Function","primitiveType":"table","summary":"Returns the tables in the current Excel Workbook.","signatures":[{"parameters":[],"label":"Excel.CurrentWorkbook()"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Exchange","version":null,"exports":[{"export":"Exchange.Contents","kind":"Function","primitiveType":"table","summary":"Returns a table of contents from a Microsoft Exchange account.","signatures":[{"parameters":[],"label":"Exchange.Contents()"},{"parameters":[{"documentation":null,"label":"mailboxAddress","type":"nullable text","signatureLabelOffset":18,"signatureLabelEnd":49}],"label":"Exchange.Contents(mailboxAddress as nullable text)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Facebook","version":null,"exports":[{"export":"Facebook.Graph","kind":"Function","primitiveType":"any","summary":"Returns a record containing content from the Facebook graph.","signatures":[{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":15,"signatureLabelEnd":26}],"label":"Facebook.Graph(url as text)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"File","version":null,"exports":[{"export":"File.Contents","kind":"Function","primitiveType":"binary","summary":"Returns the contents of the specified file as binary.","signatures":[{"parameters":[{"documentation":null,"label":"path","type":"text","signatureLabelOffset":14,"signatureLabelEnd":26}],"label":"File.Contents(path as text)"},{"parameters":[{"documentation":null,"label":"path","type":"text","signatureLabelOffset":14,"signatureLabelEnd":26},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":28,"signatureLabelEnd":54}],"label":"File.Contents(path as text, options as nullable record)"}]},{"export":"Folder.Contents","kind":"Function","primitiveType":"table","summary":"Returns a table containing the properties and contents of the files and folders found in the specifed folder.","signatures":[{"parameters":[{"documentation":null,"label":"path","type":"text","signatureLabelOffset":16,"signatureLabelEnd":28}],"label":"Folder.Contents(path as text)"},{"parameters":[{"documentation":null,"label":"path","type":"text","signatureLabelOffset":16,"signatureLabelEnd":28},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":30,"signatureLabelEnd":56}],"label":"Folder.Contents(path as text, options as nullable record)"}]},{"export":"Folder.Files","kind":"Function","primitiveType":"table","summary":"Returns a table containing the properties and contents of the files found in the specified folder and subfolders.","signatures":[{"parameters":[{"documentation":null,"label":"path","type":"text","signatureLabelOffset":13,"signatureLabelEnd":25}],"label":"Folder.Files(path as text)"},{"parameters":[{"documentation":null,"label":"path","type":"text","signatureLabelOffset":13,"signatureLabelEnd":25},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":27,"signatureLabelEnd":53}],"label":"Folder.Files(path as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"GoogleAnalytics","version":null,"exports":[{"export":"GoogleAnalytics.Accounts","kind":"Function","primitiveType":"table","summary":"Returns Google Analytics accounts.","signatures":[{"parameters":[],"label":"GoogleAnalytics.Accounts()"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Hdfs","version":null,"exports":[{"export":"Hdfs.Contents","kind":"Function","primitiveType":"table","summary":"Returns a table containing the properties and contents of the files and folders found in the specified folder from a Hadoop file system.","signatures":[{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":14,"signatureLabelEnd":25}],"label":"Hdfs.Contents(url as text)"}]},{"export":"Hdfs.Files","kind":"Function","primitiveType":"table","summary":"Returns a table containing the properties and contents of the files found in the specified folder and subfolders from a Hadoop file system.","signatures":[{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":11,"signatureLabelEnd":22}],"label":"Hdfs.Files(url as text)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"HdInsight","version":null,"exports":[{"export":"HdInsight.Containers","kind":"Function","primitiveType":"table","summary":"Returns a navigational table containing the containers found in the specified account from an Azure storage vault.","signatures":[{"parameters":[{"documentation":null,"label":"account","type":"text","signatureLabelOffset":21,"signatureLabelEnd":36}],"label":"HdInsight.Containers(account as text)"}]},{"export":"HdInsight.Contents","kind":"Function","primitiveType":"table","summary":"Returns a navigational table containing the containers found in the specified account from an Azure storage vault.","signatures":[{"parameters":[{"documentation":null,"label":"account","type":"text","signatureLabelOffset":19,"signatureLabelEnd":34}],"label":"HdInsight.Contents(account as text)"}]},{"export":"HdInsight.Files","kind":"Function","primitiveType":"table","summary":"Returns a table containing the properties and contents of the blobs found in the specified container from an Azure storage vault.","signatures":[{"parameters":[{"documentation":null,"label":"account","type":"text","signatureLabelOffset":16,"signatureLabelEnd":31},{"documentation":null,"label":"containerName","type":"text","signatureLabelOffset":33,"signatureLabelEnd":54}],"label":"HdInsight.Files(account as text, containerName as text)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Html","version":null,"exports":[{"export":"Web.Page","kind":"Function","primitiveType":"table","summary":"Returns the contents of the HTML document broken into its constituent structures, as well as a representation of the full document and its text after removing tags.","signatures":[{"parameters":[{"documentation":null,"label":"html","type":"any","signatureLabelOffset":9,"signatureLabelEnd":20}],"label":"Web.Page(html as any)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"MQ","version":null,"exports":[{"export":"MQ.Queue","kind":"Function","primitiveType":"table","summary":"Returns a table of messages available in the queue via a non-destructive read.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":9,"signatureLabelEnd":23},{"documentation":null,"label":"queuemanager","type":"text","signatureLabelOffset":25,"signatureLabelEnd":45},{"documentation":null,"label":"channel","type":"text","signatureLabelOffset":47,"signatureLabelEnd":62},{"documentation":null,"label":"queue","type":"text","signatureLabelOffset":64,"signatureLabelEnd":77}],"label":"MQ.Queue(server as text, queuemanager as text, channel as text, queue as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":9,"signatureLabelEnd":23},{"documentation":null,"label":"queuemanager","type":"text","signatureLabelOffset":25,"signatureLabelEnd":45},{"documentation":null,"label":"channel","type":"text","signatureLabelOffset":47,"signatureLabelEnd":62},{"documentation":null,"label":"queue","type":"text","signatureLabelOffset":64,"signatureLabelEnd":77},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":79,"signatureLabelEnd":105}],"label":"MQ.Queue(server as text, queuemanager as text, channel as text, queue as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"MySQL","version":null,"exports":[{"export":"MySQL.Database","kind":"Function","primitiveType":"table","summary":"Returns a table of SQL tables, views, and stored scalar functions available in a MySQL database.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":15,"signatureLabelEnd":29},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":31,"signatureLabelEnd":47}],"label":"MySQL.Database(server as text, database as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":15,"signatureLabelEnd":29},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":31,"signatureLabelEnd":47},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":49,"signatureLabelEnd":75}],"label":"MySQL.Database(server as text, database as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"OData","version":null,"exports":[{"export":"OData.Feed","kind":"Function","primitiveType":"any","summary":"Returns a table of OData feeds offered by an OData service.","signatures":[{"parameters":[{"documentation":null,"label":"serviceUri","type":"text","signatureLabelOffset":11,"signatureLabelEnd":29}],"label":"OData.Feed(serviceUri as text)"},{"parameters":[{"documentation":null,"label":"serviceUri","type":"text","signatureLabelOffset":11,"signatureLabelEnd":29},{"documentation":null,"label":"headers","type":"nullable record","signatureLabelOffset":31,"signatureLabelEnd":57}],"label":"OData.Feed(serviceUri as text, headers as nullable record)"},{"parameters":[{"documentation":null,"label":"serviceUri","type":"text","signatureLabelOffset":11,"signatureLabelEnd":29},{"documentation":null,"label":"headers","type":"nullable record","signatureLabelOffset":31,"signatureLabelEnd":57},{"documentation":null,"label":"options","type":"any","signatureLabelOffset":59,"signatureLabelEnd":73}],"label":"OData.Feed(serviceUri as text, headers as nullable record, options as any)"}]},{"export":"ODataOmitValues.Nulls","kind":"Constant","primitiveType":"text","summary":"Allows the OData service to omit null values.","signatures":null},{"export":"ODataOmitValues.Type","kind":"Type","primitiveType":"type","summary":"Specifies the kinds of values an OData service can omit.","signatures":null}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":true}},{"module":"Odbc","version":null,"exports":[{"export":"LimitClauseKind.AnsiSql2008","kind":"Constant","primitiveType":"number","summary":"LimitClauseKind.AnsiSql2008","signatures":null},{"export":"LimitClauseKind.Limit","kind":"Constant","primitiveType":"number","summary":"LimitClauseKind.Limit","signatures":null},{"export":"LimitClauseKind.LimitOffset","kind":"Constant","primitiveType":"number","summary":"LimitClauseKind.LimitOffset","signatures":null},{"export":"LimitClauseKind.None","kind":"Constant","primitiveType":"number","summary":"LimitClauseKind.None","signatures":null},{"export":"LimitClauseKind.Top","kind":"Constant","primitiveType":"number","summary":"LimitClauseKind.Top","signatures":null},{"export":"LimitClauseKind.Type","kind":"Type","primitiveType":"type","summary":"LimitClauseKind.Type","signatures":null},{"export":"Odbc.DataSource","kind":"Function","primitiveType":"table","summary":"Returns a table of SQL tables and views from the ODBC data source. ","signatures":[{"parameters":[{"documentation":null,"label":"connectionString","type":"any","signatureLabelOffset":16,"signatureLabelEnd":39}],"label":"Odbc.DataSource(connectionString as any)"},{"parameters":[{"documentation":null,"label":"connectionString","type":"any","signatureLabelOffset":16,"signatureLabelEnd":39},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":41,"signatureLabelEnd":67}],"label":"Odbc.DataSource(connectionString as any, options as nullable record)"}]},{"export":"Odbc.InferOptions","kind":"Function","primitiveType":"record","summary":"Returns the result of trying to infer SQL capabilities for an ODBC driver.","signatures":[{"parameters":[{"documentation":null,"label":"connectionString","type":"any","signatureLabelOffset":18,"signatureLabelEnd":41}],"label":"Odbc.InferOptions(connectionString as any)"}]},{"export":"Odbc.Query","kind":"Function","primitiveType":"table","summary":"Returns the result of running a native query on an ODBC data source.","signatures":[{"parameters":[{"documentation":null,"label":"connectionString","type":"any","signatureLabelOffset":11,"signatureLabelEnd":34},{"documentation":null,"label":"query","type":"text","signatureLabelOffset":36,"signatureLabelEnd":49}],"label":"Odbc.Query(connectionString as any, query as text)"},{"parameters":[{"documentation":null,"label":"connectionString","type":"any","signatureLabelOffset":11,"signatureLabelEnd":34},{"documentation":null,"label":"query","type":"text","signatureLabelOffset":36,"signatureLabelEnd":49},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":51,"signatureLabelEnd":77}],"label":"Odbc.Query(connectionString as any, query as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":true}},{"module":"OleDb","version":null,"exports":[{"export":"OleDb.DataSource","kind":"Function","primitiveType":"table","summary":"Returns a table of SQL tables and views from the OLE DB data source.","signatures":[{"parameters":[{"documentation":null,"label":"connectionString","type":"any","signatureLabelOffset":17,"signatureLabelEnd":40}],"label":"OleDb.DataSource(connectionString as any)"},{"parameters":[{"documentation":null,"label":"connectionString","type":"any","signatureLabelOffset":17,"signatureLabelEnd":40},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":42,"signatureLabelEnd":68}],"label":"OleDb.DataSource(connectionString as any, options as nullable record)"}]},{"export":"OleDb.Query","kind":"Function","primitiveType":"table","summary":"Returns the result of running a native query on an OLE DB data source.","signatures":[{"parameters":[{"documentation":null,"label":"connectionString","type":"any","signatureLabelOffset":12,"signatureLabelEnd":35},{"documentation":null,"label":"query","type":"text","signatureLabelOffset":37,"signatureLabelEnd":50}],"label":"OleDb.Query(connectionString as any, query as text)"},{"parameters":[{"documentation":null,"label":"connectionString","type":"any","signatureLabelOffset":12,"signatureLabelEnd":35},{"documentation":null,"label":"query","type":"text","signatureLabelOffset":37,"signatureLabelEnd":50},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":52,"signatureLabelEnd":78}],"label":"OleDb.Query(connectionString as any, query as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":true}},{"module":"Oracle","version":null,"exports":[{"export":"Oracle.Database","kind":"Function","primitiveType":"table","summary":"Returns a table of SQL tables and views from the Oracle database.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":16,"signatureLabelEnd":30}],"label":"Oracle.Database(server as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":16,"signatureLabelEnd":30},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":32,"signatureLabelEnd":58}],"label":"Oracle.Database(server as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"PostgreSQL","version":null,"exports":[{"export":"PostgreSQL.Database","kind":"Function","primitiveType":"table","summary":"Returns a table of SQL tables and views available in a PostgreSQL database.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":36,"signatureLabelEnd":52}],"label":"PostgreSQL.Database(server as text, database as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":20,"signatureLabelEnd":34},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":36,"signatureLabelEnd":52},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":54,"signatureLabelEnd":80}],"label":"PostgreSQL.Database(server as text, database as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Salesforce","version":null,"exports":[{"export":"Salesforce.Data","kind":"Function","primitiveType":"table","summary":"Returns the objects from the Salesforce account.","signatures":[{"parameters":[],"label":"Salesforce.Data()"},{"parameters":[{"documentation":null,"label":"loginUrl","type":"any","signatureLabelOffset":16,"signatureLabelEnd":31}],"label":"Salesforce.Data(loginUrl as any)"},{"parameters":[{"documentation":null,"label":"loginUrl","type":"any","signatureLabelOffset":16,"signatureLabelEnd":31},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":33,"signatureLabelEnd":59}],"label":"Salesforce.Data(loginUrl as any, options as nullable record)"}]},{"export":"Salesforce.Reports","kind":"Function","primitiveType":"table","summary":"Returns the reports from the Salesforce account.","signatures":[{"parameters":[],"label":"Salesforce.Reports()"},{"parameters":[{"documentation":null,"label":"loginUrl","type":"nullable text","signatureLabelOffset":19,"signatureLabelEnd":44}],"label":"Salesforce.Reports(loginUrl as nullable text)"},{"parameters":[{"documentation":null,"label":"loginUrl","type":"nullable text","signatureLabelOffset":19,"signatureLabelEnd":44},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":46,"signatureLabelEnd":72}],"label":"Salesforce.Reports(loginUrl as nullable text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"SapBusinessWarehouse","version":null,"exports":[{"export":"SapBusinessWarehouse.Cubes","kind":"Function","primitiveType":"table","summary":"Returns the InfoCubes and queries in an SAP Business Warehouse system grouped by InfoArea.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":27,"signatureLabelEnd":41},{"documentation":null,"label":"systemNumberOrSystemId","type":"text","signatureLabelOffset":43,"signatureLabelEnd":73},{"documentation":null,"label":"clientId","type":"text","signatureLabelOffset":75,"signatureLabelEnd":91}],"label":"SapBusinessWarehouse.Cubes(server as text, systemNumberOrSystemId as text, clientId as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":27,"signatureLabelEnd":41},{"documentation":null,"label":"systemNumberOrSystemId","type":"text","signatureLabelOffset":43,"signatureLabelEnd":73},{"documentation":null,"label":"clientId","type":"text","signatureLabelOffset":75,"signatureLabelEnd":91},{"documentation":null,"label":"optionsOrLogonGroup","type":"any","signatureLabelOffset":93,"signatureLabelEnd":119}],"label":"SapBusinessWarehouse.Cubes(server as text, systemNumberOrSystemId as text, clientId as text, optionsOrLogonGroup as any)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":27,"signatureLabelEnd":41},{"documentation":null,"label":"systemNumberOrSystemId","type":"text","signatureLabelOffset":43,"signatureLabelEnd":73},{"documentation":null,"label":"clientId","type":"text","signatureLabelOffset":75,"signatureLabelEnd":91},{"documentation":null,"label":"optionsOrLogonGroup","type":"any","signatureLabelOffset":93,"signatureLabelEnd":119},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":121,"signatureLabelEnd":147}],"label":"SapBusinessWarehouse.Cubes(server as text, systemNumberOrSystemId as text, clientId as text, optionsOrLogonGroup as any, options as nullable record)"}]},{"export":"SapBusinessWarehouseExecutionMode.BasXml","kind":"Constant","primitiveType":"number","summary":"'bXML flattening mode' option for MDX execution in SAP Business Warehouse.","signatures":null},{"export":"SapBusinessWarehouseExecutionMode.BasXmlGzip","kind":"Constant","primitiveType":"number","summary":"'Gzip compressed bXML flattening mode' option for MDX execution in SAP Business Warehouse. Recommended for low latency or high volume queries.","signatures":null},{"export":"SapBusinessWarehouseExecutionMode.DataStream","kind":"Constant","primitiveType":"number","summary":"'DataStream flattening mode' option for MDX execution in SAP Business Warehouse.","signatures":null},{"export":"SapBusinessWarehouseExecutionMode.Type","kind":"Type","primitiveType":"type","summary":"Valid options for SAP Business Warehouse execution mode option.","signatures":null}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"SapHana","version":null,"exports":[{"export":"SapHana.Database","kind":"Function","primitiveType":"table","summary":"Returns the packages in an SAP HANA database.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":17,"signatureLabelEnd":31}],"label":"SapHana.Database(server as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":17,"signatureLabelEnd":31},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":33,"signatureLabelEnd":59}],"label":"SapHana.Database(server as text, options as nullable record)"}]},{"export":"SapHanaDistribution.All","kind":"Constant","primitiveType":"number","summary":"'All' distribution option for SAP HANA.","signatures":null},{"export":"SapHanaDistribution.Connection","kind":"Constant","primitiveType":"number","summary":"'Connection' distribution option for SAP HANA.","signatures":null},{"export":"SapHanaDistribution.Off","kind":"Constant","primitiveType":"number","summary":"'Off' distribution option for SAP HANA.","signatures":null},{"export":"SapHanaDistribution.Statement","kind":"Constant","primitiveType":"number","summary":"'Statement' distribution option for SAP HANA.","signatures":null},{"export":"SapHanaDistribution.Type","kind":"Type","primitiveType":"type","summary":"Valid options for SAP HANA distribution option.","signatures":null},{"export":"SapHanaRangeOperator.Equals","kind":"Constant","primitiveType":"number","summary":"'Equals' range operator for SAP HANA input parameters.","signatures":null},{"export":"SapHanaRangeOperator.GreaterThan","kind":"Constant","primitiveType":"number","summary":"'Greater than' range operator for SAP HANA input parameters.","signatures":null},{"export":"SapHanaRangeOperator.GreaterThanOrEquals","kind":"Constant","primitiveType":"number","summary":"'Greater than or equals' range operator for SAP HANA input parameters.","signatures":null},{"export":"SapHanaRangeOperator.LessThan","kind":"Constant","primitiveType":"number","summary":"'Less than' range operator for SAP HANA input parameters.","signatures":null},{"export":"SapHanaRangeOperator.LessThanOrEquals","kind":"Constant","primitiveType":"number","summary":"'Less than or equals' range operator for SAP HANA input parameters.","signatures":null},{"export":"SapHanaRangeOperator.NotEquals","kind":"Constant","primitiveType":"number","summary":"'Not equals' range operator for SAP HANA input parameters.","signatures":null},{"export":"SapHanaRangeOperator.Type","kind":"Type","primitiveType":"type","summary":"A range operator for SAP HANA range input parameters.","signatures":null}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"SharePoint","version":null,"exports":[{"export":"SharePoint.Contents","kind":"Function","primitiveType":"table","summary":"Returns a table containing content from a SharePoint site.","signatures":[{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":20,"signatureLabelEnd":31}],"label":"SharePoint.Contents(url as text)"},{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":20,"signatureLabelEnd":31},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":33,"signatureLabelEnd":59}],"label":"SharePoint.Contents(url as text, options as nullable record)"}]},{"export":"SharePoint.Files","kind":"Function","primitiveType":"table","summary":"Returns a table containing documents from a SharePoint site.","signatures":[{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":17,"signatureLabelEnd":28}],"label":"SharePoint.Files(url as text)"},{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":17,"signatureLabelEnd":28},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":30,"signatureLabelEnd":56}],"label":"SharePoint.Files(url as text, options as nullable record)"}]},{"export":"SharePoint.Tables","kind":"Function","primitiveType":"table","summary":"Returns a table containing content from a SharePoint List.","signatures":[{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":18,"signatureLabelEnd":29}],"label":"SharePoint.Tables(url as text)"},{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":18,"signatureLabelEnd":29},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":31,"signatureLabelEnd":57}],"label":"SharePoint.Tables(url as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Sql","version":null,"exports":[{"export":"Sql.Database","kind":"Function","primitiveType":"table","summary":"Returns a table of SQL tables, views, and stored functions from the SQL Server database.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":13,"signatureLabelEnd":27},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":29,"signatureLabelEnd":45}],"label":"Sql.Database(server as text, database as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":13,"signatureLabelEnd":27},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":29,"signatureLabelEnd":45},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":47,"signatureLabelEnd":73}],"label":"Sql.Database(server as text, database as text, options as nullable record)"}]},{"export":"Sql.Databases","kind":"Function","primitiveType":"table","summary":"Returns a table of databases on a SQL Server.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":14,"signatureLabelEnd":28}],"label":"Sql.Databases(server as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":14,"signatureLabelEnd":28},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":30,"signatureLabelEnd":56}],"label":"Sql.Databases(server as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Sybase","version":null,"exports":[{"export":"Sybase.Database","kind":"Function","primitiveType":"table","summary":"Returns a table of SQL tables and views available in a Sybase database.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":16,"signatureLabelEnd":30},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":32,"signatureLabelEnd":48}],"label":"Sybase.Database(server as text, database as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":16,"signatureLabelEnd":30},{"documentation":null,"label":"database","type":"text","signatureLabelOffset":32,"signatureLabelEnd":48},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":50,"signatureLabelEnd":76}],"label":"Sybase.Database(server as text, database as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Teradata","version":null,"exports":[{"export":"Teradata.Database","kind":"Function","primitiveType":"table","summary":"Returns a table of SQL tables and views from the Teradata database.","signatures":[{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":18,"signatureLabelEnd":32}],"label":"Teradata.Database(server as text)"},{"parameters":[{"documentation":null,"label":"server","type":"text","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":34,"signatureLabelEnd":60}],"label":"Teradata.Database(server as text, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Web","version":null,"exports":[{"export":"Soda.Feed","kind":"Function","primitiveType":"table","summary":"Returns a table from the contents at the specified URL formatted according to the SODA 2.0 API.","signatures":[{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":10,"signatureLabelEnd":21}],"label":"Soda.Feed(url as text)"}]},{"export":"Web.Contents","kind":"Function","primitiveType":"binary","summary":"Returns the contents downloaded from the url as binary.","signatures":[{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":13,"signatureLabelEnd":24}],"label":"Web.Contents(url as text)"},{"parameters":[{"documentation":null,"label":"url","type":"text","signatureLabelOffset":13,"signatureLabelEnd":24},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":26,"signatureLabelEnd":52}],"label":"Web.Contents(url as text, options as nullable record)"}]},{"export":"WebAction.Request","kind":"Function","primitiveType":"action","summary":"Creates an action that, when executed, will return the results of performing an HTTP request as a binary value.","signatures":[{"parameters":[{"documentation":null,"label":"method","type":"text","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"url","type":"text","signatureLabelOffset":34,"signatureLabelEnd":45}],"label":"WebAction.Request(method as text, url as text)"},{"parameters":[{"documentation":null,"label":"method","type":"text","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"url","type":"text","signatureLabelOffset":34,"signatureLabelEnd":45},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":47,"signatureLabelEnd":73}],"label":"WebAction.Request(method as text, url as text, options as nullable record)"}]},{"export":"WebMethod.Delete","kind":"Constant","primitiveType":"text","summary":"Specifies the DELETE method for HTTP.","signatures":null},{"export":"WebMethod.Get","kind":"Constant","primitiveType":"text","summary":"Specifies the GET method for HTTP.","signatures":null},{"export":"WebMethod.Head","kind":"Constant","primitiveType":"text","summary":"Specifies the HEAD method for HTTP.","signatures":null},{"export":"WebMethod.Patch","kind":"Constant","primitiveType":"text","summary":"Specifies the PATCH method for HTTP.","signatures":null},{"export":"WebMethod.Post","kind":"Constant","primitiveType":"text","summary":"Specifies the POST method for HTTP.","signatures":null},{"export":"WebMethod.Put","kind":"Constant","primitiveType":"text","summary":"Specifies the PUT method for HTTP.","signatures":null},{"export":"WebMethod.Type","kind":"Type","primitiveType":"type","summary":"Specifies an HTTP method.","signatures":null}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":true}},{"module":"WebBrowserContents","version":null,"exports":[{"export":"Web.BrowserContents","kind":"Function","primitiveType":"nullable null","summary":"Web.BrowserContents","signatures":[{"parameters":[],"label":"Web.BrowserContents()"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"FuzzyMatching","version":null,"exports":[{"export":"Table.FuzzyJoin","kind":"Function","primitiveType":"table","summary":"Joins the rows from the two tables that fuzzy match based on the given keys.","signatures":[{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":16,"signatureLabelEnd":31},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":33,"signatureLabelEnd":44},{"documentation":null,"label":"table2","type":"table","signatureLabelOffset":46,"signatureLabelEnd":61},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":63,"signatureLabelEnd":74}],"label":"Table.FuzzyJoin(table1 as table, key1 as any, table2 as table, key2 as any)"},{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":16,"signatureLabelEnd":31},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":33,"signatureLabelEnd":44},{"documentation":null,"label":"table2","type":"table","signatureLabelOffset":46,"signatureLabelEnd":61},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":63,"signatureLabelEnd":74},{"documentation":null,"label":"joinKind","type":"nullable number","signatureLabelOffset":76,"signatureLabelEnd":103}],"label":"Table.FuzzyJoin(table1 as table, key1 as any, table2 as table, key2 as any, joinKind as nullable number)"},{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":16,"signatureLabelEnd":31},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":33,"signatureLabelEnd":44},{"documentation":null,"label":"table2","type":"table","signatureLabelOffset":46,"signatureLabelEnd":61},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":63,"signatureLabelEnd":74},{"documentation":null,"label":"joinKind","type":"nullable number","signatureLabelOffset":76,"signatureLabelEnd":103},{"documentation":null,"label":"joinOptions","type":"nullable record","signatureLabelOffset":105,"signatureLabelEnd":135}],"label":"Table.FuzzyJoin(table1 as table, key1 as any, table2 as table, key2 as any, joinKind as nullable number, joinOptions as nullable record)"}]},{"export":"Table.FuzzyNestedJoin","kind":"Function","primitiveType":"table","summary":"Performs a fuzzy join between tables on supplied columns and produces the join result in a new column.","signatures":[{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":22,"signatureLabelEnd":37},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":39,"signatureLabelEnd":50},{"documentation":null,"label":"table2","type":"table","signatureLabelOffset":52,"signatureLabelEnd":67},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":69,"signatureLabelEnd":80},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":82,"signatureLabelEnd":103}],"label":"Table.FuzzyNestedJoin(table1 as table, key1 as any, table2 as table, key2 as any, newColumnName as text)"},{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":22,"signatureLabelEnd":37},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":39,"signatureLabelEnd":50},{"documentation":null,"label":"table2","type":"table","signatureLabelOffset":52,"signatureLabelEnd":67},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":69,"signatureLabelEnd":80},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":82,"signatureLabelEnd":103},{"documentation":null,"label":"joinKind","type":"nullable number","signatureLabelOffset":105,"signatureLabelEnd":132}],"label":"Table.FuzzyNestedJoin(table1 as table, key1 as any, table2 as table, key2 as any, newColumnName as text, joinKind as nullable number)"},{"parameters":[{"documentation":null,"label":"table1","type":"table","signatureLabelOffset":22,"signatureLabelEnd":37},{"documentation":null,"label":"key1","type":"any","signatureLabelOffset":39,"signatureLabelEnd":50},{"documentation":null,"label":"table2","type":"table","signatureLabelOffset":52,"signatureLabelEnd":67},{"documentation":null,"label":"key2","type":"any","signatureLabelOffset":69,"signatureLabelEnd":80},{"documentation":null,"label":"newColumnName","type":"text","signatureLabelOffset":82,"signatureLabelEnd":103},{"documentation":null,"label":"joinKind","type":"nullable number","signatureLabelOffset":105,"signatureLabelEnd":132},{"documentation":null,"label":"joinOptions","type":"nullable record","signatureLabelOffset":134,"signatureLabelEnd":164}],"label":"Table.FuzzyNestedJoin(table1 as table, key1 as any, table2 as table, key2 as any, newColumnName as text, joinKind as nullable number, joinOptions as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":true}},{"module":"HtmlTable","version":null,"exports":[{"export":"Html.Table","kind":"Function","primitiveType":"nullable null","summary":"Html.Table","signatures":[{"parameters":[],"label":"Html.Table()"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Parquet","version":null,"exports":[{"export":"Parquet.Document","kind":"Function","primitiveType":"nullable null","summary":"Parquet.Document","signatures":[{"parameters":[],"label":"Parquet.Document()"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Pdf","version":null,"exports":[{"export":"Pdf.Tables","kind":"Function","primitiveType":"nullable null","summary":"Pdf.Tables","signatures":[{"parameters":[],"label":"Pdf.Tables()"}]}],"visibility":{"isInternal":false,"isSdkOnly":false,"isSdkVisible":false}},{"module":"Action","version":null,"exports":[{"export":"Action.DoNothing","kind":"Constant","primitiveType":"action","summary":"An action that performs no action when executed and returns <code>null</code> as its result.","signatures":null},{"export":"Action.Return","kind":"Function","primitiveType":"action","summary":"Creates an action that performs no action when executed and returns the specified value as its result.","signatures":[{"parameters":[{"documentation":null,"label":"value","type":"any","signatureLabelOffset":14,"signatureLabelEnd":26}],"label":"Action.Return(value as any)"}]},{"export":"Action.Sequence","kind":"Function","primitiveType":"action","summary":"Creates an action that executes a sequence of actions in order.","signatures":[{"parameters":[{"documentation":null,"label":"actions","type":"list","signatureLabelOffset":16,"signatureLabelEnd":31}],"label":"Action.Sequence(actions as list)"}]},{"export":"Action.Try","kind":"Function","primitiveType":"action","summary":"Creates an action that executes the specified action, catching and returning any errors that occur during its execution.","signatures":[{"parameters":[{"documentation":null,"label":"action","type":"action","signatureLabelOffset":11,"signatureLabelEnd":27}],"label":"Action.Try(action as action)"}]},{"export":"Action.Type","kind":"Type","primitiveType":"type","summary":"The type that represents all actions.","signatures":null},{"export":"Binary.End","kind":"Function","primitiveType":"binary","summary":"Returns the end of a binary value.","signatures":[{"parameters":[{"documentation":null,"label":"binary","type":"binary","signatureLabelOffset":11,"signatureLabelEnd":27}],"label":"Binary.End(binary as binary)"}]},{"export":"TableAction.DeleteRows","kind":"Function","primitiveType":"action","summary":"Creates an action to delete rows from a table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":23,"signatureLabelEnd":37}],"label":"TableAction.DeleteRows(table as table)"}]},{"export":"TableAction.InsertRows","kind":"Function","primitiveType":"action","summary":"Creates an action to insert rows into a table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":23,"signatureLabelEnd":37},{"documentation":null,"label":"rowsToInsert","type":"table","signatureLabelOffset":39,"signatureLabelEnd":60}],"label":"TableAction.InsertRows(table as table, rowsToInsert as table)"}]},{"export":"TableAction.UpdateRows","kind":"Function","primitiveType":"action","summary":"Creates an action to update rows in a table.","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":23,"signatureLabelEnd":37},{"documentation":null,"label":"columnUpdates","type":"list","signatureLabelOffset":39,"signatureLabelEnd":60}],"label":"TableAction.UpdateRows(table as table, columnUpdates as list)"}]},{"export":"ValueAction.NativeStatement","kind":"Function","primitiveType":"action","summary":"Creates an action to execute a statement against a target.","signatures":[{"parameters":[{"documentation":null,"label":"target","type":"any","signatureLabelOffset":28,"signatureLabelEnd":41},{"documentation":null,"label":"statement","type":"text","signatureLabelOffset":43,"signatureLabelEnd":60}],"label":"ValueAction.NativeStatement(target as any, statement as text)"},{"parameters":[{"documentation":null,"label":"target","type":"any","signatureLabelOffset":28,"signatureLabelEnd":41},{"documentation":null,"label":"statement","type":"text","signatureLabelOffset":43,"signatureLabelEnd":60},{"documentation":null,"label":"parameters","type":"any","signatureLabelOffset":62,"signatureLabelEnd":79}],"label":"ValueAction.NativeStatement(target as any, statement as text, parameters as any)"},{"parameters":[{"documentation":null,"label":"target","type":"any","signatureLabelOffset":28,"signatureLabelEnd":41},{"documentation":null,"label":"statement","type":"text","signatureLabelOffset":43,"signatureLabelEnd":60},{"documentation":null,"label":"parameters","type":"any","signatureLabelOffset":62,"signatureLabelEnd":79},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":81,"signatureLabelEnd":107}],"label":"ValueAction.NativeStatement(target as any, statement as text, parameters as any, options as nullable record)"}]},{"export":"ValueAction.Replace","kind":"Function","primitiveType":"action","summary":"Creates an action that replaces the content of a value with the specified value.","signatures":[{"parameters":[{"documentation":null,"label":"target","type":"any","signatureLabelOffset":20,"signatureLabelEnd":33},{"documentation":null,"label":"source","type":"any","signatureLabelOffset":35,"signatureLabelEnd":48}],"label":"ValueAction.Replace(target as any, source as any)"}]}],"visibility":{"isInternal":true,"isSdkOnly":false,"isSdkVisible":true}},{"module":"Crypto","version":null,"exports":[{"export":"Crypto.CreateHash","kind":"Function","primitiveType":"binary","summary":"Crypto.CreateHash","signatures":[{"parameters":[{"documentation":null,"label":"algorithm","type":"number","signatureLabelOffset":18,"signatureLabelEnd":37},{"documentation":null,"label":"value","type":"binary","signatureLabelOffset":39,"signatureLabelEnd":54}],"label":"Crypto.CreateHash(algorithm as number, value as binary)"}]},{"export":"Crypto.CreateHmac","kind":"Function","primitiveType":"binary","summary":"Crypto.CreateHmac","signatures":[{"parameters":[{"documentation":null,"label":"algorithm","type":"number","signatureLabelOffset":18,"signatureLabelEnd":37},{"documentation":null,"label":"password","type":"any","signatureLabelOffset":39,"signatureLabelEnd":54},{"documentation":null,"label":"value","type":"binary","signatureLabelOffset":56,"signatureLabelEnd":71}],"label":"Crypto.CreateHmac(algorithm as number, password as any, value as binary)"}]},{"export":"CryptoAlgorithm.SHA1","kind":"Constant","primitiveType":"number","summary":"CryptoAlgorithm.SHA1","signatures":null},{"export":"CryptoAlgorithm.SHA256","kind":"Constant","primitiveType":"number","summary":"CryptoAlgorithm.SHA256","signatures":null},{"export":"CryptoAlgorithm.Type","kind":"Type","primitiveType":"type","summary":"Specifies which crypto algorithm to be used.","signatures":null},{"export":"OAuth1.HMACSHA1","kind":"Constant","primitiveType":"text","summary":"OAuth1.HMACSHA1","signatures":null},{"export":"OAuth1.RSASHA1","kind":"Constant","primitiveType":"text","summary":"OAuth1.RSASHA1","signatures":null},{"export":"OAuth1.Type","kind":"Type","primitiveType":"type","summary":"OAuth1.Type","signatures":null},{"export":"Web.SignForOAuth1","kind":"Function","primitiveType":"binary","summary":"Web.SignForOAuth1","signatures":[{"parameters":[{"documentation":null,"label":"format","type":"text","signatureLabelOffset":18,"signatureLabelEnd":32},{"documentation":null,"label":"data","type":"binary","signatureLabelOffset":34,"signatureLabelEnd":48},{"documentation":null,"label":"secret","type":"any","signatureLabelOffset":50,"signatureLabelEnd":63}],"label":"Web.SignForOAuth1(format as text, data as binary, secret as any)"}]}],"visibility":{"isInternal":false,"isSdkOnly":true,"isSdkVisible":true}},{"module":"DataSource","version":null,"exports":[{"export":"DataSource.TestConnection","kind":"Function","primitiveType":"logical","summary":"Returns whether a connection to a datasource can be established and credentials are correct.","signatures":[{"parameters":[{"documentation":null,"label":"dataSource","type":"any","signatureLabelOffset":26,"signatureLabelEnd":43}],"label":"DataSource.TestConnection(dataSource as any)"}]}],"visibility":{"isInternal":true,"isSdkOnly":false,"isSdkVisible":true}},{"module":"Delta","version":null,"exports":[{"export":"Delta.Since","kind":"Function","primitiveType":"table","summary":"Delta.Since","signatures":[{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":12,"signatureLabelEnd":26}],"label":"Delta.Since(table as table)"},{"parameters":[{"documentation":null,"label":"table","type":"table","signatureLabelOffset":12,"signatureLabelEnd":26},{"documentation":null,"label":"tag","type":"any","signatureLabelOffset":28,"signatureLabelEnd":38}],"label":"Delta.Since(table as table, tag as any)"}]}],"visibility":{"isInternal":true,"isSdkOnly":false,"isSdkVisible":true}},{"module":"Extensibility","version":null,"exports":[{"export":"Credential.AccessDenied","kind":"Constant","primitiveType":"text","summary":"Credential.AccessDenied","signatures":null},{"export":"Credential.AccessForbidden","kind":"Constant","primitiveType":"text","summary":"Credential.AccessForbidden","signatures":null},{"export":"Credential.EncryptionNotSupported","kind":"Constant","primitiveType":"text","summary":"Credential.EncryptionNotSupported","signatures":null},{"export":"Credential.NativeQueryPermission","kind":"Constant","primitiveType":"text","summary":"Credential.NativeQueryPermission","signatures":null},{"export":"Environment.FeatureSwitch","kind":"Function","primitiveType":"any","summary":"Returns the value of a feature switch set by the current environment.","signatures":[{"parameters":[{"documentation":null,"label":"name","type":"text","signatureLabelOffset":26,"signatureLabelEnd":38}],"label":"Environment.FeatureSwitch(name as text)"},{"parameters":[{"documentation":null,"label":"name","type":"text","signatureLabelOffset":26,"signatureLabelEnd":38},{"documentation":null,"label":"default","type":"any","signatureLabelOffset":40,"signatureLabelEnd":54}],"label":"Environment.FeatureSwitch(name as text, default as any)"}]},{"export":"Error.Unexpected","kind":"Function","primitiveType":"record","summary":"Error.Unexpected","signatures":[{"parameters":[{"documentation":null,"label":"message","type":"nullable text","signatureLabelOffset":17,"signatureLabelEnd":41}],"label":"Error.Unexpected(message as nullable text)"},{"parameters":[{"documentation":null,"label":"message","type":"nullable text","signatureLabelOffset":17,"signatureLabelEnd":41},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":43,"signatureLabelEnd":69}],"label":"Error.Unexpected(message as nullable text, options as nullable record)"}]},{"export":"Extension.Contents","kind":"Function","primitiveType":"binary","summary":"Returns the contents of the specified file within the library PQX file as binary.","signatures":[{"parameters":[{"documentation":null,"label":"file","type":"text","signatureLabelOffset":19,"signatureLabelEnd":31}],"label":"Extension.Contents(file as text)"}]},{"export":"Extension.CredentialError","kind":"Function","primitiveType":"record","summary":"Extension.CredentialError","signatures":[{"parameters":[{"documentation":null,"label":"reason","type":"text","signatureLabelOffset":26,"signatureLabelEnd":40}],"label":"Extension.CredentialError(reason as text)"},{"parameters":[{"documentation":null,"label":"reason","type":"text","signatureLabelOffset":26,"signatureLabelEnd":40},{"documentation":null,"label":"message","type":"nullable text","signatureLabelOffset":42,"signatureLabelEnd":66}],"label":"Extension.CredentialError(reason as text, message as nullable text)"},{"parameters":[{"documentation":null,"label":"reason","type":"text","signatureLabelOffset":26,"signatureLabelEnd":40},{"documentation":null,"label":"message","type":"nullable text","signatureLabelOffset":42,"signatureLabelEnd":66},{"documentation":null,"label":"detail","type":"nullable record","signatureLabelOffset":68,"signatureLabelEnd":93}],"label":"Extension.CredentialError(reason as text, message as nullable text, detail as nullable record)"}]},{"export":"Extension.CurrentApplication","kind":"Function","primitiveType":"nullable record","summary":"Extension.CurrentApplication","signatures":[{"parameters":[],"label":"Extension.CurrentApplication()"}]},{"export":"Extension.CurrentCredential","kind":"Function","primitiveType":"nullable record","summary":"Extension.CurrentCredential","signatures":[{"parameters":[],"label":"Extension.CurrentCredential()"},{"parameters":[{"documentation":null,"label":"forceRefresh","type":"nullable logical","signatureLabelOffset":28,"signatureLabelEnd":60}],"label":"Extension.CurrentCredential(forceRefresh as nullable logical)"}]},{"export":"Extension.InvokeWithCredentials","kind":"Function","primitiveType":"any","summary":"Invokes a function in the context of the provided credential handler.","signatures":[{"parameters":[{"documentation":null,"label":"authenticationHandler","type":"function","signatureLabelOffset":32,"signatureLabelEnd":65},{"documentation":null,"label":"function","type":"function","signatureLabelOffset":67,"signatureLabelEnd":87}],"label":"Extension.InvokeWithCredentials(authenticationHandler as function, function as function)"}]},{"export":"Extension.LoadString","kind":"Function","primitiveType":"nullable text","summary":"Returns a localized string from the library PQX file.","signatures":[{"parameters":[{"documentation":null,"label":"string","type":"text","signatureLabelOffset":21,"signatureLabelEnd":35}],"label":"Extension.LoadString(string as text)"}]},{"export":"Extension.Module","kind":"Function","primitiveType":"any","summary":"Extension.Module","signatures":[{"parameters":[{"documentation":null,"label":"moduleName","type":"text","signatureLabelOffset":17,"signatureLabelEnd":35},{"documentation":null,"label":"resourceKinds","type":"list","signatureLabelOffset":37,"signatureLabelEnd":58}],"label":"Extension.Module(moduleName as text, resourceKinds as list)"}]}],"visibility":{"isInternal":false,"isSdkOnly":true,"isSdkVisible":true}},{"module":"ParallelEvaluation","version":null,"exports":[{"export":"List.ParallelInvoke","kind":"Function","primitiveType":"list","summary":"List.ParallelInvoke","signatures":[{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":20,"signatureLabelEnd":32}],"label":"List.ParallelInvoke(list as list)"},{"parameters":[{"documentation":null,"label":"list","type":"list","signatureLabelOffset":20,"signatureLabelEnd":32},{"documentation":null,"label":"concurrency","type":"nullable number","signatureLabelOffset":34,"signatureLabelEnd":64}],"label":"List.ParallelInvoke(list as list, concurrency as nullable number)"}]}],"visibility":{"isInternal":false,"isSdkOnly":true,"isSdkVisible":true}},{"module":"OpenApi","version":null,"exports":[{"export":"OpenApi.Document","kind":"Function","primitiveType":"any","summary":"Returns a table of operations from an Open API definition.","signatures":[{"parameters":[{"documentation":null,"label":"definition","type":"binary","signatureLabelOffset":17,"signatureLabelEnd":37}],"label":"OpenApi.Document(definition as binary)"},{"parameters":[{"documentation":null,"label":"definition","type":"binary","signatureLabelOffset":17,"signatureLabelEnd":37},{"documentation":null,"label":"options","type":"nullable record","signatureLabelOffset":39,"signatureLabelEnd":65}],"label":"OpenApi.Document(definition as binary, options as nullable record)"}]}],"visibility":{"isInternal":false,"isSdkOnly":true,"isSdkVisible":true}}]